// ============================================================================
//
// Copyright (c) 2006-2015, Talend Inc.
//
// This source code has been automatically generated by_Talend Open Studio for ESB
// / Licensed under the Apache License, Version 2.0 (the "License");
// you may not use this file except in compliance with the License.
// You may obtain a copy of the License at
// http://www.apache.org/licenses/LICENSE-2.0
// 
// Unless required by applicable law or agreed to in writing, software
// distributed under the License is distributed on an "AS IS" BASIS,
// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
// See the License for the specific language governing permissions and
// limitations under the License.

package local_project.step01_stage_salesforce_data_0_1;

import routines.Numeric;
import routines.DataOperation;
import routines.TalendDataGenerator;
import routines.TalendString;
import routines.StringHandling;
import routines.Relational;
import routines.TalendDate;
import routines.DemoRoutines;
import routines.GetRandomPhoneNum;
import routines.Mathematical;
import routines.system.*;
import routines.system.api.*;
import java.text.ParseException;
import java.text.SimpleDateFormat;
import java.util.Date;
import java.util.List;
import java.math.BigDecimal;
import java.io.ByteArrayOutputStream;
import java.io.ByteArrayInputStream;
import java.io.DataInputStream;
import java.io.DataOutputStream;
import java.io.ObjectOutputStream;
import java.io.ObjectInputStream;
import java.io.IOException;
import java.util.Comparator;

@SuppressWarnings("unused")
/**
 * Job: Step01_Stage_salesforce_data Purpose: <br>
 * Description:  <br>
 * @author user@talend.com
 * @version 6.1.1.20151214_1327
 * @status 
 */
public class Step01_Stage_salesforce_data implements TalendJob {

	public final Object obj = new Object();

	// for transmiting parameters purpose
	private Object valueObject = null;

	public Object getValueObject() {
		return this.valueObject;
	}

	public void setValueObject(Object valueObject) {
		this.valueObject = valueObject;
	}

	private Object[] multiThreadLockWrite = new Object[0];

	private final static String defaultCharset = java.nio.charset.Charset
			.defaultCharset().name();

	private final static String utf8Charset = "UTF-8";

	// create and load default properties
	private java.util.Properties defaultProps = new java.util.Properties();

	// create application properties with default
	public class ContextProperties extends java.util.Properties {

		private static final long serialVersionUID = 1L;

		public ContextProperties(java.util.Properties properties) {
			super(properties);
		}

		public ContextProperties() {
			super();
		}

		public void synchronizeContext() {

		}

	}

	private ContextProperties context = new ContextProperties();

	public ContextProperties getContext() {
		return this.context;
	}

	private final String jobVersion = "0.1";
	private final String jobName = "Step01_Stage_salesforce_data";
	private final String projectName = "LOCAL_PROJECT";
	public Integer errorCode = null;
	private String currentComponent = "";

	private final java.util.Map<String, Object> globalMap = java.util.Collections
			.synchronizedMap(new java.util.HashMap<String, Object>());

	private final java.util.Map<String, Long> start_Hash = java.util.Collections
			.synchronizedMap(new java.util.HashMap<String, Long>());
	private final java.util.Map<String, Long> end_Hash = java.util.Collections
			.synchronizedMap(new java.util.HashMap<String, Long>());
	private final java.util.Map<String, Boolean> ok_Hash = java.util.Collections
			.synchronizedMap(new java.util.HashMap<String, Boolean>());
	public final java.util.List<String[]> globalBuffer = java.util.Collections
			.synchronizedList(new java.util.ArrayList<String[]>());

	private RunStat runStat = new RunStat();

	// OSGi DataSource
	private final static String KEY_DB_DATASOURCES = "KEY_DB_DATASOURCES";

	public void setDataSources(
			java.util.Map<String, javax.sql.DataSource> dataSources) {
		java.util.Map<String, routines.system.TalendDataSource> talendDataSources = new java.util.HashMap<String, routines.system.TalendDataSource>();
		for (java.util.Map.Entry<String, javax.sql.DataSource> dataSourceEntry : dataSources
				.entrySet()) {
			talendDataSources.put(
					dataSourceEntry.getKey(),
					new routines.system.TalendDataSource(dataSourceEntry
							.getValue()));
		}
		globalMap.put(KEY_DB_DATASOURCES, talendDataSources);
	}

	private final java.io.ByteArrayOutputStream baos = new java.io.ByteArrayOutputStream();
	private final java.io.PrintStream errorMessagePS = new java.io.PrintStream(
			new java.io.BufferedOutputStream(baos));

	public String getExceptionStackTrace() {
		if ("failure".equals(this.getStatus())) {
			errorMessagePS.flush();
			return baos.toString();
		}
		return null;
	}

	private Exception exception;

	public Exception getException() {
		if ("failure".equals(this.getStatus())) {
			return this.exception;
		}
		return null;
	}

	private class TalendException extends Exception {

		private static final long serialVersionUID = 1L;

		private java.util.Map<String, Object> globalMap = null;
		private Exception e = null;
		private String currentComponent = null;
		private String virtualComponentName = null;

		public void setVirtualComponentName(String virtualComponentName) {
			this.virtualComponentName = virtualComponentName;
		}

		private TalendException(Exception e, String errorComponent,
				final java.util.Map<String, Object> globalMap) {
			this.currentComponent = errorComponent;
			this.globalMap = globalMap;
			this.e = e;
		}

		public Exception getException() {
			return this.e;
		}

		public String getCurrentComponent() {
			return this.currentComponent;
		}

		public String getExceptionCauseMessage(Exception e) {
			Throwable cause = e;
			String message = null;
			int i = 10;
			while (null != cause && 0 < i--) {
				message = cause.getMessage();
				if (null == message) {
					cause = cause.getCause();
				} else {
					break;
				}
			}
			if (null == message) {
				message = e.getClass().getName();
			}
			return message;
		}

		@Override
		public void printStackTrace() {
			if (!(e instanceof TalendException || e instanceof TDieException)) {
				if (virtualComponentName != null
						&& currentComponent.indexOf(virtualComponentName + "_") == 0) {
					globalMap.put(virtualComponentName + "_ERROR_MESSAGE",
							getExceptionCauseMessage(e));
				}
				globalMap.put(currentComponent + "_ERROR_MESSAGE",
						getExceptionCauseMessage(e));
				System.err
						.println("Exception in component " + currentComponent);
			}
			if (!(e instanceof TDieException)) {
				if (e instanceof TalendException) {
					e.printStackTrace();
				} else {
					e.printStackTrace();
					e.printStackTrace(errorMessagePS);
					Step01_Stage_salesforce_data.this.exception = e;
				}
			}
			if (!(e instanceof TalendException)) {
				try {
					for (java.lang.reflect.Method m : this.getClass()
							.getEnclosingClass().getMethods()) {
						if (m.getName().compareTo(currentComponent + "_error") == 0) {
							m.invoke(Step01_Stage_salesforce_data.this,
									new Object[] { e, currentComponent,
											globalMap });
							break;
						}
					}

					if (!(e instanceof TDieException)) {
					}
				} catch (Exception e) {
					this.e.printStackTrace();
				}
			}
		}
	}

	public void tPostgresqlOutput_1_error(Exception exception,
			String errorComponent, final java.util.Map<String, Object> globalMap)
			throws TalendException {

		end_Hash.put(errorComponent, System.currentTimeMillis());

		((java.util.Map) threadLocal.get()).put("status", "failure");

		tPostgresqlOutput_1_onSubJobError(exception, errorComponent, globalMap);
	}

	public void tSalesforceInput_1_error(Exception exception,
			String errorComponent, final java.util.Map<String, Object> globalMap)
			throws TalendException {

		end_Hash.put(errorComponent, System.currentTimeMillis());

		((java.util.Map) threadLocal.get()).put("status", "failure");

		tSalesforceInput_1_onSubJobError(exception, errorComponent, globalMap);
	}

	public void tSalesforceInput_2_error(Exception exception,
			String errorComponent, final java.util.Map<String, Object> globalMap)
			throws TalendException {

		end_Hash.put(errorComponent, System.currentTimeMillis());

		((java.util.Map) threadLocal.get()).put("status", "failure");

		tSalesforceInput_2_onSubJobError(exception, errorComponent, globalMap);
	}

	public void tPostgresqlOutput_2_error(Exception exception,
			String errorComponent, final java.util.Map<String, Object> globalMap)
			throws TalendException {

		end_Hash.put(errorComponent, System.currentTimeMillis());

		((java.util.Map) threadLocal.get()).put("status", "failure");

		tSalesforceInput_2_onSubJobError(exception, errorComponent, globalMap);
	}

	public void tPostgresqlOutput_1_onSubJobError(Exception exception,
			String errorComponent, final java.util.Map<String, Object> globalMap)
			throws TalendException {

		resumeUtil.addLog("SYSTEM_LOG", "NODE:" + errorComponent, "", Thread
				.currentThread().getId() + "", "FATAL", "",
				exception.getMessage(),
				ResumeUtil.getExceptionStackTrace(exception), "");

	}

	public void tSalesforceInput_1_onSubJobError(Exception exception,
			String errorComponent, final java.util.Map<String, Object> globalMap)
			throws TalendException {

		resumeUtil.addLog("SYSTEM_LOG", "NODE:" + errorComponent, "", Thread
				.currentThread().getId() + "", "FATAL", "",
				exception.getMessage(),
				ResumeUtil.getExceptionStackTrace(exception), "");

	}

	public void tSalesforceInput_2_onSubJobError(Exception exception,
			String errorComponent, final java.util.Map<String, Object> globalMap)
			throws TalendException {

		resumeUtil.addLog("SYSTEM_LOG", "NODE:" + errorComponent, "", Thread
				.currentThread().getId() + "", "FATAL", "",
				exception.getMessage(),
				ResumeUtil.getExceptionStackTrace(exception), "");

	}

	public void tPostgresqlOutput_1Process(
			final java.util.Map<String, Object> globalMap)
			throws TalendException {
		globalMap.put("tPostgresqlOutput_1_SUBPROCESS_STATE", 0);

		final boolean execStat = this.execStat;

		String iterateId = "";

		String currentComponent = "";
		java.util.Map<String, Object> resourceMap = new java.util.HashMap<String, Object>();

		try {

			String currentMethodName = new java.lang.Exception()
					.getStackTrace()[0].getMethodName();
			boolean resumeIt = currentMethodName.equals(resumeEntryMethodName);
			if (resumeEntryMethodName == null || resumeIt || globalResumeTicket) {// start
																					// the
																					// resume
				globalResumeTicket = true;

				/**
				 * [tPostgresqlOutput_1 begin ] start
				 */

				ok_Hash.put("tPostgresqlOutput_1", false);
				start_Hash.put("tPostgresqlOutput_1",
						System.currentTimeMillis());

				currentComponent = "tPostgresqlOutput_1";

				int tos_count_tPostgresqlOutput_1 = 0;

				String dbschema_tPostgresqlOutput_1 = null;
				dbschema_tPostgresqlOutput_1 = "cora";

				String tableName_tPostgresqlOutput_1 = null;
				if (dbschema_tPostgresqlOutput_1 == null
						|| dbschema_tPostgresqlOutput_1.trim().length() == 0) {
					tableName_tPostgresqlOutput_1 = "sf_account";
				} else {
					tableName_tPostgresqlOutput_1 = dbschema_tPostgresqlOutput_1
							+ "\".\"" + "sf_account";
				}

				int nb_line_tPostgresqlOutput_1 = 0;
				int nb_line_update_tPostgresqlOutput_1 = 0;
				int nb_line_inserted_tPostgresqlOutput_1 = 0;
				int nb_line_deleted_tPostgresqlOutput_1 = 0;
				int nb_line_rejected_tPostgresqlOutput_1 = 0;

				int deletedCount_tPostgresqlOutput_1 = 0;
				int updatedCount_tPostgresqlOutput_1 = 0;
				int insertedCount_tPostgresqlOutput_1 = 0;
				int rejectedCount_tPostgresqlOutput_1 = 0;

				boolean whetherReject_tPostgresqlOutput_1 = false;

				java.sql.Connection conn_tPostgresqlOutput_1 = null;
				String dbUser_tPostgresqlOutput_1 = null;

				java.lang.Class.forName("org.postgresql.Driver");
				String url_tPostgresqlOutput_1 = "jdbc:postgresql://"
						+ "localhost" + ":" + "5432" + "/" + "cora_db";
				dbUser_tPostgresqlOutput_1 = "cora";

				final String decryptedPassword_tPostgresqlOutput_1 = routines.system.PasswordEncryptUtil
						.decryptPassword("06900cf8b77d70ca");

				String dbPwd_tPostgresqlOutput_1 = decryptedPassword_tPostgresqlOutput_1;

				conn_tPostgresqlOutput_1 = java.sql.DriverManager
						.getConnection(url_tPostgresqlOutput_1,
								dbUser_tPostgresqlOutput_1,
								dbPwd_tPostgresqlOutput_1);

				resourceMap.put("conn_tPostgresqlOutput_1",
						conn_tPostgresqlOutput_1);
				conn_tPostgresqlOutput_1.setAutoCommit(false);
				int commitEvery_tPostgresqlOutput_1 = 1000;
				int commitCounter_tPostgresqlOutput_1 = 0;

				int batchSize_tPostgresqlOutput_1 = 2000;
				int batchSizeCounter_tPostgresqlOutput_1 = 0;

				int count_tPostgresqlOutput_1 = 0;
				java.sql.DatabaseMetaData dbMetaData_tPostgresqlOutput_1 = conn_tPostgresqlOutput_1
						.getMetaData();
				java.sql.ResultSet rsTable_tPostgresqlOutput_1 = dbMetaData_tPostgresqlOutput_1
						.getTables(null, null, null, new String[] { "TABLE" });
				boolean whetherExist_tPostgresqlOutput_1 = false;
				String defaultSchema_tPostgresqlOutput_1 = "public";
				if (dbschema_tPostgresqlOutput_1 == null
						|| dbschema_tPostgresqlOutput_1.trim().length() == 0) {
					java.sql.Statement stmtSchema_tPostgresqlOutput_1 = conn_tPostgresqlOutput_1
							.createStatement();
					java.sql.ResultSet rsSchema_tPostgresqlOutput_1 = stmtSchema_tPostgresqlOutput_1
							.executeQuery("select current_schema() ");
					while (rsSchema_tPostgresqlOutput_1.next()) {
						defaultSchema_tPostgresqlOutput_1 = rsSchema_tPostgresqlOutput_1
								.getString("current_schema");
					}
					rsSchema_tPostgresqlOutput_1.close();
					stmtSchema_tPostgresqlOutput_1.close();
				}
				while (rsTable_tPostgresqlOutput_1.next()) {
					String table_tPostgresqlOutput_1 = rsTable_tPostgresqlOutput_1
							.getString("TABLE_NAME");
					String schema_tPostgresqlOutput_1 = rsTable_tPostgresqlOutput_1
							.getString("TABLE_SCHEM");
					if (table_tPostgresqlOutput_1.equals("sf_account")
							&& (schema_tPostgresqlOutput_1
									.equals(dbschema_tPostgresqlOutput_1) || ((dbschema_tPostgresqlOutput_1 == null || dbschema_tPostgresqlOutput_1
									.trim().length() == 0) && defaultSchema_tPostgresqlOutput_1
									.equals(schema_tPostgresqlOutput_1)))) {
						whetherExist_tPostgresqlOutput_1 = true;
						break;
					}
				}
				rsTable_tPostgresqlOutput_1.close();
				if (whetherExist_tPostgresqlOutput_1) {
					java.sql.Statement stmtDrop_tPostgresqlOutput_1 = conn_tPostgresqlOutput_1
							.createStatement();
					stmtDrop_tPostgresqlOutput_1.execute("DROP TABLE \""
							+ tableName_tPostgresqlOutput_1 + "\"");
					stmtDrop_tPostgresqlOutput_1.close();
				}
				java.sql.Statement stmtCreate_tPostgresqlOutput_1 = conn_tPostgresqlOutput_1
						.createStatement();
				stmtCreate_tPostgresqlOutput_1
						.execute("CREATE TABLE \""
								+ tableName_tPostgresqlOutput_1
								+ "\"(\"Id\" VARCHAR(18)  ,\"IsDeleted\" BOOL ,\"MasterRecordId\" VARCHAR(18)  ,\"Name\" VARCHAR(255)  ,\"Type\" VARCHAR(40)  ,\"ParentId\" VARCHAR(18)  ,\"BillingStreet\" VARCHAR(255)  ,\"BillingCity\" VARCHAR(40)  ,\"BillingState\" VARCHAR(80)  ,\"BillingPostalCode\" VARCHAR(20)  ,\"BillingCountry\" VARCHAR(80)  ,\"BillingStateCode\" VARCHAR(10)  ,\"BillingCountryCode\" VARCHAR(10)  ,\"BillingLatitude\" FLOAT8 ,\"BillingLongitude\" FLOAT8 ,\"BillingAddress\" VARCHAR(10)  ,\"ShippingStreet\" VARCHAR(255)  ,\"ShippingCity\" VARCHAR(40)  ,\"ShippingState\" VARCHAR(80)  ,\"ShippingPostalCode\" VARCHAR(20)  ,\"ShippingCountry\" VARCHAR(80)  ,\"ShippingStateCode\" VARCHAR(10)  ,\"ShippingCountryCode\" VARCHAR(10)  ,\"ShippingLatitude\" FLOAT8 ,\"ShippingLongitude\" FLOAT8 ,\"ShippingAddress\" VARCHAR(10)  ,\"Phone\" VARCHAR(40)  ,\"Fax\" VARCHAR(40)  ,\"AccountNumber\" VARCHAR(40)  ,\"Website\" VARCHAR(255)  ,\"PhotoUrl\" VARCHAR(255)  ,\"Sic\" VARCHAR(20)  ,\"Industry\" VARCHAR(40)  ,\"AnnualRevenue\" FLOAT8 ,\"NumberOfEmployees\" INT4 ,\"Ownership\" VARCHAR(40)  ,\"TickerSymbol\" VARCHAR(20)  ,\"Description\" VARCHAR(32000)  ,\"Rating\" VARCHAR(40)  ,\"Site\" VARCHAR(80)  ,\"CurrencyIsoCode\" VARCHAR(3)  ,\"OwnerId\" VARCHAR(18)  ,\"CreatedDate\" TIMESTAMP ,\"CreatedById\" VARCHAR(18)  ,\"LastModifiedDate\" TIMESTAMP ,\"LastModifiedById\" VARCHAR(18)  ,\"SystemModstamp\" TIMESTAMP ,\"LastActivityDate\" TIMESTAMP ,\"LastViewedDate\" TIMESTAMP ,\"LastReferencedDate\" TIMESTAMP ,\"Jigsaw\" VARCHAR(20)  ,\"JigsawCompanyId\" VARCHAR(20)  ,\"AccountSource\" VARCHAR(40)  ,\"SicDesc\" VARCHAR(80)  ,\"Sold_To_Name__c\" VARCHAR(255)  ,\"Contact_Type__c\" VARCHAR(4099)  ,\"Affiliation__c\" VARCHAR(4099)  ,\"FN__Find_Nearby__c\" VARCHAR(1300)  ,\"FN__Lat__c\" FLOAT8 ,\"FN__Lon__c\" FLOAT8 ,\"FN__Mapping_Status__c\" VARCHAR(255)  ,\"FN__Which_Address__c\" VARCHAR(255)  ,\"Total_Opportunities__c\" FLOAT8 ,\"Total_Amount_Open__c\" FLOAT8 ,\"Total_Amount_Won__c\" FLOAT8 ,\"Map_This_Account__c\" VARCHAR(1300)  ,\"Account_Number__c\" VARCHAR(30)  ,\"Other_Account_Type__c\" VARCHAR(20)  ,\"Affiliations__c\" VARCHAR(255)  ,\"Bill_To_Phone__c\" VARCHAR(40)  ,\"Bill_To_Contact__c\" VARCHAR(50)  ,\"Clinical_Sales_Territory__c\" VARCHAR(255)  ,\"Ship_Attn_To__c\" VARCHAR(30)  ,\"Tax_Exempt__c\" VARCHAR(30)  ,\"Tech_Access_Fee_Rate__c\" FLOAT8 ,\"Workspace_ID__c\" VARCHAR(255)  ,\"Bill_To_Name__c\" VARCHAR(50)  ,\"Ship_To_Name__c\" VARCHAR(50)  ,\"Currency_Code__c\" VARCHAR(3)  ,\"Account_Types__c\" VARCHAR(4099)  ,\"Group_Code__c\" VARCHAR(5)  ,\"Workspace_Name__c\" VARCHAR(100)  ,\"Secure_Fax__c\" VARCHAR(40)  ,\"Secure_Email__c\" VARCHAR(80)  ,\"Bill_To_Email__c\" VARCHAR(80)  ,\"Ship_To_Email__c\" VARCHAR(80)  ,\"Broker_Tax_ID__c\" VARCHAR(30)  ,\"X2014_Revenues__c\" FLOAT8 ,\"Sales_Territory__c\" VARCHAR(255)  ,\"AVA_SFCORE__Billing_Last_Validated__c\" VARCHAR(20)  ,\"AVA_SFCORE__ExemptEntityType__c\" VARCHAR(18)  ,\"AVA_SFCORE__Shipping_Last_Validated__c\" VARCHAR(20)  ,\"Tier__c\" VARCHAR(255)  ,\"Field_App_Scientist__c\" VARCHAR(255)  ,\"Immunoseq_competitor__c\" VARCHAR(4099)  ,\"Broker_ID__c\" VARCHAR(30)  ,\"External_Account_ID_Number__c\" VARCHAR(30)  ,\"VAT__c\" VARCHAR(20)  ,\"Region__c\" VARCHAR(1300)  ,\"Priority__c\" VARCHAR(255)  ,\"Ship_To_Contact__c\" VARCHAR(18)  ,\"Sold_To_Street__c\" VARCHAR(255)  ,\"Sold_To_City__c\" VARCHAR(50)  ,\"Sold_To_State__c\" VARCHAR(50)  ,\"Sold_To_Country__c\" VARCHAR(50)  ,\"Sold_To_Zip__c\" VARCHAR(15)  ,\"Market_Segment__c\" VARCHAR(1300)  ,\"Ship_to_Contact_Phone__c\" VARCHAR(1300)  )");
				stmtCreate_tPostgresqlOutput_1.close();
				String insert_tPostgresqlOutput_1 = "INSERT INTO \""
						+ tableName_tPostgresqlOutput_1
						+ "\" (\"Id\",\"IsDeleted\",\"MasterRecordId\",\"Name\",\"Type\",\"ParentId\",\"BillingStreet\",\"BillingCity\",\"BillingState\",\"BillingPostalCode\",\"BillingCountry\",\"BillingStateCode\",\"BillingCountryCode\",\"BillingLatitude\",\"BillingLongitude\",\"BillingAddress\",\"ShippingStreet\",\"ShippingCity\",\"ShippingState\",\"ShippingPostalCode\",\"ShippingCountry\",\"ShippingStateCode\",\"ShippingCountryCode\",\"ShippingLatitude\",\"ShippingLongitude\",\"ShippingAddress\",\"Phone\",\"Fax\",\"AccountNumber\",\"Website\",\"PhotoUrl\",\"Sic\",\"Industry\",\"AnnualRevenue\",\"NumberOfEmployees\",\"Ownership\",\"TickerSymbol\",\"Description\",\"Rating\",\"Site\",\"CurrencyIsoCode\",\"OwnerId\",\"CreatedDate\",\"CreatedById\",\"LastModifiedDate\",\"LastModifiedById\",\"SystemModstamp\",\"LastActivityDate\",\"LastViewedDate\",\"LastReferencedDate\",\"Jigsaw\",\"JigsawCompanyId\",\"AccountSource\",\"SicDesc\",\"Sold_To_Name__c\",\"Contact_Type__c\",\"Affiliation__c\",\"FN__Find_Nearby__c\",\"FN__Lat__c\",\"FN__Lon__c\",\"FN__Mapping_Status__c\",\"FN__Which_Address__c\",\"Total_Opportunities__c\",\"Total_Amount_Open__c\",\"Total_Amount_Won__c\",\"Map_This_Account__c\",\"Account_Number__c\",\"Other_Account_Type__c\",\"Affiliations__c\",\"Bill_To_Phone__c\",\"Bill_To_Contact__c\",\"Clinical_Sales_Territory__c\",\"Ship_Attn_To__c\",\"Tax_Exempt__c\",\"Tech_Access_Fee_Rate__c\",\"Workspace_ID__c\",\"Bill_To_Name__c\",\"Ship_To_Name__c\",\"Currency_Code__c\",\"Account_Types__c\",\"Group_Code__c\",\"Workspace_Name__c\",\"Secure_Fax__c\",\"Secure_Email__c\",\"Bill_To_Email__c\",\"Ship_To_Email__c\",\"Broker_Tax_ID__c\",\"X2014_Revenues__c\",\"Sales_Territory__c\",\"AVA_SFCORE__Billing_Last_Validated__c\",\"AVA_SFCORE__ExemptEntityType__c\",\"AVA_SFCORE__Shipping_Last_Validated__c\",\"Tier__c\",\"Field_App_Scientist__c\",\"Immunoseq_competitor__c\",\"Broker_ID__c\",\"External_Account_ID_Number__c\",\"VAT__c\",\"Region__c\",\"Priority__c\",\"Ship_To_Contact__c\",\"Sold_To_Street__c\",\"Sold_To_City__c\",\"Sold_To_State__c\",\"Sold_To_Country__c\",\"Sold_To_Zip__c\",\"Market_Segment__c\",\"Ship_to_Contact_Phone__c\") VALUES (?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?)";
				java.sql.PreparedStatement pstmt_tPostgresqlOutput_1 = conn_tPostgresqlOutput_1
						.prepareStatement(insert_tPostgresqlOutput_1);

				/**
				 * [tPostgresqlOutput_1 begin ] stop
				 */

				/**
				 * [tPostgresqlOutput_1 main ] start
				 */

				currentComponent = "tPostgresqlOutput_1";

				tos_count_tPostgresqlOutput_1++;

				/**
				 * [tPostgresqlOutput_1 main ] stop
				 */

				/**
				 * [tPostgresqlOutput_1 end ] start
				 */

				currentComponent = "tPostgresqlOutput_1";

				try {
					int countSum_tPostgresqlOutput_1 = 0;
					if (pstmt_tPostgresqlOutput_1 != null
							&& batchSizeCounter_tPostgresqlOutput_1 > 0) {

						for (int countEach_tPostgresqlOutput_1 : pstmt_tPostgresqlOutput_1
								.executeBatch()) {
							countSum_tPostgresqlOutput_1 += (countEach_tPostgresqlOutput_1 < 0 ? 0
									: countEach_tPostgresqlOutput_1);
						}

					}

					insertedCount_tPostgresqlOutput_1 += countSum_tPostgresqlOutput_1;

				} catch (java.sql.BatchUpdateException e) {

					throw (e);

				}

				if (pstmt_tPostgresqlOutput_1 != null) {
					pstmt_tPostgresqlOutput_1.close();
				}

				conn_tPostgresqlOutput_1.commit();

				conn_tPostgresqlOutput_1.close();

				resourceMap.put("finish_tPostgresqlOutput_1", true);

				nb_line_deleted_tPostgresqlOutput_1 = nb_line_deleted_tPostgresqlOutput_1
						+ deletedCount_tPostgresqlOutput_1;
				nb_line_update_tPostgresqlOutput_1 = nb_line_update_tPostgresqlOutput_1
						+ updatedCount_tPostgresqlOutput_1;
				nb_line_inserted_tPostgresqlOutput_1 = nb_line_inserted_tPostgresqlOutput_1
						+ insertedCount_tPostgresqlOutput_1;
				nb_line_rejected_tPostgresqlOutput_1 = nb_line_rejected_tPostgresqlOutput_1
						+ rejectedCount_tPostgresqlOutput_1;

				globalMap.put("tPostgresqlOutput_1_NB_LINE",
						nb_line_tPostgresqlOutput_1);
				globalMap.put("tPostgresqlOutput_1_NB_LINE_UPDATED",
						nb_line_update_tPostgresqlOutput_1);
				globalMap.put("tPostgresqlOutput_1_NB_LINE_INSERTED",
						nb_line_inserted_tPostgresqlOutput_1);
				globalMap.put("tPostgresqlOutput_1_NB_LINE_DELETED",
						nb_line_deleted_tPostgresqlOutput_1);
				globalMap.put("tPostgresqlOutput_1_NB_LINE_REJECTED",
						nb_line_rejected_tPostgresqlOutput_1);

				ok_Hash.put("tPostgresqlOutput_1", true);
				end_Hash.put("tPostgresqlOutput_1", System.currentTimeMillis());

				/**
				 * [tPostgresqlOutput_1 end ] stop
				 */
			}// end the resume

		} catch (java.lang.Exception e) {

			TalendException te = new TalendException(e, currentComponent,
					globalMap);

			throw te;
		} catch (java.lang.Error error) {

			runStat.stopThreadStat();

			throw error;
		} finally {

			try {

				/**
				 * [tPostgresqlOutput_1 finally ] start
				 */

				currentComponent = "tPostgresqlOutput_1";

				if (resourceMap.get("finish_tPostgresqlOutput_1") == null) {
					if (resourceMap.get("conn_tPostgresqlOutput_1") != null) {
						try {

							((java.sql.Connection) resourceMap
									.get("conn_tPostgresqlOutput_1")).close();

						} catch (java.sql.SQLException sqlEx_tPostgresqlOutput_1) {
							String errorMessage_tPostgresqlOutput_1 = "failed to close the connection in tPostgresqlOutput_1 :"
									+ sqlEx_tPostgresqlOutput_1.getMessage();

							System.err
									.println(errorMessage_tPostgresqlOutput_1);
						}
					}
				}

				/**
				 * [tPostgresqlOutput_1 finally ] stop
				 */
			} catch (java.lang.Exception e) {
				// ignore
			} catch (java.lang.Error error) {
				// ignore
			}
			resourceMap = null;
		}

		globalMap.put("tPostgresqlOutput_1_SUBPROCESS_STATE", 1);
	}

	public void tSalesforceInput_1Process(
			final java.util.Map<String, Object> globalMap)
			throws TalendException {
		globalMap.put("tSalesforceInput_1_SUBPROCESS_STATE", 0);

		final boolean execStat = this.execStat;

		String iterateId = "";

		String currentComponent = "";
		java.util.Map<String, Object> resourceMap = new java.util.HashMap<String, Object>();

		try {

			String currentMethodName = new java.lang.Exception()
					.getStackTrace()[0].getMethodName();
			boolean resumeIt = currentMethodName.equals(resumeEntryMethodName);
			if (resumeEntryMethodName == null || resumeIt || globalResumeTicket) {// start
																					// the
																					// resume
				globalResumeTicket = true;

				/**
				 * [tSalesforceInput_1 begin ] start
				 */

				ok_Hash.put("tSalesforceInput_1", false);
				start_Hash
						.put("tSalesforceInput_1", System.currentTimeMillis());

				currentComponent = "tSalesforceInput_1";

				int tos_count_tSalesforceInput_1 = 0;

				int nb_line_tSalesforceInput_1 = 0;
				int limit_tSalesforceInput_1 = -1;
				System.setProperty("org.apache.commons.logging.Log",
						"org.apache.commons.logging.impl.NoOpLog");

				/**
				 * [tSalesforceInput_1 begin ] stop
				 */

				/**
				 * [tSalesforceInput_1 main ] start
				 */

				currentComponent = "tSalesforceInput_1";

				tos_count_tSalesforceInput_1++;

				/**
				 * [tSalesforceInput_1 main ] stop
				 */

				/**
				 * [tSalesforceInput_1 end ] start
				 */

				currentComponent = "tSalesforceInput_1";

				sfMgr_tSalesforceInput_1.logout();

				globalMap.put("tSalesforceInput_1_NB_LINE",
						nb_line_tSalesforceInput_1);

				ok_Hash.put("tSalesforceInput_1", true);
				end_Hash.put("tSalesforceInput_1", System.currentTimeMillis());

				/**
				 * [tSalesforceInput_1 end ] stop
				 */
			}// end the resume

		} catch (java.lang.Exception e) {

			TalendException te = new TalendException(e, currentComponent,
					globalMap);

			throw te;
		} catch (java.lang.Error error) {

			runStat.stopThreadStat();

			throw error;
		} finally {

			try {

				/**
				 * [tSalesforceInput_1 finally ] start
				 */

				currentComponent = "tSalesforceInput_1";

				/**
				 * [tSalesforceInput_1 finally ] stop
				 */
			} catch (java.lang.Exception e) {
				// ignore
			} catch (java.lang.Error error) {
				// ignore
			}
			resourceMap = null;
		}

		globalMap.put("tSalesforceInput_1_SUBPROCESS_STATE", 1);
	}

	public static class row2Struct implements
			routines.system.IPersistableRow<row2Struct> {
		final static byte[] commonByteArrayLock_LOCAL_PROJECT_Step01_Stage_salesforce_data = new byte[0];
		static byte[] commonByteArray_LOCAL_PROJECT_Step01_Stage_salesforce_data = new byte[0];

		public String Id;

		public String getId() {
			return this.Id;
		}

		public String OwnerId;

		public String getOwnerId() {
			return this.OwnerId;
		}

		public String ContractId;

		public String getContractId() {
			return this.ContractId;
		}

		public String AccountId;

		public String getAccountId() {
			return this.AccountId;
		}

		public String Pricebook2Id;

		public String getPricebook2Id() {
			return this.Pricebook2Id;
		}

		public String OriginalOrderId;

		public String getOriginalOrderId() {
			return this.OriginalOrderId;
		}

		public String RecordTypeId;

		public String getRecordTypeId() {
			return this.RecordTypeId;
		}

		public java.util.Date EffectiveDate;

		public java.util.Date getEffectiveDate() {
			return this.EffectiveDate;
		}

		public java.util.Date EndDate;

		public java.util.Date getEndDate() {
			return this.EndDate;
		}

		public Boolean IsReductionOrder;

		public Boolean getIsReductionOrder() {
			return this.IsReductionOrder;
		}

		public String Status;

		public String getStatus() {
			return this.Status;
		}

		public String Description;

		public String getDescription() {
			return this.Description;
		}

		public String CustomerAuthorizedById;

		public String getCustomerAuthorizedById() {
			return this.CustomerAuthorizedById;
		}

		public java.util.Date CustomerAuthorizedDate;

		public java.util.Date getCustomerAuthorizedDate() {
			return this.CustomerAuthorizedDate;
		}

		public String CompanyAuthorizedById;

		public String getCompanyAuthorizedById() {
			return this.CompanyAuthorizedById;
		}

		public java.util.Date CompanyAuthorizedDate;

		public java.util.Date getCompanyAuthorizedDate() {
			return this.CompanyAuthorizedDate;
		}

		public String Type;

		public String getType() {
			return this.Type;
		}

		public String BillingStreet;

		public String getBillingStreet() {
			return this.BillingStreet;
		}

		public String BillingCity;

		public String getBillingCity() {
			return this.BillingCity;
		}

		public String BillingState;

		public String getBillingState() {
			return this.BillingState;
		}

		public String BillingPostalCode;

		public String getBillingPostalCode() {
			return this.BillingPostalCode;
		}

		public String BillingCountry;

		public String getBillingCountry() {
			return this.BillingCountry;
		}

		public String BillingStateCode;

		public String getBillingStateCode() {
			return this.BillingStateCode;
		}

		public String BillingCountryCode;

		public String getBillingCountryCode() {
			return this.BillingCountryCode;
		}

		public Double BillingLatitude;

		public Double getBillingLatitude() {
			return this.BillingLatitude;
		}

		public Double BillingLongitude;

		public Double getBillingLongitude() {
			return this.BillingLongitude;
		}

		public String BillingAddress;

		public String getBillingAddress() {
			return this.BillingAddress;
		}

		public String ShippingStreet;

		public String getShippingStreet() {
			return this.ShippingStreet;
		}

		public String ShippingCity;

		public String getShippingCity() {
			return this.ShippingCity;
		}

		public String ShippingState;

		public String getShippingState() {
			return this.ShippingState;
		}

		public String ShippingPostalCode;

		public String getShippingPostalCode() {
			return this.ShippingPostalCode;
		}

		public String ShippingCountry;

		public String getShippingCountry() {
			return this.ShippingCountry;
		}

		public String ShippingStateCode;

		public String getShippingStateCode() {
			return this.ShippingStateCode;
		}

		public String ShippingCountryCode;

		public String getShippingCountryCode() {
			return this.ShippingCountryCode;
		}

		public Double ShippingLatitude;

		public Double getShippingLatitude() {
			return this.ShippingLatitude;
		}

		public Double ShippingLongitude;

		public Double getShippingLongitude() {
			return this.ShippingLongitude;
		}

		public String ShippingAddress;

		public String getShippingAddress() {
			return this.ShippingAddress;
		}

		public String Name;

		public String getName() {
			return this.Name;
		}

		public java.util.Date ActivatedDate;

		public java.util.Date getActivatedDate() {
			return this.ActivatedDate;
		}

		public String ActivatedById;

		public String getActivatedById() {
			return this.ActivatedById;
		}

		public String StatusCode;

		public String getStatusCode() {
			return this.StatusCode;
		}

		public String CurrencyIsoCode;

		public String getCurrencyIsoCode() {
			return this.CurrencyIsoCode;
		}

		public String OrderNumber;

		public String getOrderNumber() {
			return this.OrderNumber;
		}

		public Double TotalAmount;

		public Double getTotalAmount() {
			return this.TotalAmount;
		}

		public java.util.Date CreatedDate;

		public java.util.Date getCreatedDate() {
			return this.CreatedDate;
		}

		public String CreatedById;

		public String getCreatedById() {
			return this.CreatedById;
		}

		public java.util.Date LastModifiedDate;

		public java.util.Date getLastModifiedDate() {
			return this.LastModifiedDate;
		}

		public String LastModifiedById;

		public String getLastModifiedById() {
			return this.LastModifiedById;
		}

		public Boolean IsDeleted;

		public Boolean getIsDeleted() {
			return this.IsDeleted;
		}

		public java.util.Date SystemModstamp;

		public java.util.Date getSystemModstamp() {
			return this.SystemModstamp;
		}

		public java.util.Date LastViewedDate;

		public java.util.Date getLastViewedDate() {
			return this.LastViewedDate;
		}

		public java.util.Date LastReferencedDate;

		public java.util.Date getLastReferencedDate() {
			return this.LastReferencedDate;
		}

		public java.util.Date Data_Release_Date__c;

		public java.util.Date getData_Release_Date__c() {
			return this.Data_Release_Date__c;
		}

		public String ISO_Country_Code__c;

		public String getISO_Country_Code__c() {
			return this.ISO_Country_Code__c;
		}

		public String Credit_Card_del__c;

		public String getCredit_Card_del__c() {
			return this.Credit_Card_del__c;
		}

		public String Invoice_1_Number__c;

		public String getInvoice_1_Number__c() {
			return this.Invoice_1_Number__c;
		}

		public String Invoice_2_Number__c;

		public String getInvoice_2_Number__c() {
			return this.Invoice_2_Number__c;
		}

		public String Invoice_3_Number__c;

		public String getInvoice_3_Number__c() {
			return this.Invoice_3_Number__c;
		}

		public String PO_Contact_Phone__c;

		public String getPO_Contact_Phone__c() {
			return this.PO_Contact_Phone__c;
		}

		public String Invoice_4_Number__c;

		public String getInvoice_4_Number__c() {
			return this.Invoice_4_Number__c;
		}

		public String Bill_To_Email__c;

		public String getBill_To_Email__c() {
			return this.Bill_To_Email__c;
		}

		public String Order_Catagory__c;

		public String getOrder_Catagory__c() {
			return this.Order_Catagory__c;
		}

		public String Other_Carrier_Tracking__c;

		public String getOther_Carrier_Tracking__c() {
			return this.Other_Carrier_Tracking__c;
		}

		public String Priority__c;

		public String getPriority__c() {
			return this.Priority__c;
		}

		public String Probability__c;

		public String getProbability__c() {
			return this.Probability__c;
		}

		public Double Age__c;

		public Double getAge__c() {
			return this.Age__c;
		}

		public java.util.Date Report_Release_Date__c;

		public java.util.Date getReport_Release_Date__c() {
			return this.Report_Release_Date__c;
		}

		public java.util.Date Sample_Arrival_Date__c;

		public java.util.Date getSample_Arrival_Date__c() {
			return this.Sample_Arrival_Date__c;
		}

		public String Service_Order_Stage__c;

		public String getService_Order_Stage__c() {
			return this.Service_Order_Stage__c;
		}

		public Double Shipping_Handling__c;

		public Double getShipping_Handling__c() {
			return this.Shipping_Handling__c;
		}

		public String Data_Analysis_Group__c;

		public String getData_Analysis_Group__c() {
			return this.Data_Analysis_Group__c;
		}

		public Double Total_Order__c;

		public Double getTotal_Order__c() {
			return this.Total_Order__c;
		}

		public String Workspace_ID__c;

		public String getWorkspace_ID__c() {
			return this.Workspace_ID__c;
		}

		public String clonoSEQ_Stage__c;

		public String getClonoSEQ_Stage__c() {
			return this.clonoSEQ_Stage__c;
		}

		public Double Amount__c;

		public Double getAmount__c() {
			return this.Amount__c;
		}

		public String PO_Contact_Email__c;

		public String getPO_Contact_Email__c() {
			return this.PO_Contact_Email__c;
		}

		public String PO_Number_c__c;

		public String getPO_Number_c__c() {
			return this.PO_Number_c__c;
		}

		public String Bill_To_Phone__c;

		public String getBill_To_Phone__c() {
			return this.Bill_To_Phone__c;
		}

		public String Lead_Source__c;

		public String getLead_Source__c() {
			return this.Lead_Source__c;
		}

		public Double Invoice_1_Amount__c;

		public Double getInvoice_1_Amount__c() {
			return this.Invoice_1_Amount__c;
		}

		public java.util.Date Invoice_1_Revenue_Date__c;

		public java.util.Date getInvoice_1_Revenue_Date__c() {
			return this.Invoice_1_Revenue_Date__c;
		}

		public Double Invoice_2_Amount__c;

		public Double getInvoice_2_Amount__c() {
			return this.Invoice_2_Amount__c;
		}

		public Double Invoice_3_Amount__c;

		public Double getInvoice_3_Amount__c() {
			return this.Invoice_3_Amount__c;
		}

		public Boolean Invoice_3_Unearned_Revenue__c;

		public Boolean getInvoice_3_Unearned_Revenue__c() {
			return this.Invoice_3_Unearned_Revenue__c;
		}

		public Double Invoice_4_Amount__c;

		public Double getInvoice_4_Amount__c() {
			return this.Invoice_4_Amount__c;
		}

		public String Locus__c;

		public String getLocus__c() {
			return this.Locus__c;
		}

		public Double Turnaround_Days__c;

		public Double getTurnaround_Days__c() {
			return this.Turnaround_Days__c;
		}

		public String Credit_Card__c;

		public String getCredit_Card__c() {
			return this.Credit_Card__c;
		}

		public String Sec_code__c;

		public String getSec_code__c() {
			return this.Sec_code__c;
		}

		public String Order_Notes__c;

		public String getOrder_Notes__c() {
			return this.Order_Notes__c;
		}

		public String Expiration__c;

		public String getExpiration__c() {
			return this.Expiration__c;
		}

		public String Billing_To_Name__c;

		public String getBilling_To_Name__c() {
			return this.Billing_To_Name__c;
		}

		public String Ship_To_Name__c;

		public String getShip_To_Name__c() {
			return this.Ship_To_Name__c;
		}

		public String Related_Case__c;

		public String getRelated_Case__c() {
			return this.Related_Case__c;
		}

		public String Related_Order__c;

		public String getRelated_Order__c() {
			return this.Related_Order__c;
		}

		public String Resolution__c;

		public String getResolution__c() {
			return this.Resolution__c;
		}

		public java.util.Date Deadline_Date__c;

		public java.util.Date getDeadline_Date__c() {
			return this.Deadline_Date__c;
		}

		public String Accounts_Payable_Contact_Email__c;

		public String getAccounts_Payable_Contact_Email__c() {
			return this.Accounts_Payable_Contact_Email__c;
		}

		public String Accounts_Payable_Contact_Phone__c;

		public String getAccounts_Payable_Contact_Phone__c() {
			return this.Accounts_Payable_Contact_Phone__c;
		}

		public String Sample_Rejection_Criteria__c;

		public String getSample_Rejection_Criteria__c() {
			return this.Sample_Rejection_Criteria__c;
		}

		public Boolean Sample_Rejection_Jeopardy__c;

		public Boolean getSample_Rejection_Jeopardy__c() {
			return this.Sample_Rejection_Jeopardy__c;
		}

		public String Ship_Attn_To_Email__c;

		public String getShip_Attn_To_Email__c() {
			return this.Ship_Attn_To_Email__c;
		}

		public java.util.Date PO_Receipt_Date__c;

		public java.util.Date getPO_Receipt_Date__c() {
			return this.PO_Receipt_Date__c;
		}

		public Double Quantity_Released__c;

		public Double getQuantity_Released__c() {
			return this.Quantity_Released__c;
		}

		public Double S_H_Tax__c;

		public Double getS_H_Tax__c() {
			return this.S_H_Tax__c;
		}

		public Double Total_Tax__c;

		public Double getTotal_Tax__c() {
			return this.Total_Tax__c;
		}

		public String Legal_Entity__c;

		public String getLegal_Entity__c() {
			return this.Legal_Entity__c;
		}

		public String Quote_No__c;

		public String getQuote_No__c() {
			return this.Quote_No__c;
		}

		public Double Discount_percent__c;

		public Double getDiscount_percent__c() {
			return this.Discount_percent__c;
		}

		public Double Total_Discount__c;

		public Double getTotal_Discount__c() {
			return this.Total_Discount__c;
		}

		public Double Total_Invoice_AmountsOld__c;

		public Double getTotal_Invoice_AmountsOld__c() {
			return this.Total_Invoice_AmountsOld__c;
		}

		public Double X2014_Total_Invoice_AmountsOld__c;

		public Double getX2014_Total_Invoice_AmountsOld__c() {
			return this.X2014_Total_Invoice_AmountsOld__c;
		}

		public String Ship_to_Contact__c;

		public String getShip_to_Contact__c() {
			return this.Ship_to_Contact__c;
		}

		public Double Sales_Tax2__c;

		public Double getSales_Tax2__c() {
			return this.Sales_Tax2__c;
		}

		public Double Tax2__c;

		public Double getTax2__c() {
			return this.Tax2__c;
		}

		public String User__c;

		public String getUser__c() {
			return this.User__c;
		}

		public String Street__c;

		public String getStreet__c() {
			return this.Street__c;
		}

		public String City__c;

		public String getCity__c() {
			return this.City__c;
		}

		public String State__c;

		public String getState__c() {
			return this.State__c;
		}

		public String Zip__c;

		public String getZip__c() {
			return this.Zip__c;
		}

		public String Country__c;

		public String getCountry__c() {
			return this.Country__c;
		}

		public String Indication__c;

		public String getIndication__c() {
			return this.Indication__c;
		}

		public String User_Phone__c;

		public String getUser_Phone__c() {
			return this.User_Phone__c;
		}

		public java.util.Date Need_by__c;

		public java.util.Date getNeed_by__c() {
			return this.Need_by__c;
		}

		public String Related_Contract__c;

		public String getRelated_Contract__c() {
			return this.Related_Contract__c;
		}

		public Boolean Invoice__c;

		public Boolean getInvoice__c() {
			return this.Invoice__c;
		}

		public java.util.Date Accession_Date__c;

		public java.util.Date getAccession_Date__c() {
			return this.Accession_Date__c;
		}

		public java.util.Date Reconciliation_Date__c;

		public java.util.Date getReconciliation_Date__c() {
			return this.Reconciliation_Date__c;
		}

		public java.util.Date Test_Order_Date__c;

		public java.util.Date getTest_Order_Date__c() {
			return this.Test_Order_Date__c;
		}

		public String Clinical_Sales_Territory__c;

		public String getClinical_Sales_Territory__c() {
			return this.Clinical_Sales_Territory__c;
		}

		public String Block__c;

		public String getBlock__c() {
			return this.Block__c;
		}

		public String Order_Detail__c;

		public String getOrder_Detail__c() {
			return this.Order_Detail__c;
		}

		public String Physician__c;

		public String getPhysician__c() {
			return this.Physician__c;
		}

		public Double Sample_Quantity_Received__c;

		public Double getSample_Quantity_Received__c() {
			return this.Sample_Quantity_Received__c;
		}

		public java.util.Date Order_Received_Date__c;

		public java.util.Date getOrder_Received_Date__c() {
			return this.Order_Received_Date__c;
		}

		public Double Order_Value__c;

		public Double getOrder_Value__c() {
			return this.Order_Value__c;
		}

		public String Sales_Territory__c;

		public String getSales_Territory__c() {
			return this.Sales_Territory__c;
		}

		public Boolean Pharma_Sponsored__c;

		public Boolean getPharma_Sponsored__c() {
			return this.Pharma_Sponsored__c;
		}

		public Boolean Form_of_Payment_Received_or_Negotiated__c;

		public Boolean getForm_of_Payment_Received_or_Negotiated__c() {
			return this.Form_of_Payment_Received_or_Negotiated__c;
		}

		public String VAT__c;

		public String getVAT__c() {
			return this.VAT__c;
		}

		public String Campaigns__c;

		public String getCampaigns__c() {
			return this.Campaigns__c;
		}

		public String Purchase_Order_Record__c;

		public String getPurchase_Order_Record__c() {
			return this.Purchase_Order_Record__c;
		}

		public String Broker_Account__c;

		public String getBroker_Account__c() {
			return this.Broker_Account__c;
		}

		public String Sample_Lab_Location__c;

		public String getSample_Lab_Location__c() {
			return this.Sample_Lab_Location__c;
		}

		public String Physician_Full_Name__c;

		public String getPhysician_Full_Name__c() {
			return this.Physician_Full_Name__c;
		}

		public java.util.Date Estimated_Invoice_Date__c;

		public java.util.Date getEstimated_Invoice_Date__c() {
			return this.Estimated_Invoice_Date__c;
		}

		public String dermoSEQ_Stage__c;

		public String getDermoSEQ_Stage__c() {
			return this.dermoSEQ_Stage__c;
		}

		public java.util.Date Sales_Credit_Date__c;

		public java.util.Date getSales_Credit_Date__c() {
			return this.Sales_Credit_Date__c;
		}

		public String Broker_Tax_ID__c;

		public String getBroker_Tax_ID__c() {
			return this.Broker_Tax_ID__c;
		}

		public String Broker_ID_Number__c;

		public String getBroker_ID_Number__c() {
			return this.Broker_ID_Number__c;
		}

		public String Pharma__c;

		public String getPharma__c() {
			return this.Pharma__c;
		}

		public String Broker_Contact__c;

		public String getBroker_Contact__c() {
			return this.Broker_Contact__c;
		}

		public java.util.Date Sequencing_Completion_Deadline_Date__c;

		public java.util.Date getSequencing_Completion_Deadline_Date__c() {
			return this.Sequencing_Completion_Deadline_Date__c;
		}

		public String Distributor__c;

		public String getDistributor__c() {
			return this.Distributor__c;
		}

		public String Broker_Address__c;

		public String getBroker_Address__c() {
			return this.Broker_Address__c;
		}

		public String Broker_Contact_Phone__c;

		public String getBroker_Contact_Phone__c() {
			return this.Broker_Contact_Phone__c;
		}

		public String Broker_Contact_Email__c;

		public String getBroker_Contact_Email__c() {
			return this.Broker_Contact_Email__c;
		}

		public String Ship_To_Contact_With_PO__c;

		public String getShip_To_Contact_With_PO__c() {
			return this.Ship_To_Contact_With_PO__c;
		}

		public Boolean Extractions_Needed__c;

		public Boolean getExtractions_Needed__c() {
			return this.Extractions_Needed__c;
		}

		public String Attn_To__c;

		public String getAttn_To__c() {
			return this.Attn_To__c;
		}

		public String Mouse_TCRB_Block__c;

		public String getMouse_TCRB_Block__c() {
			return this.Mouse_TCRB_Block__c;
		}

		private String readString(ObjectInputStream dis) throws IOException {
			String strReturn = null;
			int length = 0;
			length = dis.readInt();
			if (length == -1) {
				strReturn = null;
			} else {
				if (length > commonByteArray_LOCAL_PROJECT_Step01_Stage_salesforce_data.length) {
					if (length < 1024
							&& commonByteArray_LOCAL_PROJECT_Step01_Stage_salesforce_data.length == 0) {
						commonByteArray_LOCAL_PROJECT_Step01_Stage_salesforce_data = new byte[1024];
					} else {
						commonByteArray_LOCAL_PROJECT_Step01_Stage_salesforce_data = new byte[2 * length];
					}
				}
				dis.readFully(
						commonByteArray_LOCAL_PROJECT_Step01_Stage_salesforce_data,
						0, length);
				strReturn = new String(
						commonByteArray_LOCAL_PROJECT_Step01_Stage_salesforce_data,
						0, length, utf8Charset);
			}
			return strReturn;
		}

		private void writeString(String str, ObjectOutputStream dos)
				throws IOException {
			if (str == null) {
				dos.writeInt(-1);
			} else {
				byte[] byteArray = str.getBytes(utf8Charset);
				dos.writeInt(byteArray.length);
				dos.write(byteArray);
			}
		}

		private java.util.Date readDate(ObjectInputStream dis)
				throws IOException {
			java.util.Date dateReturn = null;
			int length = 0;
			length = dis.readByte();
			if (length == -1) {
				dateReturn = null;
			} else {
				dateReturn = new Date(dis.readLong());
			}
			return dateReturn;
		}

		private void writeDate(java.util.Date date1, ObjectOutputStream dos)
				throws IOException {
			if (date1 == null) {
				dos.writeByte(-1);
			} else {
				dos.writeByte(0);
				dos.writeLong(date1.getTime());
			}
		}

		public void readData(ObjectInputStream dis) {

			synchronized (commonByteArrayLock_LOCAL_PROJECT_Step01_Stage_salesforce_data) {

				try {

					int length = 0;

					this.Id = readString(dis);

					this.OwnerId = readString(dis);

					this.ContractId = readString(dis);

					this.AccountId = readString(dis);

					this.Pricebook2Id = readString(dis);

					this.OriginalOrderId = readString(dis);

					this.RecordTypeId = readString(dis);

					this.EffectiveDate = readDate(dis);

					this.EndDate = readDate(dis);

					length = dis.readByte();
					if (length == -1) {
						this.IsReductionOrder = null;
					} else {
						this.IsReductionOrder = dis.readBoolean();
					}

					this.Status = readString(dis);

					this.Description = readString(dis);

					this.CustomerAuthorizedById = readString(dis);

					this.CustomerAuthorizedDate = readDate(dis);

					this.CompanyAuthorizedById = readString(dis);

					this.CompanyAuthorizedDate = readDate(dis);

					this.Type = readString(dis);

					this.BillingStreet = readString(dis);

					this.BillingCity = readString(dis);

					this.BillingState = readString(dis);

					this.BillingPostalCode = readString(dis);

					this.BillingCountry = readString(dis);

					this.BillingStateCode = readString(dis);

					this.BillingCountryCode = readString(dis);

					length = dis.readByte();
					if (length == -1) {
						this.BillingLatitude = null;
					} else {
						this.BillingLatitude = dis.readDouble();
					}

					length = dis.readByte();
					if (length == -1) {
						this.BillingLongitude = null;
					} else {
						this.BillingLongitude = dis.readDouble();
					}

					this.BillingAddress = readString(dis);

					this.ShippingStreet = readString(dis);

					this.ShippingCity = readString(dis);

					this.ShippingState = readString(dis);

					this.ShippingPostalCode = readString(dis);

					this.ShippingCountry = readString(dis);

					this.ShippingStateCode = readString(dis);

					this.ShippingCountryCode = readString(dis);

					length = dis.readByte();
					if (length == -1) {
						this.ShippingLatitude = null;
					} else {
						this.ShippingLatitude = dis.readDouble();
					}

					length = dis.readByte();
					if (length == -1) {
						this.ShippingLongitude = null;
					} else {
						this.ShippingLongitude = dis.readDouble();
					}

					this.ShippingAddress = readString(dis);

					this.Name = readString(dis);

					this.ActivatedDate = readDate(dis);

					this.ActivatedById = readString(dis);

					this.StatusCode = readString(dis);

					this.CurrencyIsoCode = readString(dis);

					this.OrderNumber = readString(dis);

					length = dis.readByte();
					if (length == -1) {
						this.TotalAmount = null;
					} else {
						this.TotalAmount = dis.readDouble();
					}

					this.CreatedDate = readDate(dis);

					this.CreatedById = readString(dis);

					this.LastModifiedDate = readDate(dis);

					this.LastModifiedById = readString(dis);

					length = dis.readByte();
					if (length == -1) {
						this.IsDeleted = null;
					} else {
						this.IsDeleted = dis.readBoolean();
					}

					this.SystemModstamp = readDate(dis);

					this.LastViewedDate = readDate(dis);

					this.LastReferencedDate = readDate(dis);

					this.Data_Release_Date__c = readDate(dis);

					this.ISO_Country_Code__c = readString(dis);

					this.Credit_Card_del__c = readString(dis);

					this.Invoice_1_Number__c = readString(dis);

					this.Invoice_2_Number__c = readString(dis);

					this.Invoice_3_Number__c = readString(dis);

					this.PO_Contact_Phone__c = readString(dis);

					this.Invoice_4_Number__c = readString(dis);

					this.Bill_To_Email__c = readString(dis);

					this.Order_Catagory__c = readString(dis);

					this.Other_Carrier_Tracking__c = readString(dis);

					this.Priority__c = readString(dis);

					this.Probability__c = readString(dis);

					length = dis.readByte();
					if (length == -1) {
						this.Age__c = null;
					} else {
						this.Age__c = dis.readDouble();
					}

					this.Report_Release_Date__c = readDate(dis);

					this.Sample_Arrival_Date__c = readDate(dis);

					this.Service_Order_Stage__c = readString(dis);

					length = dis.readByte();
					if (length == -1) {
						this.Shipping_Handling__c = null;
					} else {
						this.Shipping_Handling__c = dis.readDouble();
					}

					this.Data_Analysis_Group__c = readString(dis);

					length = dis.readByte();
					if (length == -1) {
						this.Total_Order__c = null;
					} else {
						this.Total_Order__c = dis.readDouble();
					}

					this.Workspace_ID__c = readString(dis);

					this.clonoSEQ_Stage__c = readString(dis);

					length = dis.readByte();
					if (length == -1) {
						this.Amount__c = null;
					} else {
						this.Amount__c = dis.readDouble();
					}

					this.PO_Contact_Email__c = readString(dis);

					this.PO_Number_c__c = readString(dis);

					this.Bill_To_Phone__c = readString(dis);

					this.Lead_Source__c = readString(dis);

					length = dis.readByte();
					if (length == -1) {
						this.Invoice_1_Amount__c = null;
					} else {
						this.Invoice_1_Amount__c = dis.readDouble();
					}

					this.Invoice_1_Revenue_Date__c = readDate(dis);

					length = dis.readByte();
					if (length == -1) {
						this.Invoice_2_Amount__c = null;
					} else {
						this.Invoice_2_Amount__c = dis.readDouble();
					}

					length = dis.readByte();
					if (length == -1) {
						this.Invoice_3_Amount__c = null;
					} else {
						this.Invoice_3_Amount__c = dis.readDouble();
					}

					length = dis.readByte();
					if (length == -1) {
						this.Invoice_3_Unearned_Revenue__c = null;
					} else {
						this.Invoice_3_Unearned_Revenue__c = dis.readBoolean();
					}

					length = dis.readByte();
					if (length == -1) {
						this.Invoice_4_Amount__c = null;
					} else {
						this.Invoice_4_Amount__c = dis.readDouble();
					}

					this.Locus__c = readString(dis);

					length = dis.readByte();
					if (length == -1) {
						this.Turnaround_Days__c = null;
					} else {
						this.Turnaround_Days__c = dis.readDouble();
					}

					this.Credit_Card__c = readString(dis);

					this.Sec_code__c = readString(dis);

					this.Order_Notes__c = readString(dis);

					this.Expiration__c = readString(dis);

					this.Billing_To_Name__c = readString(dis);

					this.Ship_To_Name__c = readString(dis);

					this.Related_Case__c = readString(dis);

					this.Related_Order__c = readString(dis);

					this.Resolution__c = readString(dis);

					this.Deadline_Date__c = readDate(dis);

					this.Accounts_Payable_Contact_Email__c = readString(dis);

					this.Accounts_Payable_Contact_Phone__c = readString(dis);

					this.Sample_Rejection_Criteria__c = readString(dis);

					length = dis.readByte();
					if (length == -1) {
						this.Sample_Rejection_Jeopardy__c = null;
					} else {
						this.Sample_Rejection_Jeopardy__c = dis.readBoolean();
					}

					this.Ship_Attn_To_Email__c = readString(dis);

					this.PO_Receipt_Date__c = readDate(dis);

					length = dis.readByte();
					if (length == -1) {
						this.Quantity_Released__c = null;
					} else {
						this.Quantity_Released__c = dis.readDouble();
					}

					length = dis.readByte();
					if (length == -1) {
						this.S_H_Tax__c = null;
					} else {
						this.S_H_Tax__c = dis.readDouble();
					}

					length = dis.readByte();
					if (length == -1) {
						this.Total_Tax__c = null;
					} else {
						this.Total_Tax__c = dis.readDouble();
					}

					this.Legal_Entity__c = readString(dis);

					this.Quote_No__c = readString(dis);

					length = dis.readByte();
					if (length == -1) {
						this.Discount_percent__c = null;
					} else {
						this.Discount_percent__c = dis.readDouble();
					}

					length = dis.readByte();
					if (length == -1) {
						this.Total_Discount__c = null;
					} else {
						this.Total_Discount__c = dis.readDouble();
					}

					length = dis.readByte();
					if (length == -1) {
						this.Total_Invoice_AmountsOld__c = null;
					} else {
						this.Total_Invoice_AmountsOld__c = dis.readDouble();
					}

					length = dis.readByte();
					if (length == -1) {
						this.X2014_Total_Invoice_AmountsOld__c = null;
					} else {
						this.X2014_Total_Invoice_AmountsOld__c = dis
								.readDouble();
					}

					this.Ship_to_Contact__c = readString(dis);

					length = dis.readByte();
					if (length == -1) {
						this.Sales_Tax2__c = null;
					} else {
						this.Sales_Tax2__c = dis.readDouble();
					}

					length = dis.readByte();
					if (length == -1) {
						this.Tax2__c = null;
					} else {
						this.Tax2__c = dis.readDouble();
					}

					this.User__c = readString(dis);

					this.Street__c = readString(dis);

					this.City__c = readString(dis);

					this.State__c = readString(dis);

					this.Zip__c = readString(dis);

					this.Country__c = readString(dis);

					this.Indication__c = readString(dis);

					this.User_Phone__c = readString(dis);

					this.Need_by__c = readDate(dis);

					this.Related_Contract__c = readString(dis);

					length = dis.readByte();
					if (length == -1) {
						this.Invoice__c = null;
					} else {
						this.Invoice__c = dis.readBoolean();
					}

					this.Accession_Date__c = readDate(dis);

					this.Reconciliation_Date__c = readDate(dis);

					this.Test_Order_Date__c = readDate(dis);

					this.Clinical_Sales_Territory__c = readString(dis);

					this.Block__c = readString(dis);

					this.Order_Detail__c = readString(dis);

					this.Physician__c = readString(dis);

					length = dis.readByte();
					if (length == -1) {
						this.Sample_Quantity_Received__c = null;
					} else {
						this.Sample_Quantity_Received__c = dis.readDouble();
					}

					this.Order_Received_Date__c = readDate(dis);

					length = dis.readByte();
					if (length == -1) {
						this.Order_Value__c = null;
					} else {
						this.Order_Value__c = dis.readDouble();
					}

					this.Sales_Territory__c = readString(dis);

					length = dis.readByte();
					if (length == -1) {
						this.Pharma_Sponsored__c = null;
					} else {
						this.Pharma_Sponsored__c = dis.readBoolean();
					}

					length = dis.readByte();
					if (length == -1) {
						this.Form_of_Payment_Received_or_Negotiated__c = null;
					} else {
						this.Form_of_Payment_Received_or_Negotiated__c = dis
								.readBoolean();
					}

					this.VAT__c = readString(dis);

					this.Campaigns__c = readString(dis);

					this.Purchase_Order_Record__c = readString(dis);

					this.Broker_Account__c = readString(dis);

					this.Sample_Lab_Location__c = readString(dis);

					this.Physician_Full_Name__c = readString(dis);

					this.Estimated_Invoice_Date__c = readDate(dis);

					this.dermoSEQ_Stage__c = readString(dis);

					this.Sales_Credit_Date__c = readDate(dis);

					this.Broker_Tax_ID__c = readString(dis);

					this.Broker_ID_Number__c = readString(dis);

					this.Pharma__c = readString(dis);

					this.Broker_Contact__c = readString(dis);

					this.Sequencing_Completion_Deadline_Date__c = readDate(dis);

					this.Distributor__c = readString(dis);

					this.Broker_Address__c = readString(dis);

					this.Broker_Contact_Phone__c = readString(dis);

					this.Broker_Contact_Email__c = readString(dis);

					this.Ship_To_Contact_With_PO__c = readString(dis);

					length = dis.readByte();
					if (length == -1) {
						this.Extractions_Needed__c = null;
					} else {
						this.Extractions_Needed__c = dis.readBoolean();
					}

					this.Attn_To__c = readString(dis);

					this.Mouse_TCRB_Block__c = readString(dis);

				} catch (IOException e) {
					throw new RuntimeException(e);

				}

			}

		}

		public void writeData(ObjectOutputStream dos) {
			try {

				// String

				writeString(this.Id, dos);

				// String

				writeString(this.OwnerId, dos);

				// String

				writeString(this.ContractId, dos);

				// String

				writeString(this.AccountId, dos);

				// String

				writeString(this.Pricebook2Id, dos);

				// String

				writeString(this.OriginalOrderId, dos);

				// String

				writeString(this.RecordTypeId, dos);

				// java.util.Date

				writeDate(this.EffectiveDate, dos);

				// java.util.Date

				writeDate(this.EndDate, dos);

				// Boolean

				if (this.IsReductionOrder == null) {
					dos.writeByte(-1);
				} else {
					dos.writeByte(0);
					dos.writeBoolean(this.IsReductionOrder);
				}

				// String

				writeString(this.Status, dos);

				// String

				writeString(this.Description, dos);

				// String

				writeString(this.CustomerAuthorizedById, dos);

				// java.util.Date

				writeDate(this.CustomerAuthorizedDate, dos);

				// String

				writeString(this.CompanyAuthorizedById, dos);

				// java.util.Date

				writeDate(this.CompanyAuthorizedDate, dos);

				// String

				writeString(this.Type, dos);

				// String

				writeString(this.BillingStreet, dos);

				// String

				writeString(this.BillingCity, dos);

				// String

				writeString(this.BillingState, dos);

				// String

				writeString(this.BillingPostalCode, dos);

				// String

				writeString(this.BillingCountry, dos);

				// String

				writeString(this.BillingStateCode, dos);

				// String

				writeString(this.BillingCountryCode, dos);

				// Double

				if (this.BillingLatitude == null) {
					dos.writeByte(-1);
				} else {
					dos.writeByte(0);
					dos.writeDouble(this.BillingLatitude);
				}

				// Double

				if (this.BillingLongitude == null) {
					dos.writeByte(-1);
				} else {
					dos.writeByte(0);
					dos.writeDouble(this.BillingLongitude);
				}

				// String

				writeString(this.BillingAddress, dos);

				// String

				writeString(this.ShippingStreet, dos);

				// String

				writeString(this.ShippingCity, dos);

				// String

				writeString(this.ShippingState, dos);

				// String

				writeString(this.ShippingPostalCode, dos);

				// String

				writeString(this.ShippingCountry, dos);

				// String

				writeString(this.ShippingStateCode, dos);

				// String

				writeString(this.ShippingCountryCode, dos);

				// Double

				if (this.ShippingLatitude == null) {
					dos.writeByte(-1);
				} else {
					dos.writeByte(0);
					dos.writeDouble(this.ShippingLatitude);
				}

				// Double

				if (this.ShippingLongitude == null) {
					dos.writeByte(-1);
				} else {
					dos.writeByte(0);
					dos.writeDouble(this.ShippingLongitude);
				}

				// String

				writeString(this.ShippingAddress, dos);

				// String

				writeString(this.Name, dos);

				// java.util.Date

				writeDate(this.ActivatedDate, dos);

				// String

				writeString(this.ActivatedById, dos);

				// String

				writeString(this.StatusCode, dos);

				// String

				writeString(this.CurrencyIsoCode, dos);

				// String

				writeString(this.OrderNumber, dos);

				// Double

				if (this.TotalAmount == null) {
					dos.writeByte(-1);
				} else {
					dos.writeByte(0);
					dos.writeDouble(this.TotalAmount);
				}

				// java.util.Date

				writeDate(this.CreatedDate, dos);

				// String

				writeString(this.CreatedById, dos);

				// java.util.Date

				writeDate(this.LastModifiedDate, dos);

				// String

				writeString(this.LastModifiedById, dos);

				// Boolean

				if (this.IsDeleted == null) {
					dos.writeByte(-1);
				} else {
					dos.writeByte(0);
					dos.writeBoolean(this.IsDeleted);
				}

				// java.util.Date

				writeDate(this.SystemModstamp, dos);

				// java.util.Date

				writeDate(this.LastViewedDate, dos);

				// java.util.Date

				writeDate(this.LastReferencedDate, dos);

				// java.util.Date

				writeDate(this.Data_Release_Date__c, dos);

				// String

				writeString(this.ISO_Country_Code__c, dos);

				// String

				writeString(this.Credit_Card_del__c, dos);

				// String

				writeString(this.Invoice_1_Number__c, dos);

				// String

				writeString(this.Invoice_2_Number__c, dos);

				// String

				writeString(this.Invoice_3_Number__c, dos);

				// String

				writeString(this.PO_Contact_Phone__c, dos);

				// String

				writeString(this.Invoice_4_Number__c, dos);

				// String

				writeString(this.Bill_To_Email__c, dos);

				// String

				writeString(this.Order_Catagory__c, dos);

				// String

				writeString(this.Other_Carrier_Tracking__c, dos);

				// String

				writeString(this.Priority__c, dos);

				// String

				writeString(this.Probability__c, dos);

				// Double

				if (this.Age__c == null) {
					dos.writeByte(-1);
				} else {
					dos.writeByte(0);
					dos.writeDouble(this.Age__c);
				}

				// java.util.Date

				writeDate(this.Report_Release_Date__c, dos);

				// java.util.Date

				writeDate(this.Sample_Arrival_Date__c, dos);

				// String

				writeString(this.Service_Order_Stage__c, dos);

				// Double

				if (this.Shipping_Handling__c == null) {
					dos.writeByte(-1);
				} else {
					dos.writeByte(0);
					dos.writeDouble(this.Shipping_Handling__c);
				}

				// String

				writeString(this.Data_Analysis_Group__c, dos);

				// Double

				if (this.Total_Order__c == null) {
					dos.writeByte(-1);
				} else {
					dos.writeByte(0);
					dos.writeDouble(this.Total_Order__c);
				}

				// String

				writeString(this.Workspace_ID__c, dos);

				// String

				writeString(this.clonoSEQ_Stage__c, dos);

				// Double

				if (this.Amount__c == null) {
					dos.writeByte(-1);
				} else {
					dos.writeByte(0);
					dos.writeDouble(this.Amount__c);
				}

				// String

				writeString(this.PO_Contact_Email__c, dos);

				// String

				writeString(this.PO_Number_c__c, dos);

				// String

				writeString(this.Bill_To_Phone__c, dos);

				// String

				writeString(this.Lead_Source__c, dos);

				// Double

				if (this.Invoice_1_Amount__c == null) {
					dos.writeByte(-1);
				} else {
					dos.writeByte(0);
					dos.writeDouble(this.Invoice_1_Amount__c);
				}

				// java.util.Date

				writeDate(this.Invoice_1_Revenue_Date__c, dos);

				// Double

				if (this.Invoice_2_Amount__c == null) {
					dos.writeByte(-1);
				} else {
					dos.writeByte(0);
					dos.writeDouble(this.Invoice_2_Amount__c);
				}

				// Double

				if (this.Invoice_3_Amount__c == null) {
					dos.writeByte(-1);
				} else {
					dos.writeByte(0);
					dos.writeDouble(this.Invoice_3_Amount__c);
				}

				// Boolean

				if (this.Invoice_3_Unearned_Revenue__c == null) {
					dos.writeByte(-1);
				} else {
					dos.writeByte(0);
					dos.writeBoolean(this.Invoice_3_Unearned_Revenue__c);
				}

				// Double

				if (this.Invoice_4_Amount__c == null) {
					dos.writeByte(-1);
				} else {
					dos.writeByte(0);
					dos.writeDouble(this.Invoice_4_Amount__c);
				}

				// String

				writeString(this.Locus__c, dos);

				// Double

				if (this.Turnaround_Days__c == null) {
					dos.writeByte(-1);
				} else {
					dos.writeByte(0);
					dos.writeDouble(this.Turnaround_Days__c);
				}

				// String

				writeString(this.Credit_Card__c, dos);

				// String

				writeString(this.Sec_code__c, dos);

				// String

				writeString(this.Order_Notes__c, dos);

				// String

				writeString(this.Expiration__c, dos);

				// String

				writeString(this.Billing_To_Name__c, dos);

				// String

				writeString(this.Ship_To_Name__c, dos);

				// String

				writeString(this.Related_Case__c, dos);

				// String

				writeString(this.Related_Order__c, dos);

				// String

				writeString(this.Resolution__c, dos);

				// java.util.Date

				writeDate(this.Deadline_Date__c, dos);

				// String

				writeString(this.Accounts_Payable_Contact_Email__c, dos);

				// String

				writeString(this.Accounts_Payable_Contact_Phone__c, dos);

				// String

				writeString(this.Sample_Rejection_Criteria__c, dos);

				// Boolean

				if (this.Sample_Rejection_Jeopardy__c == null) {
					dos.writeByte(-1);
				} else {
					dos.writeByte(0);
					dos.writeBoolean(this.Sample_Rejection_Jeopardy__c);
				}

				// String

				writeString(this.Ship_Attn_To_Email__c, dos);

				// java.util.Date

				writeDate(this.PO_Receipt_Date__c, dos);

				// Double

				if (this.Quantity_Released__c == null) {
					dos.writeByte(-1);
				} else {
					dos.writeByte(0);
					dos.writeDouble(this.Quantity_Released__c);
				}

				// Double

				if (this.S_H_Tax__c == null) {
					dos.writeByte(-1);
				} else {
					dos.writeByte(0);
					dos.writeDouble(this.S_H_Tax__c);
				}

				// Double

				if (this.Total_Tax__c == null) {
					dos.writeByte(-1);
				} else {
					dos.writeByte(0);
					dos.writeDouble(this.Total_Tax__c);
				}

				// String

				writeString(this.Legal_Entity__c, dos);

				// String

				writeString(this.Quote_No__c, dos);

				// Double

				if (this.Discount_percent__c == null) {
					dos.writeByte(-1);
				} else {
					dos.writeByte(0);
					dos.writeDouble(this.Discount_percent__c);
				}

				// Double

				if (this.Total_Discount__c == null) {
					dos.writeByte(-1);
				} else {
					dos.writeByte(0);
					dos.writeDouble(this.Total_Discount__c);
				}

				// Double

				if (this.Total_Invoice_AmountsOld__c == null) {
					dos.writeByte(-1);
				} else {
					dos.writeByte(0);
					dos.writeDouble(this.Total_Invoice_AmountsOld__c);
				}

				// Double

				if (this.X2014_Total_Invoice_AmountsOld__c == null) {
					dos.writeByte(-1);
				} else {
					dos.writeByte(0);
					dos.writeDouble(this.X2014_Total_Invoice_AmountsOld__c);
				}

				// String

				writeString(this.Ship_to_Contact__c, dos);

				// Double

				if (this.Sales_Tax2__c == null) {
					dos.writeByte(-1);
				} else {
					dos.writeByte(0);
					dos.writeDouble(this.Sales_Tax2__c);
				}

				// Double

				if (this.Tax2__c == null) {
					dos.writeByte(-1);
				} else {
					dos.writeByte(0);
					dos.writeDouble(this.Tax2__c);
				}

				// String

				writeString(this.User__c, dos);

				// String

				writeString(this.Street__c, dos);

				// String

				writeString(this.City__c, dos);

				// String

				writeString(this.State__c, dos);

				// String

				writeString(this.Zip__c, dos);

				// String

				writeString(this.Country__c, dos);

				// String

				writeString(this.Indication__c, dos);

				// String

				writeString(this.User_Phone__c, dos);

				// java.util.Date

				writeDate(this.Need_by__c, dos);

				// String

				writeString(this.Related_Contract__c, dos);

				// Boolean

				if (this.Invoice__c == null) {
					dos.writeByte(-1);
				} else {
					dos.writeByte(0);
					dos.writeBoolean(this.Invoice__c);
				}

				// java.util.Date

				writeDate(this.Accession_Date__c, dos);

				// java.util.Date

				writeDate(this.Reconciliation_Date__c, dos);

				// java.util.Date

				writeDate(this.Test_Order_Date__c, dos);

				// String

				writeString(this.Clinical_Sales_Territory__c, dos);

				// String

				writeString(this.Block__c, dos);

				// String

				writeString(this.Order_Detail__c, dos);

				// String

				writeString(this.Physician__c, dos);

				// Double

				if (this.Sample_Quantity_Received__c == null) {
					dos.writeByte(-1);
				} else {
					dos.writeByte(0);
					dos.writeDouble(this.Sample_Quantity_Received__c);
				}

				// java.util.Date

				writeDate(this.Order_Received_Date__c, dos);

				// Double

				if (this.Order_Value__c == null) {
					dos.writeByte(-1);
				} else {
					dos.writeByte(0);
					dos.writeDouble(this.Order_Value__c);
				}

				// String

				writeString(this.Sales_Territory__c, dos);

				// Boolean

				if (this.Pharma_Sponsored__c == null) {
					dos.writeByte(-1);
				} else {
					dos.writeByte(0);
					dos.writeBoolean(this.Pharma_Sponsored__c);
				}

				// Boolean

				if (this.Form_of_Payment_Received_or_Negotiated__c == null) {
					dos.writeByte(-1);
				} else {
					dos.writeByte(0);
					dos.writeBoolean(this.Form_of_Payment_Received_or_Negotiated__c);
				}

				// String

				writeString(this.VAT__c, dos);

				// String

				writeString(this.Campaigns__c, dos);

				// String

				writeString(this.Purchase_Order_Record__c, dos);

				// String

				writeString(this.Broker_Account__c, dos);

				// String

				writeString(this.Sample_Lab_Location__c, dos);

				// String

				writeString(this.Physician_Full_Name__c, dos);

				// java.util.Date

				writeDate(this.Estimated_Invoice_Date__c, dos);

				// String

				writeString(this.dermoSEQ_Stage__c, dos);

				// java.util.Date

				writeDate(this.Sales_Credit_Date__c, dos);

				// String

				writeString(this.Broker_Tax_ID__c, dos);

				// String

				writeString(this.Broker_ID_Number__c, dos);

				// String

				writeString(this.Pharma__c, dos);

				// String

				writeString(this.Broker_Contact__c, dos);

				// java.util.Date

				writeDate(this.Sequencing_Completion_Deadline_Date__c, dos);

				// String

				writeString(this.Distributor__c, dos);

				// String

				writeString(this.Broker_Address__c, dos);

				// String

				writeString(this.Broker_Contact_Phone__c, dos);

				// String

				writeString(this.Broker_Contact_Email__c, dos);

				// String

				writeString(this.Ship_To_Contact_With_PO__c, dos);

				// Boolean

				if (this.Extractions_Needed__c == null) {
					dos.writeByte(-1);
				} else {
					dos.writeByte(0);
					dos.writeBoolean(this.Extractions_Needed__c);
				}

				// String

				writeString(this.Attn_To__c, dos);

				// String

				writeString(this.Mouse_TCRB_Block__c, dos);

			} catch (IOException e) {
				throw new RuntimeException(e);
			}

		}

		public String toString() {

			StringBuilder sb = new StringBuilder();
			sb.append(super.toString());
			sb.append("[");
			sb.append("Id=" + Id);
			sb.append(",OwnerId=" + OwnerId);
			sb.append(",ContractId=" + ContractId);
			sb.append(",AccountId=" + AccountId);
			sb.append(",Pricebook2Id=" + Pricebook2Id);
			sb.append(",OriginalOrderId=" + OriginalOrderId);
			sb.append(",RecordTypeId=" + RecordTypeId);
			sb.append(",EffectiveDate=" + String.valueOf(EffectiveDate));
			sb.append(",EndDate=" + String.valueOf(EndDate));
			sb.append(",IsReductionOrder=" + String.valueOf(IsReductionOrder));
			sb.append(",Status=" + Status);
			sb.append(",Description=" + Description);
			sb.append(",CustomerAuthorizedById=" + CustomerAuthorizedById);
			sb.append(",CustomerAuthorizedDate="
					+ String.valueOf(CustomerAuthorizedDate));
			sb.append(",CompanyAuthorizedById=" + CompanyAuthorizedById);
			sb.append(",CompanyAuthorizedDate="
					+ String.valueOf(CompanyAuthorizedDate));
			sb.append(",Type=" + Type);
			sb.append(",BillingStreet=" + BillingStreet);
			sb.append(",BillingCity=" + BillingCity);
			sb.append(",BillingState=" + BillingState);
			sb.append(",BillingPostalCode=" + BillingPostalCode);
			sb.append(",BillingCountry=" + BillingCountry);
			sb.append(",BillingStateCode=" + BillingStateCode);
			sb.append(",BillingCountryCode=" + BillingCountryCode);
			sb.append(",BillingLatitude=" + String.valueOf(BillingLatitude));
			sb.append(",BillingLongitude=" + String.valueOf(BillingLongitude));
			sb.append(",BillingAddress=" + BillingAddress);
			sb.append(",ShippingStreet=" + ShippingStreet);
			sb.append(",ShippingCity=" + ShippingCity);
			sb.append(",ShippingState=" + ShippingState);
			sb.append(",ShippingPostalCode=" + ShippingPostalCode);
			sb.append(",ShippingCountry=" + ShippingCountry);
			sb.append(",ShippingStateCode=" + ShippingStateCode);
			sb.append(",ShippingCountryCode=" + ShippingCountryCode);
			sb.append(",ShippingLatitude=" + String.valueOf(ShippingLatitude));
			sb.append(",ShippingLongitude=" + String.valueOf(ShippingLongitude));
			sb.append(",ShippingAddress=" + ShippingAddress);
			sb.append(",Name=" + Name);
			sb.append(",ActivatedDate=" + String.valueOf(ActivatedDate));
			sb.append(",ActivatedById=" + ActivatedById);
			sb.append(",StatusCode=" + StatusCode);
			sb.append(",CurrencyIsoCode=" + CurrencyIsoCode);
			sb.append(",OrderNumber=" + OrderNumber);
			sb.append(",TotalAmount=" + String.valueOf(TotalAmount));
			sb.append(",CreatedDate=" + String.valueOf(CreatedDate));
			sb.append(",CreatedById=" + CreatedById);
			sb.append(",LastModifiedDate=" + String.valueOf(LastModifiedDate));
			sb.append(",LastModifiedById=" + LastModifiedById);
			sb.append(",IsDeleted=" + String.valueOf(IsDeleted));
			sb.append(",SystemModstamp=" + String.valueOf(SystemModstamp));
			sb.append(",LastViewedDate=" + String.valueOf(LastViewedDate));
			sb.append(",LastReferencedDate="
					+ String.valueOf(LastReferencedDate));
			sb.append(",Data_Release_Date__c="
					+ String.valueOf(Data_Release_Date__c));
			sb.append(",ISO_Country_Code__c=" + ISO_Country_Code__c);
			sb.append(",Credit_Card_del__c=" + Credit_Card_del__c);
			sb.append(",Invoice_1_Number__c=" + Invoice_1_Number__c);
			sb.append(",Invoice_2_Number__c=" + Invoice_2_Number__c);
			sb.append(",Invoice_3_Number__c=" + Invoice_3_Number__c);
			sb.append(",PO_Contact_Phone__c=" + PO_Contact_Phone__c);
			sb.append(",Invoice_4_Number__c=" + Invoice_4_Number__c);
			sb.append(",Bill_To_Email__c=" + Bill_To_Email__c);
			sb.append(",Order_Catagory__c=" + Order_Catagory__c);
			sb.append(",Other_Carrier_Tracking__c=" + Other_Carrier_Tracking__c);
			sb.append(",Priority__c=" + Priority__c);
			sb.append(",Probability__c=" + Probability__c);
			sb.append(",Age__c=" + String.valueOf(Age__c));
			sb.append(",Report_Release_Date__c="
					+ String.valueOf(Report_Release_Date__c));
			sb.append(",Sample_Arrival_Date__c="
					+ String.valueOf(Sample_Arrival_Date__c));
			sb.append(",Service_Order_Stage__c=" + Service_Order_Stage__c);
			sb.append(",Shipping_Handling__c="
					+ String.valueOf(Shipping_Handling__c));
			sb.append(",Data_Analysis_Group__c=" + Data_Analysis_Group__c);
			sb.append(",Total_Order__c=" + String.valueOf(Total_Order__c));
			sb.append(",Workspace_ID__c=" + Workspace_ID__c);
			sb.append(",clonoSEQ_Stage__c=" + clonoSEQ_Stage__c);
			sb.append(",Amount__c=" + String.valueOf(Amount__c));
			sb.append(",PO_Contact_Email__c=" + PO_Contact_Email__c);
			sb.append(",PO_Number_c__c=" + PO_Number_c__c);
			sb.append(",Bill_To_Phone__c=" + Bill_To_Phone__c);
			sb.append(",Lead_Source__c=" + Lead_Source__c);
			sb.append(",Invoice_1_Amount__c="
					+ String.valueOf(Invoice_1_Amount__c));
			sb.append(",Invoice_1_Revenue_Date__c="
					+ String.valueOf(Invoice_1_Revenue_Date__c));
			sb.append(",Invoice_2_Amount__c="
					+ String.valueOf(Invoice_2_Amount__c));
			sb.append(",Invoice_3_Amount__c="
					+ String.valueOf(Invoice_3_Amount__c));
			sb.append(",Invoice_3_Unearned_Revenue__c="
					+ String.valueOf(Invoice_3_Unearned_Revenue__c));
			sb.append(",Invoice_4_Amount__c="
					+ String.valueOf(Invoice_4_Amount__c));
			sb.append(",Locus__c=" + Locus__c);
			sb.append(",Turnaround_Days__c="
					+ String.valueOf(Turnaround_Days__c));
			sb.append(",Credit_Card__c=" + Credit_Card__c);
			sb.append(",Sec_code__c=" + Sec_code__c);
			sb.append(",Order_Notes__c=" + Order_Notes__c);
			sb.append(",Expiration__c=" + Expiration__c);
			sb.append(",Billing_To_Name__c=" + Billing_To_Name__c);
			sb.append(",Ship_To_Name__c=" + Ship_To_Name__c);
			sb.append(",Related_Case__c=" + Related_Case__c);
			sb.append(",Related_Order__c=" + Related_Order__c);
			sb.append(",Resolution__c=" + Resolution__c);
			sb.append(",Deadline_Date__c=" + String.valueOf(Deadline_Date__c));
			sb.append(",Accounts_Payable_Contact_Email__c="
					+ Accounts_Payable_Contact_Email__c);
			sb.append(",Accounts_Payable_Contact_Phone__c="
					+ Accounts_Payable_Contact_Phone__c);
			sb.append(",Sample_Rejection_Criteria__c="
					+ Sample_Rejection_Criteria__c);
			sb.append(",Sample_Rejection_Jeopardy__c="
					+ String.valueOf(Sample_Rejection_Jeopardy__c));
			sb.append(",Ship_Attn_To_Email__c=" + Ship_Attn_To_Email__c);
			sb.append(",PO_Receipt_Date__c="
					+ String.valueOf(PO_Receipt_Date__c));
			sb.append(",Quantity_Released__c="
					+ String.valueOf(Quantity_Released__c));
			sb.append(",S_H_Tax__c=" + String.valueOf(S_H_Tax__c));
			sb.append(",Total_Tax__c=" + String.valueOf(Total_Tax__c));
			sb.append(",Legal_Entity__c=" + Legal_Entity__c);
			sb.append(",Quote_No__c=" + Quote_No__c);
			sb.append(",Discount_percent__c="
					+ String.valueOf(Discount_percent__c));
			sb.append(",Total_Discount__c=" + String.valueOf(Total_Discount__c));
			sb.append(",Total_Invoice_AmountsOld__c="
					+ String.valueOf(Total_Invoice_AmountsOld__c));
			sb.append(",X2014_Total_Invoice_AmountsOld__c="
					+ String.valueOf(X2014_Total_Invoice_AmountsOld__c));
			sb.append(",Ship_to_Contact__c=" + Ship_to_Contact__c);
			sb.append(",Sales_Tax2__c=" + String.valueOf(Sales_Tax2__c));
			sb.append(",Tax2__c=" + String.valueOf(Tax2__c));
			sb.append(",User__c=" + User__c);
			sb.append(",Street__c=" + Street__c);
			sb.append(",City__c=" + City__c);
			sb.append(",State__c=" + State__c);
			sb.append(",Zip__c=" + Zip__c);
			sb.append(",Country__c=" + Country__c);
			sb.append(",Indication__c=" + Indication__c);
			sb.append(",User_Phone__c=" + User_Phone__c);
			sb.append(",Need_by__c=" + String.valueOf(Need_by__c));
			sb.append(",Related_Contract__c=" + Related_Contract__c);
			sb.append(",Invoice__c=" + String.valueOf(Invoice__c));
			sb.append(",Accession_Date__c=" + String.valueOf(Accession_Date__c));
			sb.append(",Reconciliation_Date__c="
					+ String.valueOf(Reconciliation_Date__c));
			sb.append(",Test_Order_Date__c="
					+ String.valueOf(Test_Order_Date__c));
			sb.append(",Clinical_Sales_Territory__c="
					+ Clinical_Sales_Territory__c);
			sb.append(",Block__c=" + Block__c);
			sb.append(",Order_Detail__c=" + Order_Detail__c);
			sb.append(",Physician__c=" + Physician__c);
			sb.append(",Sample_Quantity_Received__c="
					+ String.valueOf(Sample_Quantity_Received__c));
			sb.append(",Order_Received_Date__c="
					+ String.valueOf(Order_Received_Date__c));
			sb.append(",Order_Value__c=" + String.valueOf(Order_Value__c));
			sb.append(",Sales_Territory__c=" + Sales_Territory__c);
			sb.append(",Pharma_Sponsored__c="
					+ String.valueOf(Pharma_Sponsored__c));
			sb.append(",Form_of_Payment_Received_or_Negotiated__c="
					+ String.valueOf(Form_of_Payment_Received_or_Negotiated__c));
			sb.append(",VAT__c=" + VAT__c);
			sb.append(",Campaigns__c=" + Campaigns__c);
			sb.append(",Purchase_Order_Record__c=" + Purchase_Order_Record__c);
			sb.append(",Broker_Account__c=" + Broker_Account__c);
			sb.append(",Sample_Lab_Location__c=" + Sample_Lab_Location__c);
			sb.append(",Physician_Full_Name__c=" + Physician_Full_Name__c);
			sb.append(",Estimated_Invoice_Date__c="
					+ String.valueOf(Estimated_Invoice_Date__c));
			sb.append(",dermoSEQ_Stage__c=" + dermoSEQ_Stage__c);
			sb.append(",Sales_Credit_Date__c="
					+ String.valueOf(Sales_Credit_Date__c));
			sb.append(",Broker_Tax_ID__c=" + Broker_Tax_ID__c);
			sb.append(",Broker_ID_Number__c=" + Broker_ID_Number__c);
			sb.append(",Pharma__c=" + Pharma__c);
			sb.append(",Broker_Contact__c=" + Broker_Contact__c);
			sb.append(",Sequencing_Completion_Deadline_Date__c="
					+ String.valueOf(Sequencing_Completion_Deadline_Date__c));
			sb.append(",Distributor__c=" + Distributor__c);
			sb.append(",Broker_Address__c=" + Broker_Address__c);
			sb.append(",Broker_Contact_Phone__c=" + Broker_Contact_Phone__c);
			sb.append(",Broker_Contact_Email__c=" + Broker_Contact_Email__c);
			sb.append(",Ship_To_Contact_With_PO__c="
					+ Ship_To_Contact_With_PO__c);
			sb.append(",Extractions_Needed__c="
					+ String.valueOf(Extractions_Needed__c));
			sb.append(",Attn_To__c=" + Attn_To__c);
			sb.append(",Mouse_TCRB_Block__c=" + Mouse_TCRB_Block__c);
			sb.append("]");

			return sb.toString();
		}

		/**
		 * Compare keys
		 */
		public int compareTo(row2Struct other) {

			int returnValue = -1;

			return returnValue;
		}

		private int checkNullsAndCompare(Object object1, Object object2) {
			int returnValue = 0;
			if (object1 instanceof Comparable && object2 instanceof Comparable) {
				returnValue = ((Comparable) object1).compareTo(object2);
			} else if (object1 != null && object2 != null) {
				returnValue = compareStrings(object1.toString(),
						object2.toString());
			} else if (object1 == null && object2 != null) {
				returnValue = 1;
			} else if (object1 != null && object2 == null) {
				returnValue = -1;
			} else {
				returnValue = 0;
			}

			return returnValue;
		}

		private int compareStrings(String string1, String string2) {
			return string1.compareTo(string2);
		}

	}

	public void tSalesforceInput_2Process(
			final java.util.Map<String, Object> globalMap)
			throws TalendException {
		globalMap.put("tSalesforceInput_2_SUBPROCESS_STATE", 0);

		final boolean execStat = this.execStat;

		String iterateId = "";

		String currentComponent = "";
		java.util.Map<String, Object> resourceMap = new java.util.HashMap<String, Object>();

		try {

			String currentMethodName = new java.lang.Exception()
					.getStackTrace()[0].getMethodName();
			boolean resumeIt = currentMethodName.equals(resumeEntryMethodName);
			if (resumeEntryMethodName == null || resumeIt || globalResumeTicket) {// start
																					// the
																					// resume
				globalResumeTicket = true;

				row2Struct row2 = new row2Struct();

				/**
				 * [tPostgresqlOutput_2 begin ] start
				 */

				ok_Hash.put("tPostgresqlOutput_2", false);
				start_Hash.put("tPostgresqlOutput_2",
						System.currentTimeMillis());

				currentComponent = "tPostgresqlOutput_2";

				if (execStat) {
					if (resourceMap.get("inIterateVComp") == null) {

						runStat.updateStatOnConnection("row2" + iterateId, 0, 0);

					}
				}

				int tos_count_tPostgresqlOutput_2 = 0;

				String dbschema_tPostgresqlOutput_2 = null;
				dbschema_tPostgresqlOutput_2 = "cora";

				String tableName_tPostgresqlOutput_2 = null;
				if (dbschema_tPostgresqlOutput_2 == null
						|| dbschema_tPostgresqlOutput_2.trim().length() == 0) {
					tableName_tPostgresqlOutput_2 = "";
				} else {
					tableName_tPostgresqlOutput_2 = dbschema_tPostgresqlOutput_2
							+ "\".\"" + "";
				}

				int nb_line_tPostgresqlOutput_2 = 0;
				int nb_line_update_tPostgresqlOutput_2 = 0;
				int nb_line_inserted_tPostgresqlOutput_2 = 0;
				int nb_line_deleted_tPostgresqlOutput_2 = 0;
				int nb_line_rejected_tPostgresqlOutput_2 = 0;

				int deletedCount_tPostgresqlOutput_2 = 0;
				int updatedCount_tPostgresqlOutput_2 = 0;
				int insertedCount_tPostgresqlOutput_2 = 0;
				int rejectedCount_tPostgresqlOutput_2 = 0;

				boolean whetherReject_tPostgresqlOutput_2 = false;

				java.sql.Connection conn_tPostgresqlOutput_2 = null;
				String dbUser_tPostgresqlOutput_2 = null;

				java.lang.Class.forName("org.postgresql.Driver");
				String url_tPostgresqlOutput_2 = "jdbc:postgresql://"
						+ "localhost" + ":" + "5432" + "/" + "cora_db";
				dbUser_tPostgresqlOutput_2 = "cora";

				final String decryptedPassword_tPostgresqlOutput_2 = routines.system.PasswordEncryptUtil
						.decryptPassword("06900cf8b77d70ca");

				String dbPwd_tPostgresqlOutput_2 = decryptedPassword_tPostgresqlOutput_2;

				conn_tPostgresqlOutput_2 = java.sql.DriverManager
						.getConnection(url_tPostgresqlOutput_2,
								dbUser_tPostgresqlOutput_2,
								dbPwd_tPostgresqlOutput_2);

				resourceMap.put("conn_tPostgresqlOutput_2",
						conn_tPostgresqlOutput_2);
				conn_tPostgresqlOutput_2.setAutoCommit(false);
				int commitEvery_tPostgresqlOutput_2 = 10000;
				int commitCounter_tPostgresqlOutput_2 = 0;

				int batchSize_tPostgresqlOutput_2 = 10000;
				int batchSizeCounter_tPostgresqlOutput_2 = 0;

				int count_tPostgresqlOutput_2 = 0;
				java.sql.DatabaseMetaData dbMetaData_tPostgresqlOutput_2 = conn_tPostgresqlOutput_2
						.getMetaData();
				java.sql.ResultSet rsTable_tPostgresqlOutput_2 = dbMetaData_tPostgresqlOutput_2
						.getTables(null, null, null, new String[] { "TABLE" });
				boolean whetherExist_tPostgresqlOutput_2 = false;
				String defaultSchema_tPostgresqlOutput_2 = "public";
				if (dbschema_tPostgresqlOutput_2 == null
						|| dbschema_tPostgresqlOutput_2.trim().length() == 0) {
					java.sql.Statement stmtSchema_tPostgresqlOutput_2 = conn_tPostgresqlOutput_2
							.createStatement();
					java.sql.ResultSet rsSchema_tPostgresqlOutput_2 = stmtSchema_tPostgresqlOutput_2
							.executeQuery("select current_schema() ");
					while (rsSchema_tPostgresqlOutput_2.next()) {
						defaultSchema_tPostgresqlOutput_2 = rsSchema_tPostgresqlOutput_2
								.getString("current_schema");
					}
					rsSchema_tPostgresqlOutput_2.close();
					stmtSchema_tPostgresqlOutput_2.close();
				}
				while (rsTable_tPostgresqlOutput_2.next()) {
					String table_tPostgresqlOutput_2 = rsTable_tPostgresqlOutput_2
							.getString("TABLE_NAME");
					String schema_tPostgresqlOutput_2 = rsTable_tPostgresqlOutput_2
							.getString("TABLE_SCHEM");
					if (table_tPostgresqlOutput_2.equals("")
							&& (schema_tPostgresqlOutput_2
									.equals(dbschema_tPostgresqlOutput_2) || ((dbschema_tPostgresqlOutput_2 == null || dbschema_tPostgresqlOutput_2
									.trim().length() == 0) && defaultSchema_tPostgresqlOutput_2
									.equals(schema_tPostgresqlOutput_2)))) {
						whetherExist_tPostgresqlOutput_2 = true;
						break;
					}
				}
				rsTable_tPostgresqlOutput_2.close();
				if (whetherExist_tPostgresqlOutput_2) {
					java.sql.Statement stmtDrop_tPostgresqlOutput_2 = conn_tPostgresqlOutput_2
							.createStatement();
					stmtDrop_tPostgresqlOutput_2.execute("DROP TABLE \""
							+ tableName_tPostgresqlOutput_2 + "\"");
					stmtDrop_tPostgresqlOutput_2.close();
				}
				java.sql.Statement stmtCreate_tPostgresqlOutput_2 = conn_tPostgresqlOutput_2
						.createStatement();
				stmtCreate_tPostgresqlOutput_2
						.execute("CREATE TABLE \""
								+ tableName_tPostgresqlOutput_2
								+ "\"(\"Id\" VARCHAR(18)  ,\"OwnerId\" VARCHAR(18)  ,\"ContractId\" VARCHAR(18)  ,\"AccountId\" VARCHAR(18)  ,\"Pricebook2Id\" VARCHAR(18)  ,\"OriginalOrderId\" VARCHAR(18)  ,\"RecordTypeId\" VARCHAR(18)  ,\"EffectiveDate\" TIMESTAMP ,\"EndDate\" TIMESTAMP ,\"IsReductionOrder\" BOOL ,\"Status\" VARCHAR(40)  ,\"Description\" VARCHAR(32000)  ,\"CustomerAuthorizedById\" VARCHAR(18)  ,\"CustomerAuthorizedDate\" TIMESTAMP ,\"CompanyAuthorizedById\" VARCHAR(18)  ,\"CompanyAuthorizedDate\" TIMESTAMP ,\"Type\" VARCHAR(40)  ,\"BillingStreet\" VARCHAR(255)  ,\"BillingCity\" VARCHAR(40)  ,\"BillingState\" VARCHAR(80)  ,\"BillingPostalCode\" VARCHAR(20)  ,\"BillingCountry\" VARCHAR(80)  ,\"BillingStateCode\" VARCHAR(10)  ,\"BillingCountryCode\" VARCHAR(10)  ,\"BillingLatitude\" FLOAT8 ,\"BillingLongitude\" FLOAT8 ,\"BillingAddress\" VARCHAR(10)  ,\"ShippingStreet\" VARCHAR(255)  ,\"ShippingCity\" VARCHAR(40)  ,\"ShippingState\" VARCHAR(80)  ,\"ShippingPostalCode\" VARCHAR(20)  ,\"ShippingCountry\" VARCHAR(80)  ,\"ShippingStateCode\" VARCHAR(10)  ,\"ShippingCountryCode\" VARCHAR(10)  ,\"ShippingLatitude\" FLOAT8 ,\"ShippingLongitude\" FLOAT8 ,\"ShippingAddress\" VARCHAR ,\"Name\" VARCHAR(80)  ,\"ActivatedDate\" TIMESTAMP ,\"ActivatedById\" VARCHAR(18)  ,\"StatusCode\" VARCHAR(40)  ,\"CurrencyIsoCode\" VARCHAR(3)  ,\"OrderNumber\" VARCHAR(30)  ,\"TotalAmount\" FLOAT8 ,\"CreatedDate\" TIMESTAMP ,\"CreatedById\" VARCHAR(18)  ,\"LastModifiedDate\" TIMESTAMP ,\"LastModifiedById\" VARCHAR(18)  ,\"IsDeleted\" BOOL ,\"SystemModstamp\" TIMESTAMP ,\"LastViewedDate\" TIMESTAMP ,\"LastReferencedDate\" TIMESTAMP ,\"Data_Release_Date__c\" TIMESTAMP ,\"ISO_Country_Code__c\" VARCHAR(1300)  ,\"Credit_Card_del__c\" VARCHAR(255)  ,\"Invoice_1_Number__c\" VARCHAR(20)  ,\"Invoice_2_Number__c\" VARCHAR(20)  ,\"Invoice_3_Number__c\" VARCHAR(20)  ,\"PO_Contact_Phone__c\" VARCHAR(40)  ,\"Invoice_4_Number__c\" VARCHAR(20)  ,\"Bill_To_Email__c\" VARCHAR(80)  ,\"Order_Catagory__c\" VARCHAR(4099)  ,\"Other_Carrier_Tracking__c\" VARCHAR(10000)  ,\"Priority__c\" VARCHAR(255)  ,\"Probability__c\" VARCHAR(255)  ,\"Age__c\" FLOAT8 ,\"Report_Release_Date__c\" TIMESTAMP ,\"Sample_Arrival_Date__c\" TIMESTAMP ,\"Service_Order_Stage__c\" VARCHAR(255)  ,\"Shipping_Handling__c\" FLOAT8 ,\"Data_Analysis_Group__c\" VARCHAR(255)  ,\"Total_Order__c\" FLOAT8 ,\"Workspace_ID__c\" VARCHAR(255)  ,\"clonoSEQ_Stage__c\" VARCHAR(4099)  ,\"Amount__c\" FLOAT8 ,\"PO_Contact_Email__c\" VARCHAR(80)  ,\"PO_Number_c__c\" VARCHAR(100)  ,\"Bill_To_Phone__c\" VARCHAR(40)  ,\"Lead_Source__c\" VARCHAR(1300)  ,\"Invoice_1_Amount__c\" FLOAT8 ,\"Invoice_1_Revenue_Date__c\" TIMESTAMP ,\"Invoice_2_Amount__c\" FLOAT8 ,\"Invoice_3_Amount__c\" FLOAT8 ,\"Invoice_3_Unearned_Revenue__c\" BOOL ,\"Invoice_4_Amount__c\" FLOAT8 ,\"Locus__c\" VARCHAR(4099)  ,\"Turnaround_Days__c\" FLOAT8 ,\"Credit_Card__c\" VARCHAR(19)  ,\"Sec_code__c\" VARCHAR(3)  ,\"Order_Notes__c\" VARCHAR(100000)  ,\"Expiration__c\" VARCHAR(5)  ,\"Billing_To_Name__c\" VARCHAR(255)  ,\"Ship_To_Name__c\" VARCHAR(255)  ,\"Related_Case__c\" VARCHAR(18)  ,\"Related_Order__c\" VARCHAR(18)  ,\"Resolution__c\" VARCHAR(4099)  ,\"Deadline_Date__c\" TIMESTAMP ,\"Accounts_Payable_Contact_Email__c\" VARCHAR(80)  ,\"Accounts_Payable_Contact_Phone__c\" VARCHAR(40)  ,\"Sample_Rejection_Criteria__c\" VARCHAR(255)  ,\"Sample_Rejection_Jeopardy__c\" BOOL ,\"Ship_Attn_To_Email__c\" VARCHAR(80)  ,\"PO_Receipt_Date__c\" TIMESTAMP ,\"Quantity_Released__c\" FLOAT8 ,\"S_H_Tax__c\" FLOAT8 ,\"Total_Tax__c\" FLOAT8 ,\"Legal_Entity__c\" VARCHAR(255)  ,\"Quote_No__c\" VARCHAR(15)  ,\"Discount_percent__c\" FLOAT8 ,\"Total_Discount__c\" FLOAT8 ,\"Total_Invoice_AmountsOld__c\" FLOAT8 ,\"X2014_Total_Invoice_AmountsOld__c\" FLOAT8 ,\"Ship_to_Contact__c\" VARCHAR(1300)  ,\"Sales_Tax2__c\" FLOAT8 ,\"Tax2__c\" FLOAT8 ,\"User__c\" VARCHAR(18)  ,\"Street__c\" VARCHAR(50)  ,\"City__c\" VARCHAR(20)  ,\"State__c\" VARCHAR(20)  ,\"Zip__c\" VARCHAR(10)  ,\"Country__c\" VARCHAR(20)  ,\"Indication__c\" VARCHAR(255)  ,\"User_Phone__c\" VARCHAR(40)  ,\"Need_by__c\" TIMESTAMP ,\"Related_Contract__c\" VARCHAR(18)  ,\"Invoice__c\" BOOL ,\"Accession_Date__c\" TIMESTAMP ,\"Reconciliation_Date__c\" TIMESTAMP ,\"Test_Order_Date__c\" TIMESTAMP ,\"Clinical_Sales_Territory__c\" VARCHAR(1300)  ,\"Block__c\" VARCHAR(255)  ,\"Order_Detail__c\" VARCHAR(18)  ,\"Physician__c\" VARCHAR(18)  ,\"Sample_Quantity_Received__c\" FLOAT8 ,\"Order_Received_Date__c\" TIMESTAMP ,\"Order_Value__c\" FLOAT8 ,\"Sales_Territory__c\" VARCHAR(1300)  ,\"Pharma_Sponsored__c\" BOOL ,\"Form_of_Payment_Received_or_Negotiated__c\" BOOL ,\"VAT__c\" VARCHAR(20)  ,\"Campaigns__c\" VARCHAR(18)  ,\"Purchase_Order_Record__c\" VARCHAR(18)  ,\"Broker_Account__c\" VARCHAR(18)  ,\"Sample_Lab_Location__c\" VARCHAR(4099)  ,\"Physician_Full_Name__c\" VARCHAR(1300)  ,\"Estimated_Invoice_Date__c\" TIMESTAMP ,\"dermoSEQ_Stage__c\" VARCHAR(4099)  ,\"Sales_Credit_Date__c\" TIMESTAMP ,\"Broker_Tax_ID__c\" VARCHAR(1300)  ,\"Broker_ID_Number__c\" VARCHAR(1300)  ,\"Pharma__c\" VARCHAR(4099)  ,\"Broker_Contact__c\" VARCHAR(18)  ,\"Sequencing_Completion_Deadline_Date__c\" TIMESTAMP ,\"Distributor__c\" VARCHAR(255)  ,\"Broker_Address__c\" VARCHAR(1300)  ,\"Broker_Contact_Phone__c\" VARCHAR(40)  ,\"Broker_Contact_Email__c\" VARCHAR(80)  ,\"Ship_To_Contact_With_PO__c\" VARCHAR(1300)  ,\"Extractions_Needed__c\" BOOL ,\"Attn_To__c\" VARCHAR(1300)  ,\"Mouse_TCRB_Block__c\" VARCHAR(255)  )");
				stmtCreate_tPostgresqlOutput_2.close();
				String insert_tPostgresqlOutput_2 = "INSERT INTO \""
						+ tableName_tPostgresqlOutput_2
						+ "\" (\"Id\",\"OwnerId\",\"ContractId\",\"AccountId\",\"Pricebook2Id\",\"OriginalOrderId\",\"RecordTypeId\",\"EffectiveDate\",\"EndDate\",\"IsReductionOrder\",\"Status\",\"Description\",\"CustomerAuthorizedById\",\"CustomerAuthorizedDate\",\"CompanyAuthorizedById\",\"CompanyAuthorizedDate\",\"Type\",\"BillingStreet\",\"BillingCity\",\"BillingState\",\"BillingPostalCode\",\"BillingCountry\",\"BillingStateCode\",\"BillingCountryCode\",\"BillingLatitude\",\"BillingLongitude\",\"BillingAddress\",\"ShippingStreet\",\"ShippingCity\",\"ShippingState\",\"ShippingPostalCode\",\"ShippingCountry\",\"ShippingStateCode\",\"ShippingCountryCode\",\"ShippingLatitude\",\"ShippingLongitude\",\"ShippingAddress\",\"Name\",\"ActivatedDate\",\"ActivatedById\",\"StatusCode\",\"CurrencyIsoCode\",\"OrderNumber\",\"TotalAmount\",\"CreatedDate\",\"CreatedById\",\"LastModifiedDate\",\"LastModifiedById\",\"IsDeleted\",\"SystemModstamp\",\"LastViewedDate\",\"LastReferencedDate\",\"Data_Release_Date__c\",\"ISO_Country_Code__c\",\"Credit_Card_del__c\",\"Invoice_1_Number__c\",\"Invoice_2_Number__c\",\"Invoice_3_Number__c\",\"PO_Contact_Phone__c\",\"Invoice_4_Number__c\",\"Bill_To_Email__c\",\"Order_Catagory__c\",\"Other_Carrier_Tracking__c\",\"Priority__c\",\"Probability__c\",\"Age__c\",\"Report_Release_Date__c\",\"Sample_Arrival_Date__c\",\"Service_Order_Stage__c\",\"Shipping_Handling__c\",\"Data_Analysis_Group__c\",\"Total_Order__c\",\"Workspace_ID__c\",\"clonoSEQ_Stage__c\",\"Amount__c\",\"PO_Contact_Email__c\",\"PO_Number_c__c\",\"Bill_To_Phone__c\",\"Lead_Source__c\",\"Invoice_1_Amount__c\",\"Invoice_1_Revenue_Date__c\",\"Invoice_2_Amount__c\",\"Invoice_3_Amount__c\",\"Invoice_3_Unearned_Revenue__c\",\"Invoice_4_Amount__c\",\"Locus__c\",\"Turnaround_Days__c\",\"Credit_Card__c\",\"Sec_code__c\",\"Order_Notes__c\",\"Expiration__c\",\"Billing_To_Name__c\",\"Ship_To_Name__c\",\"Related_Case__c\",\"Related_Order__c\",\"Resolution__c\",\"Deadline_Date__c\",\"Accounts_Payable_Contact_Email__c\",\"Accounts_Payable_Contact_Phone__c\",\"Sample_Rejection_Criteria__c\",\"Sample_Rejection_Jeopardy__c\",\"Ship_Attn_To_Email__c\",\"PO_Receipt_Date__c\",\"Quantity_Released__c\",\"S_H_Tax__c\",\"Total_Tax__c\",\"Legal_Entity__c\",\"Quote_No__c\",\"Discount_percent__c\",\"Total_Discount__c\",\"Total_Invoice_AmountsOld__c\",\"X2014_Total_Invoice_AmountsOld__c\",\"Ship_to_Contact__c\",\"Sales_Tax2__c\",\"Tax2__c\",\"User__c\",\"Street__c\",\"City__c\",\"State__c\",\"Zip__c\",\"Country__c\",\"Indication__c\",\"User_Phone__c\",\"Need_by__c\",\"Related_Contract__c\",\"Invoice__c\",\"Accession_Date__c\",\"Reconciliation_Date__c\",\"Test_Order_Date__c\",\"Clinical_Sales_Territory__c\",\"Block__c\",\"Order_Detail__c\",\"Physician__c\",\"Sample_Quantity_Received__c\",\"Order_Received_Date__c\",\"Order_Value__c\",\"Sales_Territory__c\",\"Pharma_Sponsored__c\",\"Form_of_Payment_Received_or_Negotiated__c\",\"VAT__c\",\"Campaigns__c\",\"Purchase_Order_Record__c\",\"Broker_Account__c\",\"Sample_Lab_Location__c\",\"Physician_Full_Name__c\",\"Estimated_Invoice_Date__c\",\"dermoSEQ_Stage__c\",\"Sales_Credit_Date__c\",\"Broker_Tax_ID__c\",\"Broker_ID_Number__c\",\"Pharma__c\",\"Broker_Contact__c\",\"Sequencing_Completion_Deadline_Date__c\",\"Distributor__c\",\"Broker_Address__c\",\"Broker_Contact_Phone__c\",\"Broker_Contact_Email__c\",\"Ship_To_Contact_With_PO__c\",\"Extractions_Needed__c\",\"Attn_To__c\",\"Mouse_TCRB_Block__c\") VALUES (?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?)";
				java.sql.PreparedStatement pstmt_tPostgresqlOutput_2 = conn_tPostgresqlOutput_2
						.prepareStatement(insert_tPostgresqlOutput_2);

				/**
				 * [tPostgresqlOutput_2 begin ] stop
				 */

				/**
				 * [tSalesforceInput_2 begin ] start
				 */

				ok_Hash.put("tSalesforceInput_2", false);
				start_Hash
						.put("tSalesforceInput_2", System.currentTimeMillis());

				currentComponent = "tSalesforceInput_2";

				int tos_count_tSalesforceInput_2 = 0;

				int nb_line_tSalesforceInput_2 = 0;
				int limit_tSalesforceInput_2 = -1;
				System.setProperty("org.apache.commons.logging.Log",
						"org.apache.commons.logging.impl.NoOpLog");
				org.talend.salesforce.SforceConnection sforceConn_tSalesforceInput_2 = null;

				final String decryptedPassword_tSalesforceInput_2 = routines.system.PasswordEncryptUtil
						.decryptPassword("e1407a47965a9a143577d84771d1ba35fb585f6571da19148c9a430fa48f6f51f541553c89e6161f");
				sforceConn_tSalesforceInput_2 = new org.talend.salesforce.SforceBasicConnection.Builder(
						"https://login.salesforce.com/services/Soap/u/34.0",
						"pnatarajan@adaptivebiotech.com",
						decryptedPassword_tSalesforceInput_2).setTimeout(60000)
						.needCompression(false)

						.useHttpChunked(true).build();

				org.talend.salesforce.SforceManagement sfMgr_tSalesforceInput_2 = new org.talend.salesforce.SforceManagementImpl(
						sforceConn_tSalesforceInput_2);

				StringBuilder sql_tSalesforceInput_2 = new StringBuilder(
						"select ");
				sql_tSalesforceInput_2
						.append("Id,OwnerId,ContractId,AccountId,Pricebook2Id,OriginalOrderId,RecordTypeId,EffectiveDate,EndDate,IsReductionOrder,Status,Description,CustomerAuthorizedById,CustomerAuthorizedDate,CompanyAuthorizedById,CompanyAuthorizedDate,Type,BillingStreet,BillingCity,BillingState,BillingPostalCode,BillingCountry,BillingStateCode,BillingCountryCode,BillingLatitude,BillingLongitude,BillingAddress,ShippingStreet,ShippingCity,ShippingState,ShippingPostalCode,ShippingCountry,ShippingStateCode,ShippingCountryCode,ShippingLatitude,ShippingLongitude,ShippingAddress,Name,ActivatedDate,ActivatedById,StatusCode,CurrencyIsoCode,OrderNumber,TotalAmount,CreatedDate,CreatedById,LastModifiedDate,LastModifiedById,IsDeleted,SystemModstamp,LastViewedDate,LastReferencedDate,Data_Release_Date__c,ISO_Country_Code__c,Credit_Card_del__c,Invoice_1_Number__c,Invoice_2_Number__c,Invoice_3_Number__c,PO_Contact_Phone__c,Invoice_4_Number__c,Bill_To_Email__c,Order_Catagory__c,Other_Carrier_Tracking__c,Priority__c,Probability__c,Age__c,Report_Release_Date__c,Sample_Arrival_Date__c,Service_Order_Stage__c,Shipping_Handling__c,Data_Analysis_Group__c,Total_Order__c,Workspace_ID__c,clonoSEQ_Stage__c,Amount__c,PO_Contact_Email__c,PO_Number_c__c,Bill_To_Phone__c,Lead_Source__c,Invoice_1_Amount__c,Invoice_1_Revenue_Date__c,Invoice_2_Amount__c,Invoice_3_Amount__c,Invoice_3_Unearned_Revenue__c,Invoice_4_Amount__c,Locus__c,Turnaround_Days__c,Credit_Card__c,Sec_code__c,Order_Notes__c,Expiration__c,Billing_To_Name__c,Ship_To_Name__c,Related_Case__c,Related_Order__c,Resolution__c,Deadline_Date__c,Accounts_Payable_Contact_Email__c,Accounts_Payable_Contact_Phone__c,Sample_Rejection_Criteria__c,Sample_Rejection_Jeopardy__c,Ship_Attn_To_Email__c,PO_Receipt_Date__c,Quantity_Released__c,S_H_Tax__c,Total_Tax__c,Legal_Entity__c,Quote_No__c,Discount_percent__c,Total_Discount__c,Total_Invoice_AmountsOld__c,X2014_Total_Invoice_AmountsOld__c,Ship_to_Contact__c,Sales_Tax2__c,Tax2__c,User__c,Street__c,City__c,State__c,Zip__c,Country__c,Indication__c,User_Phone__c,Need_by__c,Related_Contract__c,Invoice__c,Accession_Date__c,Reconciliation_Date__c,Test_Order_Date__c,Clinical_Sales_Territory__c,Block__c,Order_Detail__c,Physician__c,Sample_Quantity_Received__c,Order_Received_Date__c,Order_Value__c,Sales_Territory__c,Pharma_Sponsored__c,Form_of_Payment_Received_or_Negotiated__c,VAT__c,Campaigns__c,Purchase_Order_Record__c,Broker_Account__c,Sample_Lab_Location__c,Physician_Full_Name__c,Estimated_Invoice_Date__c,dermoSEQ_Stage__c,Sales_Credit_Date__c,Broker_Tax_ID__c,Broker_ID_Number__c,Pharma__c,Broker_Contact__c,Sequencing_Completion_Deadline_Date__c,Distributor__c,Broker_Address__c,Broker_Contact_Phone__c,Broker_Contact_Email__c,Ship_To_Contact_With_PO__c,Extractions_Needed__c,Attn_To__c,Mouse_TCRB_Block__c");

				sql_tSalesforceInput_2.append(" from ");
				sql_tSalesforceInput_2.append("Order");

				String condition_tSalesforceInput_2 = "";
				if (condition_tSalesforceInput_2 != null
						&& !("".equals(condition_tSalesforceInput_2))) {
					sql_tSalesforceInput_2.append(" where ").append(
							condition_tSalesforceInput_2);
				}

				com.salesforce.soap.partner.QueryResult qr_tSalesforceInput_2 = null;

				qr_tSalesforceInput_2 = sfMgr_tSalesforceInput_2.query(
						sql_tSalesforceInput_2.toString(), new Integer(250));

				org.talend.salesforce.TopConfig.VALUE_DELIMITER = ";";
				org.talend.salesforce.TopConfig.COLUMNNAME_DELIMTER = "_";

				org.talend.salesforce.TopQueryResult topqr_tSalesforceInput_2 = null;
				topqr_tSalesforceInput_2 = new org.talend.salesforce.TopQueryResult();
				topqr_tSalesforceInput_2
						.processTopQueryResult(qr_tSalesforceInput_2);

				boolean bContinue_tSalesforceInput_2 = true;

				while (bContinue_tSalesforceInput_2
						&& qr_tSalesforceInput_2 != null
						&& qr_tSalesforceInput_2.getRecords() != null) {

					java.util.List<org.talend.salesforce.TopRecord> allTopRecords_tSalesforceInput_2 = topqr_tSalesforceInput_2
							.getAllTopRecords();
					// process the query results
					for (int i_tSalesforceInput_2 = 0; i_tSalesforceInput_2 < allTopRecords_tSalesforceInput_2
							.size(); i_tSalesforceInput_2++) {

						org.talend.salesforce.TopRecord topRecord_tSalesforceInput_2 = allTopRecords_tSalesforceInput_2
								.get(i_tSalesforceInput_2);

						nb_line_tSalesforceInput_2++;
						Object valueObj_tSalesforceInput_2 = null;

						// get the real value according the columnName
						valueObj_tSalesforceInput_2 = topRecord_tSalesforceInput_2
								.getValue("Id");
						if (valueObj_tSalesforceInput_2 != null) {
							String value_tSalesforceInput_2 = (String) valueObj_tSalesforceInput_2;

							row2.Id = value_tSalesforceInput_2;

						} else {
							row2.Id = null;
						}

						// get the real value according the columnName
						valueObj_tSalesforceInput_2 = topRecord_tSalesforceInput_2
								.getValue("OwnerId");
						if (valueObj_tSalesforceInput_2 != null) {
							String value_tSalesforceInput_2 = (String) valueObj_tSalesforceInput_2;

							row2.OwnerId = value_tSalesforceInput_2;

						} else {
							row2.OwnerId = null;
						}

						// get the real value according the columnName
						valueObj_tSalesforceInput_2 = topRecord_tSalesforceInput_2
								.getValue("ContractId");
						if (valueObj_tSalesforceInput_2 != null) {
							String value_tSalesforceInput_2 = (String) valueObj_tSalesforceInput_2;

							row2.ContractId = value_tSalesforceInput_2;

						} else {
							row2.ContractId = null;
						}

						// get the real value according the columnName
						valueObj_tSalesforceInput_2 = topRecord_tSalesforceInput_2
								.getValue("AccountId");
						if (valueObj_tSalesforceInput_2 != null) {
							String value_tSalesforceInput_2 = (String) valueObj_tSalesforceInput_2;

							row2.AccountId = value_tSalesforceInput_2;

						} else {
							row2.AccountId = null;
						}

						// get the real value according the columnName
						valueObj_tSalesforceInput_2 = topRecord_tSalesforceInput_2
								.getValue("Pricebook2Id");
						if (valueObj_tSalesforceInput_2 != null) {
							String value_tSalesforceInput_2 = (String) valueObj_tSalesforceInput_2;

							row2.Pricebook2Id = value_tSalesforceInput_2;

						} else {
							row2.Pricebook2Id = null;
						}

						// get the real value according the columnName
						valueObj_tSalesforceInput_2 = topRecord_tSalesforceInput_2
								.getValue("OriginalOrderId");
						if (valueObj_tSalesforceInput_2 != null) {
							String value_tSalesforceInput_2 = (String) valueObj_tSalesforceInput_2;

							row2.OriginalOrderId = value_tSalesforceInput_2;

						} else {
							row2.OriginalOrderId = null;
						}

						// get the real value according the columnName
						valueObj_tSalesforceInput_2 = topRecord_tSalesforceInput_2
								.getValue("RecordTypeId");
						if (valueObj_tSalesforceInput_2 != null) {
							String value_tSalesforceInput_2 = (String) valueObj_tSalesforceInput_2;

							row2.RecordTypeId = value_tSalesforceInput_2;

						} else {
							row2.RecordTypeId = null;
						}

						// get the real value according the columnName
						valueObj_tSalesforceInput_2 = topRecord_tSalesforceInput_2
								.getValue("EffectiveDate");
						if (valueObj_tSalesforceInput_2 != null) {
							String value_tSalesforceInput_2 = (String) valueObj_tSalesforceInput_2;

							row2.EffectiveDate = ParserUtils.parseTo_Date(
									value_tSalesforceInput_2, "yyyy-MM-dd");

						} else {
							row2.EffectiveDate = null;
						}

						// get the real value according the columnName
						valueObj_tSalesforceInput_2 = topRecord_tSalesforceInput_2
								.getValue("EndDate");
						if (valueObj_tSalesforceInput_2 != null) {
							String value_tSalesforceInput_2 = (String) valueObj_tSalesforceInput_2;

							row2.EndDate = ParserUtils.parseTo_Date(
									value_tSalesforceInput_2, "yyyy-MM-dd");

						} else {
							row2.EndDate = null;
						}

						// get the real value according the columnName
						valueObj_tSalesforceInput_2 = topRecord_tSalesforceInput_2
								.getValue("IsReductionOrder");
						if (valueObj_tSalesforceInput_2 != null) {
							String value_tSalesforceInput_2 = (String) valueObj_tSalesforceInput_2;

							row2.IsReductionOrder = ParserUtils
									.parseTo_Boolean(value_tSalesforceInput_2);

						} else {
							row2.IsReductionOrder = null;
						}

						// get the real value according the columnName
						valueObj_tSalesforceInput_2 = topRecord_tSalesforceInput_2
								.getValue("Status");
						if (valueObj_tSalesforceInput_2 != null) {
							String value_tSalesforceInput_2 = (String) valueObj_tSalesforceInput_2;

							row2.Status = value_tSalesforceInput_2;

						} else {
							row2.Status = null;
						}

						// get the real value according the columnName
						valueObj_tSalesforceInput_2 = topRecord_tSalesforceInput_2
								.getValue("Description");
						if (valueObj_tSalesforceInput_2 != null) {
							String value_tSalesforceInput_2 = (String) valueObj_tSalesforceInput_2;

							row2.Description = value_tSalesforceInput_2;

						} else {
							row2.Description = null;
						}

						// get the real value according the columnName
						valueObj_tSalesforceInput_2 = topRecord_tSalesforceInput_2
								.getValue("CustomerAuthorizedById");
						if (valueObj_tSalesforceInput_2 != null) {
							String value_tSalesforceInput_2 = (String) valueObj_tSalesforceInput_2;

							row2.CustomerAuthorizedById = value_tSalesforceInput_2;

						} else {
							row2.CustomerAuthorizedById = null;
						}

						// get the real value according the columnName
						valueObj_tSalesforceInput_2 = topRecord_tSalesforceInput_2
								.getValue("CustomerAuthorizedDate");
						if (valueObj_tSalesforceInput_2 != null) {
							String value_tSalesforceInput_2 = (String) valueObj_tSalesforceInput_2;

							row2.CustomerAuthorizedDate = ParserUtils
									.parseTo_Date(value_tSalesforceInput_2,
											"yyyy-MM-dd");

						} else {
							row2.CustomerAuthorizedDate = null;
						}

						// get the real value according the columnName
						valueObj_tSalesforceInput_2 = topRecord_tSalesforceInput_2
								.getValue("CompanyAuthorizedById");
						if (valueObj_tSalesforceInput_2 != null) {
							String value_tSalesforceInput_2 = (String) valueObj_tSalesforceInput_2;

							row2.CompanyAuthorizedById = value_tSalesforceInput_2;

						} else {
							row2.CompanyAuthorizedById = null;
						}

						// get the real value according the columnName
						valueObj_tSalesforceInput_2 = topRecord_tSalesforceInput_2
								.getValue("CompanyAuthorizedDate");
						if (valueObj_tSalesforceInput_2 != null) {
							String value_tSalesforceInput_2 = (String) valueObj_tSalesforceInput_2;

							row2.CompanyAuthorizedDate = ParserUtils
									.parseTo_Date(value_tSalesforceInput_2,
											"yyyy-MM-dd");

						} else {
							row2.CompanyAuthorizedDate = null;
						}

						// get the real value according the columnName
						valueObj_tSalesforceInput_2 = topRecord_tSalesforceInput_2
								.getValue("Type");
						if (valueObj_tSalesforceInput_2 != null) {
							String value_tSalesforceInput_2 = (String) valueObj_tSalesforceInput_2;

							row2.Type = value_tSalesforceInput_2;

						} else {
							row2.Type = null;
						}

						// get the real value according the columnName
						valueObj_tSalesforceInput_2 = topRecord_tSalesforceInput_2
								.getValue("BillingStreet");
						if (valueObj_tSalesforceInput_2 != null) {
							String value_tSalesforceInput_2 = (String) valueObj_tSalesforceInput_2;

							row2.BillingStreet = value_tSalesforceInput_2;

						} else {
							row2.BillingStreet = null;
						}

						// get the real value according the columnName
						valueObj_tSalesforceInput_2 = topRecord_tSalesforceInput_2
								.getValue("BillingCity");
						if (valueObj_tSalesforceInput_2 != null) {
							String value_tSalesforceInput_2 = (String) valueObj_tSalesforceInput_2;

							row2.BillingCity = value_tSalesforceInput_2;

						} else {
							row2.BillingCity = null;
						}

						// get the real value according the columnName
						valueObj_tSalesforceInput_2 = topRecord_tSalesforceInput_2
								.getValue("BillingState");
						if (valueObj_tSalesforceInput_2 != null) {
							String value_tSalesforceInput_2 = (String) valueObj_tSalesforceInput_2;

							row2.BillingState = value_tSalesforceInput_2;

						} else {
							row2.BillingState = null;
						}

						// get the real value according the columnName
						valueObj_tSalesforceInput_2 = topRecord_tSalesforceInput_2
								.getValue("BillingPostalCode");
						if (valueObj_tSalesforceInput_2 != null) {
							String value_tSalesforceInput_2 = (String) valueObj_tSalesforceInput_2;

							row2.BillingPostalCode = value_tSalesforceInput_2;

						} else {
							row2.BillingPostalCode = null;
						}

						// get the real value according the columnName
						valueObj_tSalesforceInput_2 = topRecord_tSalesforceInput_2
								.getValue("BillingCountry");
						if (valueObj_tSalesforceInput_2 != null) {
							String value_tSalesforceInput_2 = (String) valueObj_tSalesforceInput_2;

							row2.BillingCountry = value_tSalesforceInput_2;

						} else {
							row2.BillingCountry = null;
						}

						// get the real value according the columnName
						valueObj_tSalesforceInput_2 = topRecord_tSalesforceInput_2
								.getValue("BillingStateCode");
						if (valueObj_tSalesforceInput_2 != null) {
							String value_tSalesforceInput_2 = (String) valueObj_tSalesforceInput_2;

							row2.BillingStateCode = value_tSalesforceInput_2;

						} else {
							row2.BillingStateCode = null;
						}

						// get the real value according the columnName
						valueObj_tSalesforceInput_2 = topRecord_tSalesforceInput_2
								.getValue("BillingCountryCode");
						if (valueObj_tSalesforceInput_2 != null) {
							String value_tSalesforceInput_2 = (String) valueObj_tSalesforceInput_2;

							row2.BillingCountryCode = value_tSalesforceInput_2;

						} else {
							row2.BillingCountryCode = null;
						}

						// get the real value according the columnName
						valueObj_tSalesforceInput_2 = topRecord_tSalesforceInput_2
								.getValue("BillingLatitude");
						if (valueObj_tSalesforceInput_2 != null) {
							String value_tSalesforceInput_2 = (String) valueObj_tSalesforceInput_2;

							row2.BillingLatitude = ParserUtils
									.parseTo_Double(value_tSalesforceInput_2);

						} else {
							row2.BillingLatitude = null;
						}

						// get the real value according the columnName
						valueObj_tSalesforceInput_2 = topRecord_tSalesforceInput_2
								.getValue("BillingLongitude");
						if (valueObj_tSalesforceInput_2 != null) {
							String value_tSalesforceInput_2 = (String) valueObj_tSalesforceInput_2;

							row2.BillingLongitude = ParserUtils
									.parseTo_Double(value_tSalesforceInput_2);

						} else {
							row2.BillingLongitude = null;
						}

						// get the real value according the columnName
						valueObj_tSalesforceInput_2 = topRecord_tSalesforceInput_2
								.getValue("BillingAddress");
						if (valueObj_tSalesforceInput_2 != null) {
							String value_tSalesforceInput_2 = (String) valueObj_tSalesforceInput_2;

							row2.BillingAddress = value_tSalesforceInput_2;

						} else {
							row2.BillingAddress = null;
						}

						// get the real value according the columnName
						valueObj_tSalesforceInput_2 = topRecord_tSalesforceInput_2
								.getValue("ShippingStreet");
						if (valueObj_tSalesforceInput_2 != null) {
							String value_tSalesforceInput_2 = (String) valueObj_tSalesforceInput_2;

							row2.ShippingStreet = value_tSalesforceInput_2;

						} else {
							row2.ShippingStreet = null;
						}

						// get the real value according the columnName
						valueObj_tSalesforceInput_2 = topRecord_tSalesforceInput_2
								.getValue("ShippingCity");
						if (valueObj_tSalesforceInput_2 != null) {
							String value_tSalesforceInput_2 = (String) valueObj_tSalesforceInput_2;

							row2.ShippingCity = value_tSalesforceInput_2;

						} else {
							row2.ShippingCity = null;
						}

						// get the real value according the columnName
						valueObj_tSalesforceInput_2 = topRecord_tSalesforceInput_2
								.getValue("ShippingState");
						if (valueObj_tSalesforceInput_2 != null) {
							String value_tSalesforceInput_2 = (String) valueObj_tSalesforceInput_2;

							row2.ShippingState = value_tSalesforceInput_2;

						} else {
							row2.ShippingState = null;
						}

						// get the real value according the columnName
						valueObj_tSalesforceInput_2 = topRecord_tSalesforceInput_2
								.getValue("ShippingPostalCode");
						if (valueObj_tSalesforceInput_2 != null) {
							String value_tSalesforceInput_2 = (String) valueObj_tSalesforceInput_2;

							row2.ShippingPostalCode = value_tSalesforceInput_2;

						} else {
							row2.ShippingPostalCode = null;
						}

						// get the real value according the columnName
						valueObj_tSalesforceInput_2 = topRecord_tSalesforceInput_2
								.getValue("ShippingCountry");
						if (valueObj_tSalesforceInput_2 != null) {
							String value_tSalesforceInput_2 = (String) valueObj_tSalesforceInput_2;

							row2.ShippingCountry = value_tSalesforceInput_2;

						} else {
							row2.ShippingCountry = null;
						}

						// get the real value according the columnName
						valueObj_tSalesforceInput_2 = topRecord_tSalesforceInput_2
								.getValue("ShippingStateCode");
						if (valueObj_tSalesforceInput_2 != null) {
							String value_tSalesforceInput_2 = (String) valueObj_tSalesforceInput_2;

							row2.ShippingStateCode = value_tSalesforceInput_2;

						} else {
							row2.ShippingStateCode = null;
						}

						// get the real value according the columnName
						valueObj_tSalesforceInput_2 = topRecord_tSalesforceInput_2
								.getValue("ShippingCountryCode");
						if (valueObj_tSalesforceInput_2 != null) {
							String value_tSalesforceInput_2 = (String) valueObj_tSalesforceInput_2;

							row2.ShippingCountryCode = value_tSalesforceInput_2;

						} else {
							row2.ShippingCountryCode = null;
						}

						// get the real value according the columnName
						valueObj_tSalesforceInput_2 = topRecord_tSalesforceInput_2
								.getValue("ShippingLatitude");
						if (valueObj_tSalesforceInput_2 != null) {
							String value_tSalesforceInput_2 = (String) valueObj_tSalesforceInput_2;

							row2.ShippingLatitude = ParserUtils
									.parseTo_Double(value_tSalesforceInput_2);

						} else {
							row2.ShippingLatitude = null;
						}

						// get the real value according the columnName
						valueObj_tSalesforceInput_2 = topRecord_tSalesforceInput_2
								.getValue("ShippingLongitude");
						if (valueObj_tSalesforceInput_2 != null) {
							String value_tSalesforceInput_2 = (String) valueObj_tSalesforceInput_2;

							row2.ShippingLongitude = ParserUtils
									.parseTo_Double(value_tSalesforceInput_2);

						} else {
							row2.ShippingLongitude = null;
						}

						// get the real value according the columnName
						valueObj_tSalesforceInput_2 = topRecord_tSalesforceInput_2
								.getValue("ShippingAddress");
						if (valueObj_tSalesforceInput_2 != null) {
							String value_tSalesforceInput_2 = (String) valueObj_tSalesforceInput_2;

							row2.ShippingAddress = value_tSalesforceInput_2;

						} else {
							row2.ShippingAddress = null;
						}

						// get the real value according the columnName
						valueObj_tSalesforceInput_2 = topRecord_tSalesforceInput_2
								.getValue("Name");
						if (valueObj_tSalesforceInput_2 != null) {
							String value_tSalesforceInput_2 = (String) valueObj_tSalesforceInput_2;

							row2.Name = value_tSalesforceInput_2;

						} else {
							row2.Name = null;
						}

						// get the real value according the columnName
						valueObj_tSalesforceInput_2 = topRecord_tSalesforceInput_2
								.getValue("ActivatedDate");
						if (valueObj_tSalesforceInput_2 != null) {
							String value_tSalesforceInput_2 = (String) valueObj_tSalesforceInput_2;

							row2.ActivatedDate = ParserUtils.parseTo_Date(
									value_tSalesforceInput_2,
									"yyyy-MM-dd'T'HH:mm:ss'.000Z'");

						} else {
							row2.ActivatedDate = null;
						}

						// get the real value according the columnName
						valueObj_tSalesforceInput_2 = topRecord_tSalesforceInput_2
								.getValue("ActivatedById");
						if (valueObj_tSalesforceInput_2 != null) {
							String value_tSalesforceInput_2 = (String) valueObj_tSalesforceInput_2;

							row2.ActivatedById = value_tSalesforceInput_2;

						} else {
							row2.ActivatedById = null;
						}

						// get the real value according the columnName
						valueObj_tSalesforceInput_2 = topRecord_tSalesforceInput_2
								.getValue("StatusCode");
						if (valueObj_tSalesforceInput_2 != null) {
							String value_tSalesforceInput_2 = (String) valueObj_tSalesforceInput_2;

							row2.StatusCode = value_tSalesforceInput_2;

						} else {
							row2.StatusCode = null;
						}

						// get the real value according the columnName
						valueObj_tSalesforceInput_2 = topRecord_tSalesforceInput_2
								.getValue("CurrencyIsoCode");
						if (valueObj_tSalesforceInput_2 != null) {
							String value_tSalesforceInput_2 = (String) valueObj_tSalesforceInput_2;

							row2.CurrencyIsoCode = value_tSalesforceInput_2;

						} else {
							row2.CurrencyIsoCode = null;
						}

						// get the real value according the columnName
						valueObj_tSalesforceInput_2 = topRecord_tSalesforceInput_2
								.getValue("OrderNumber");
						if (valueObj_tSalesforceInput_2 != null) {
							String value_tSalesforceInput_2 = (String) valueObj_tSalesforceInput_2;

							row2.OrderNumber = value_tSalesforceInput_2;

						} else {
							row2.OrderNumber = null;
						}

						// get the real value according the columnName
						valueObj_tSalesforceInput_2 = topRecord_tSalesforceInput_2
								.getValue("TotalAmount");
						if (valueObj_tSalesforceInput_2 != null) {
							String value_tSalesforceInput_2 = (String) valueObj_tSalesforceInput_2;

							row2.TotalAmount = ParserUtils
									.parseTo_Double(value_tSalesforceInput_2);

						} else {
							row2.TotalAmount = null;
						}

						// get the real value according the columnName
						valueObj_tSalesforceInput_2 = topRecord_tSalesforceInput_2
								.getValue("CreatedDate");
						if (valueObj_tSalesforceInput_2 != null) {
							String value_tSalesforceInput_2 = (String) valueObj_tSalesforceInput_2;

							row2.CreatedDate = ParserUtils.parseTo_Date(
									value_tSalesforceInput_2,
									"yyyy-MM-dd'T'HH:mm:ss'.000Z'");

						} else {
							row2.CreatedDate = null;
						}

						// get the real value according the columnName
						valueObj_tSalesforceInput_2 = topRecord_tSalesforceInput_2
								.getValue("CreatedById");
						if (valueObj_tSalesforceInput_2 != null) {
							String value_tSalesforceInput_2 = (String) valueObj_tSalesforceInput_2;

							row2.CreatedById = value_tSalesforceInput_2;

						} else {
							row2.CreatedById = null;
						}

						// get the real value according the columnName
						valueObj_tSalesforceInput_2 = topRecord_tSalesforceInput_2
								.getValue("LastModifiedDate");
						if (valueObj_tSalesforceInput_2 != null) {
							String value_tSalesforceInput_2 = (String) valueObj_tSalesforceInput_2;

							row2.LastModifiedDate = ParserUtils.parseTo_Date(
									value_tSalesforceInput_2,
									"yyyy-MM-dd'T'HH:mm:ss'.000Z'");

						} else {
							row2.LastModifiedDate = null;
						}

						// get the real value according the columnName
						valueObj_tSalesforceInput_2 = topRecord_tSalesforceInput_2
								.getValue("LastModifiedById");
						if (valueObj_tSalesforceInput_2 != null) {
							String value_tSalesforceInput_2 = (String) valueObj_tSalesforceInput_2;

							row2.LastModifiedById = value_tSalesforceInput_2;

						} else {
							row2.LastModifiedById = null;
						}

						// get the real value according the columnName
						valueObj_tSalesforceInput_2 = topRecord_tSalesforceInput_2
								.getValue("IsDeleted");
						if (valueObj_tSalesforceInput_2 != null) {
							String value_tSalesforceInput_2 = (String) valueObj_tSalesforceInput_2;

							row2.IsDeleted = ParserUtils
									.parseTo_Boolean(value_tSalesforceInput_2);

						} else {
							row2.IsDeleted = null;
						}

						// get the real value according the columnName
						valueObj_tSalesforceInput_2 = topRecord_tSalesforceInput_2
								.getValue("SystemModstamp");
						if (valueObj_tSalesforceInput_2 != null) {
							String value_tSalesforceInput_2 = (String) valueObj_tSalesforceInput_2;

							row2.SystemModstamp = ParserUtils.parseTo_Date(
									value_tSalesforceInput_2,
									"yyyy-MM-dd'T'HH:mm:ss'.000Z'");

						} else {
							row2.SystemModstamp = null;
						}

						// get the real value according the columnName
						valueObj_tSalesforceInput_2 = topRecord_tSalesforceInput_2
								.getValue("LastViewedDate");
						if (valueObj_tSalesforceInput_2 != null) {
							String value_tSalesforceInput_2 = (String) valueObj_tSalesforceInput_2;

							row2.LastViewedDate = ParserUtils.parseTo_Date(
									value_tSalesforceInput_2,
									"yyyy-MM-dd'T'HH:mm:ss'.000Z'");

						} else {
							row2.LastViewedDate = null;
						}

						// get the real value according the columnName
						valueObj_tSalesforceInput_2 = topRecord_tSalesforceInput_2
								.getValue("LastReferencedDate");
						if (valueObj_tSalesforceInput_2 != null) {
							String value_tSalesforceInput_2 = (String) valueObj_tSalesforceInput_2;

							row2.LastReferencedDate = ParserUtils.parseTo_Date(
									value_tSalesforceInput_2,
									"yyyy-MM-dd'T'HH:mm:ss'.000Z'");

						} else {
							row2.LastReferencedDate = null;
						}

						// get the real value according the columnName
						valueObj_tSalesforceInput_2 = topRecord_tSalesforceInput_2
								.getValue("Data_Release_Date__c");
						if (valueObj_tSalesforceInput_2 != null) {
							String value_tSalesforceInput_2 = (String) valueObj_tSalesforceInput_2;

							row2.Data_Release_Date__c = ParserUtils
									.parseTo_Date(value_tSalesforceInput_2,
											"yyyy-MM-dd");

						} else {
							row2.Data_Release_Date__c = null;
						}

						// get the real value according the columnName
						valueObj_tSalesforceInput_2 = topRecord_tSalesforceInput_2
								.getValue("ISO_Country_Code__c");
						if (valueObj_tSalesforceInput_2 != null) {
							String value_tSalesforceInput_2 = (String) valueObj_tSalesforceInput_2;

							row2.ISO_Country_Code__c = value_tSalesforceInput_2;

						} else {
							row2.ISO_Country_Code__c = null;
						}

						// get the real value according the columnName
						valueObj_tSalesforceInput_2 = topRecord_tSalesforceInput_2
								.getValue("Credit_Card_del__c");
						if (valueObj_tSalesforceInput_2 != null) {
							String value_tSalesforceInput_2 = (String) valueObj_tSalesforceInput_2;

							row2.Credit_Card_del__c = value_tSalesforceInput_2;

						} else {
							row2.Credit_Card_del__c = null;
						}

						// get the real value according the columnName
						valueObj_tSalesforceInput_2 = topRecord_tSalesforceInput_2
								.getValue("Invoice_1_Number__c");
						if (valueObj_tSalesforceInput_2 != null) {
							String value_tSalesforceInput_2 = (String) valueObj_tSalesforceInput_2;

							row2.Invoice_1_Number__c = value_tSalesforceInput_2;

						} else {
							row2.Invoice_1_Number__c = null;
						}

						// get the real value according the columnName
						valueObj_tSalesforceInput_2 = topRecord_tSalesforceInput_2
								.getValue("Invoice_2_Number__c");
						if (valueObj_tSalesforceInput_2 != null) {
							String value_tSalesforceInput_2 = (String) valueObj_tSalesforceInput_2;

							row2.Invoice_2_Number__c = value_tSalesforceInput_2;

						} else {
							row2.Invoice_2_Number__c = null;
						}

						// get the real value according the columnName
						valueObj_tSalesforceInput_2 = topRecord_tSalesforceInput_2
								.getValue("Invoice_3_Number__c");
						if (valueObj_tSalesforceInput_2 != null) {
							String value_tSalesforceInput_2 = (String) valueObj_tSalesforceInput_2;

							row2.Invoice_3_Number__c = value_tSalesforceInput_2;

						} else {
							row2.Invoice_3_Number__c = null;
						}

						// get the real value according the columnName
						valueObj_tSalesforceInput_2 = topRecord_tSalesforceInput_2
								.getValue("PO_Contact_Phone__c");
						if (valueObj_tSalesforceInput_2 != null) {
							String value_tSalesforceInput_2 = (String) valueObj_tSalesforceInput_2;

							row2.PO_Contact_Phone__c = value_tSalesforceInput_2;

						} else {
							row2.PO_Contact_Phone__c = null;
						}

						// get the real value according the columnName
						valueObj_tSalesforceInput_2 = topRecord_tSalesforceInput_2
								.getValue("Invoice_4_Number__c");
						if (valueObj_tSalesforceInput_2 != null) {
							String value_tSalesforceInput_2 = (String) valueObj_tSalesforceInput_2;

							row2.Invoice_4_Number__c = value_tSalesforceInput_2;

						} else {
							row2.Invoice_4_Number__c = null;
						}

						// get the real value according the columnName
						valueObj_tSalesforceInput_2 = topRecord_tSalesforceInput_2
								.getValue("Bill_To_Email__c");
						if (valueObj_tSalesforceInput_2 != null) {
							String value_tSalesforceInput_2 = (String) valueObj_tSalesforceInput_2;

							row2.Bill_To_Email__c = value_tSalesforceInput_2;

						} else {
							row2.Bill_To_Email__c = null;
						}

						// get the real value according the columnName
						valueObj_tSalesforceInput_2 = topRecord_tSalesforceInput_2
								.getValue("Order_Catagory__c");
						if (valueObj_tSalesforceInput_2 != null) {
							String value_tSalesforceInput_2 = (String) valueObj_tSalesforceInput_2;

							row2.Order_Catagory__c = value_tSalesforceInput_2;

						} else {
							row2.Order_Catagory__c = null;
						}

						// get the real value according the columnName
						valueObj_tSalesforceInput_2 = topRecord_tSalesforceInput_2
								.getValue("Other_Carrier_Tracking__c");
						if (valueObj_tSalesforceInput_2 != null) {
							String value_tSalesforceInput_2 = (String) valueObj_tSalesforceInput_2;

							row2.Other_Carrier_Tracking__c = value_tSalesforceInput_2;

						} else {
							row2.Other_Carrier_Tracking__c = null;
						}

						// get the real value according the columnName
						valueObj_tSalesforceInput_2 = topRecord_tSalesforceInput_2
								.getValue("Priority__c");
						if (valueObj_tSalesforceInput_2 != null) {
							String value_tSalesforceInput_2 = (String) valueObj_tSalesforceInput_2;

							row2.Priority__c = value_tSalesforceInput_2;

						} else {
							row2.Priority__c = null;
						}

						// get the real value according the columnName
						valueObj_tSalesforceInput_2 = topRecord_tSalesforceInput_2
								.getValue("Probability__c");
						if (valueObj_tSalesforceInput_2 != null) {
							String value_tSalesforceInput_2 = (String) valueObj_tSalesforceInput_2;

							row2.Probability__c = value_tSalesforceInput_2;

						} else {
							row2.Probability__c = null;
						}

						// get the real value according the columnName
						valueObj_tSalesforceInput_2 = topRecord_tSalesforceInput_2
								.getValue("Age__c");
						if (valueObj_tSalesforceInput_2 != null) {
							String value_tSalesforceInput_2 = (String) valueObj_tSalesforceInput_2;

							row2.Age__c = ParserUtils
									.parseTo_Double(value_tSalesforceInput_2);

						} else {
							row2.Age__c = null;
						}

						// get the real value according the columnName
						valueObj_tSalesforceInput_2 = topRecord_tSalesforceInput_2
								.getValue("Report_Release_Date__c");
						if (valueObj_tSalesforceInput_2 != null) {
							String value_tSalesforceInput_2 = (String) valueObj_tSalesforceInput_2;

							row2.Report_Release_Date__c = ParserUtils
									.parseTo_Date(value_tSalesforceInput_2,
											"yyyy-MM-dd");

						} else {
							row2.Report_Release_Date__c = null;
						}

						// get the real value according the columnName
						valueObj_tSalesforceInput_2 = topRecord_tSalesforceInput_2
								.getValue("Sample_Arrival_Date__c");
						if (valueObj_tSalesforceInput_2 != null) {
							String value_tSalesforceInput_2 = (String) valueObj_tSalesforceInput_2;

							row2.Sample_Arrival_Date__c = ParserUtils
									.parseTo_Date(value_tSalesforceInput_2,
											"yyyy-MM-dd");

						} else {
							row2.Sample_Arrival_Date__c = null;
						}

						// get the real value according the columnName
						valueObj_tSalesforceInput_2 = topRecord_tSalesforceInput_2
								.getValue("Service_Order_Stage__c");
						if (valueObj_tSalesforceInput_2 != null) {
							String value_tSalesforceInput_2 = (String) valueObj_tSalesforceInput_2;

							row2.Service_Order_Stage__c = value_tSalesforceInput_2;

						} else {
							row2.Service_Order_Stage__c = null;
						}

						// get the real value according the columnName
						valueObj_tSalesforceInput_2 = topRecord_tSalesforceInput_2
								.getValue("Shipping_Handling__c");
						if (valueObj_tSalesforceInput_2 != null) {
							String value_tSalesforceInput_2 = (String) valueObj_tSalesforceInput_2;

							row2.Shipping_Handling__c = ParserUtils
									.parseTo_Double(value_tSalesforceInput_2);

						} else {
							row2.Shipping_Handling__c = null;
						}

						// get the real value according the columnName
						valueObj_tSalesforceInput_2 = topRecord_tSalesforceInput_2
								.getValue("Data_Analysis_Group__c");
						if (valueObj_tSalesforceInput_2 != null) {
							String value_tSalesforceInput_2 = (String) valueObj_tSalesforceInput_2;

							row2.Data_Analysis_Group__c = value_tSalesforceInput_2;

						} else {
							row2.Data_Analysis_Group__c = null;
						}

						// get the real value according the columnName
						valueObj_tSalesforceInput_2 = topRecord_tSalesforceInput_2
								.getValue("Total_Order__c");
						if (valueObj_tSalesforceInput_2 != null) {
							String value_tSalesforceInput_2 = (String) valueObj_tSalesforceInput_2;

							row2.Total_Order__c = ParserUtils
									.parseTo_Double(value_tSalesforceInput_2);

						} else {
							row2.Total_Order__c = null;
						}

						// get the real value according the columnName
						valueObj_tSalesforceInput_2 = topRecord_tSalesforceInput_2
								.getValue("Workspace_ID__c");
						if (valueObj_tSalesforceInput_2 != null) {
							String value_tSalesforceInput_2 = (String) valueObj_tSalesforceInput_2;

							row2.Workspace_ID__c = value_tSalesforceInput_2;

						} else {
							row2.Workspace_ID__c = null;
						}

						// get the real value according the columnName
						valueObj_tSalesforceInput_2 = topRecord_tSalesforceInput_2
								.getValue("clonoSEQ_Stage__c");
						if (valueObj_tSalesforceInput_2 != null) {
							String value_tSalesforceInput_2 = (String) valueObj_tSalesforceInput_2;

							row2.clonoSEQ_Stage__c = value_tSalesforceInput_2;

						} else {
							row2.clonoSEQ_Stage__c = null;
						}

						// get the real value according the columnName
						valueObj_tSalesforceInput_2 = topRecord_tSalesforceInput_2
								.getValue("Amount__c");
						if (valueObj_tSalesforceInput_2 != null) {
							String value_tSalesforceInput_2 = (String) valueObj_tSalesforceInput_2;

							row2.Amount__c = ParserUtils
									.parseTo_Double(value_tSalesforceInput_2);

						} else {
							row2.Amount__c = null;
						}

						// get the real value according the columnName
						valueObj_tSalesforceInput_2 = topRecord_tSalesforceInput_2
								.getValue("PO_Contact_Email__c");
						if (valueObj_tSalesforceInput_2 != null) {
							String value_tSalesforceInput_2 = (String) valueObj_tSalesforceInput_2;

							row2.PO_Contact_Email__c = value_tSalesforceInput_2;

						} else {
							row2.PO_Contact_Email__c = null;
						}

						// get the real value according the columnName
						valueObj_tSalesforceInput_2 = topRecord_tSalesforceInput_2
								.getValue("PO_Number_c__c");
						if (valueObj_tSalesforceInput_2 != null) {
							String value_tSalesforceInput_2 = (String) valueObj_tSalesforceInput_2;

							row2.PO_Number_c__c = value_tSalesforceInput_2;

						} else {
							row2.PO_Number_c__c = null;
						}

						// get the real value according the columnName
						valueObj_tSalesforceInput_2 = topRecord_tSalesforceInput_2
								.getValue("Bill_To_Phone__c");
						if (valueObj_tSalesforceInput_2 != null) {
							String value_tSalesforceInput_2 = (String) valueObj_tSalesforceInput_2;

							row2.Bill_To_Phone__c = value_tSalesforceInput_2;

						} else {
							row2.Bill_To_Phone__c = null;
						}

						// get the real value according the columnName
						valueObj_tSalesforceInput_2 = topRecord_tSalesforceInput_2
								.getValue("Lead_Source__c");
						if (valueObj_tSalesforceInput_2 != null) {
							String value_tSalesforceInput_2 = (String) valueObj_tSalesforceInput_2;

							row2.Lead_Source__c = value_tSalesforceInput_2;

						} else {
							row2.Lead_Source__c = null;
						}

						// get the real value according the columnName
						valueObj_tSalesforceInput_2 = topRecord_tSalesforceInput_2
								.getValue("Invoice_1_Amount__c");
						if (valueObj_tSalesforceInput_2 != null) {
							String value_tSalesforceInput_2 = (String) valueObj_tSalesforceInput_2;

							row2.Invoice_1_Amount__c = ParserUtils
									.parseTo_Double(value_tSalesforceInput_2);

						} else {
							row2.Invoice_1_Amount__c = null;
						}

						// get the real value according the columnName
						valueObj_tSalesforceInput_2 = topRecord_tSalesforceInput_2
								.getValue("Invoice_1_Revenue_Date__c");
						if (valueObj_tSalesforceInput_2 != null) {
							String value_tSalesforceInput_2 = (String) valueObj_tSalesforceInput_2;

							row2.Invoice_1_Revenue_Date__c = ParserUtils
									.parseTo_Date(value_tSalesforceInput_2,
											"yyyy-MM-dd");

						} else {
							row2.Invoice_1_Revenue_Date__c = null;
						}

						// get the real value according the columnName
						valueObj_tSalesforceInput_2 = topRecord_tSalesforceInput_2
								.getValue("Invoice_2_Amount__c");
						if (valueObj_tSalesforceInput_2 != null) {
							String value_tSalesforceInput_2 = (String) valueObj_tSalesforceInput_2;

							row2.Invoice_2_Amount__c = ParserUtils
									.parseTo_Double(value_tSalesforceInput_2);

						} else {
							row2.Invoice_2_Amount__c = null;
						}

						// get the real value according the columnName
						valueObj_tSalesforceInput_2 = topRecord_tSalesforceInput_2
								.getValue("Invoice_3_Amount__c");
						if (valueObj_tSalesforceInput_2 != null) {
							String value_tSalesforceInput_2 = (String) valueObj_tSalesforceInput_2;

							row2.Invoice_3_Amount__c = ParserUtils
									.parseTo_Double(value_tSalesforceInput_2);

						} else {
							row2.Invoice_3_Amount__c = null;
						}

						// get the real value according the columnName
						valueObj_tSalesforceInput_2 = topRecord_tSalesforceInput_2
								.getValue("Invoice_3_Unearned_Revenue__c");
						if (valueObj_tSalesforceInput_2 != null) {
							String value_tSalesforceInput_2 = (String) valueObj_tSalesforceInput_2;

							row2.Invoice_3_Unearned_Revenue__c = ParserUtils
									.parseTo_Boolean(value_tSalesforceInput_2);

						} else {
							row2.Invoice_3_Unearned_Revenue__c = null;
						}

						// get the real value according the columnName
						valueObj_tSalesforceInput_2 = topRecord_tSalesforceInput_2
								.getValue("Invoice_4_Amount__c");
						if (valueObj_tSalesforceInput_2 != null) {
							String value_tSalesforceInput_2 = (String) valueObj_tSalesforceInput_2;

							row2.Invoice_4_Amount__c = ParserUtils
									.parseTo_Double(value_tSalesforceInput_2);

						} else {
							row2.Invoice_4_Amount__c = null;
						}

						// get the real value according the columnName
						valueObj_tSalesforceInput_2 = topRecord_tSalesforceInput_2
								.getValue("Locus__c");
						if (valueObj_tSalesforceInput_2 != null) {
							String value_tSalesforceInput_2 = (String) valueObj_tSalesforceInput_2;

							row2.Locus__c = value_tSalesforceInput_2;

						} else {
							row2.Locus__c = null;
						}

						// get the real value according the columnName
						valueObj_tSalesforceInput_2 = topRecord_tSalesforceInput_2
								.getValue("Turnaround_Days__c");
						if (valueObj_tSalesforceInput_2 != null) {
							String value_tSalesforceInput_2 = (String) valueObj_tSalesforceInput_2;

							row2.Turnaround_Days__c = ParserUtils
									.parseTo_Double(value_tSalesforceInput_2);

						} else {
							row2.Turnaround_Days__c = null;
						}

						// get the real value according the columnName
						valueObj_tSalesforceInput_2 = topRecord_tSalesforceInput_2
								.getValue("Credit_Card__c");
						if (valueObj_tSalesforceInput_2 != null) {
							String value_tSalesforceInput_2 = (String) valueObj_tSalesforceInput_2;

							row2.Credit_Card__c = value_tSalesforceInput_2;

						} else {
							row2.Credit_Card__c = null;
						}

						// get the real value according the columnName
						valueObj_tSalesforceInput_2 = topRecord_tSalesforceInput_2
								.getValue("Sec_code__c");
						if (valueObj_tSalesforceInput_2 != null) {
							String value_tSalesforceInput_2 = (String) valueObj_tSalesforceInput_2;

							row2.Sec_code__c = value_tSalesforceInput_2;

						} else {
							row2.Sec_code__c = null;
						}

						// get the real value according the columnName
						valueObj_tSalesforceInput_2 = topRecord_tSalesforceInput_2
								.getValue("Order_Notes__c");
						if (valueObj_tSalesforceInput_2 != null) {
							String value_tSalesforceInput_2 = (String) valueObj_tSalesforceInput_2;

							row2.Order_Notes__c = value_tSalesforceInput_2;

						} else {
							row2.Order_Notes__c = null;
						}

						// get the real value according the columnName
						valueObj_tSalesforceInput_2 = topRecord_tSalesforceInput_2
								.getValue("Expiration__c");
						if (valueObj_tSalesforceInput_2 != null) {
							String value_tSalesforceInput_2 = (String) valueObj_tSalesforceInput_2;

							row2.Expiration__c = value_tSalesforceInput_2;

						} else {
							row2.Expiration__c = null;
						}

						// get the real value according the columnName
						valueObj_tSalesforceInput_2 = topRecord_tSalesforceInput_2
								.getValue("Billing_To_Name__c");
						if (valueObj_tSalesforceInput_2 != null) {
							String value_tSalesforceInput_2 = (String) valueObj_tSalesforceInput_2;

							row2.Billing_To_Name__c = value_tSalesforceInput_2;

						} else {
							row2.Billing_To_Name__c = null;
						}

						// get the real value according the columnName
						valueObj_tSalesforceInput_2 = topRecord_tSalesforceInput_2
								.getValue("Ship_To_Name__c");
						if (valueObj_tSalesforceInput_2 != null) {
							String value_tSalesforceInput_2 = (String) valueObj_tSalesforceInput_2;

							row2.Ship_To_Name__c = value_tSalesforceInput_2;

						} else {
							row2.Ship_To_Name__c = null;
						}

						// get the real value according the columnName
						valueObj_tSalesforceInput_2 = topRecord_tSalesforceInput_2
								.getValue("Related_Case__c");
						if (valueObj_tSalesforceInput_2 != null) {
							String value_tSalesforceInput_2 = (String) valueObj_tSalesforceInput_2;

							row2.Related_Case__c = value_tSalesforceInput_2;

						} else {
							row2.Related_Case__c = null;
						}

						// get the real value according the columnName
						valueObj_tSalesforceInput_2 = topRecord_tSalesforceInput_2
								.getValue("Related_Order__c");
						if (valueObj_tSalesforceInput_2 != null) {
							String value_tSalesforceInput_2 = (String) valueObj_tSalesforceInput_2;

							row2.Related_Order__c = value_tSalesforceInput_2;

						} else {
							row2.Related_Order__c = null;
						}

						// get the real value according the columnName
						valueObj_tSalesforceInput_2 = topRecord_tSalesforceInput_2
								.getValue("Resolution__c");
						if (valueObj_tSalesforceInput_2 != null) {
							String value_tSalesforceInput_2 = (String) valueObj_tSalesforceInput_2;

							row2.Resolution__c = value_tSalesforceInput_2;

						} else {
							row2.Resolution__c = null;
						}

						// get the real value according the columnName
						valueObj_tSalesforceInput_2 = topRecord_tSalesforceInput_2
								.getValue("Deadline_Date__c");
						if (valueObj_tSalesforceInput_2 != null) {
							String value_tSalesforceInput_2 = (String) valueObj_tSalesforceInput_2;

							row2.Deadline_Date__c = ParserUtils.parseTo_Date(
									value_tSalesforceInput_2, "yyyy-MM-dd");

						} else {
							row2.Deadline_Date__c = null;
						}

						// get the real value according the columnName
						valueObj_tSalesforceInput_2 = topRecord_tSalesforceInput_2
								.getValue("Accounts_Payable_Contact_Email__c");
						if (valueObj_tSalesforceInput_2 != null) {
							String value_tSalesforceInput_2 = (String) valueObj_tSalesforceInput_2;

							row2.Accounts_Payable_Contact_Email__c = value_tSalesforceInput_2;

						} else {
							row2.Accounts_Payable_Contact_Email__c = null;
						}

						// get the real value according the columnName
						valueObj_tSalesforceInput_2 = topRecord_tSalesforceInput_2
								.getValue("Accounts_Payable_Contact_Phone__c");
						if (valueObj_tSalesforceInput_2 != null) {
							String value_tSalesforceInput_2 = (String) valueObj_tSalesforceInput_2;

							row2.Accounts_Payable_Contact_Phone__c = value_tSalesforceInput_2;

						} else {
							row2.Accounts_Payable_Contact_Phone__c = null;
						}

						// get the real value according the columnName
						valueObj_tSalesforceInput_2 = topRecord_tSalesforceInput_2
								.getValue("Sample_Rejection_Criteria__c");
						if (valueObj_tSalesforceInput_2 != null) {
							String value_tSalesforceInput_2 = (String) valueObj_tSalesforceInput_2;

							row2.Sample_Rejection_Criteria__c = value_tSalesforceInput_2;

						} else {
							row2.Sample_Rejection_Criteria__c = null;
						}

						// get the real value according the columnName
						valueObj_tSalesforceInput_2 = topRecord_tSalesforceInput_2
								.getValue("Sample_Rejection_Jeopardy__c");
						if (valueObj_tSalesforceInput_2 != null) {
							String value_tSalesforceInput_2 = (String) valueObj_tSalesforceInput_2;

							row2.Sample_Rejection_Jeopardy__c = ParserUtils
									.parseTo_Boolean(value_tSalesforceInput_2);

						} else {
							row2.Sample_Rejection_Jeopardy__c = null;
						}

						// get the real value according the columnName
						valueObj_tSalesforceInput_2 = topRecord_tSalesforceInput_2
								.getValue("Ship_Attn_To_Email__c");
						if (valueObj_tSalesforceInput_2 != null) {
							String value_tSalesforceInput_2 = (String) valueObj_tSalesforceInput_2;

							row2.Ship_Attn_To_Email__c = value_tSalesforceInput_2;

						} else {
							row2.Ship_Attn_To_Email__c = null;
						}

						// get the real value according the columnName
						valueObj_tSalesforceInput_2 = topRecord_tSalesforceInput_2
								.getValue("PO_Receipt_Date__c");
						if (valueObj_tSalesforceInput_2 != null) {
							String value_tSalesforceInput_2 = (String) valueObj_tSalesforceInput_2;

							row2.PO_Receipt_Date__c = ParserUtils.parseTo_Date(
									value_tSalesforceInput_2, "yyyy-MM-dd");

						} else {
							row2.PO_Receipt_Date__c = null;
						}

						// get the real value according the columnName
						valueObj_tSalesforceInput_2 = topRecord_tSalesforceInput_2
								.getValue("Quantity_Released__c");
						if (valueObj_tSalesforceInput_2 != null) {
							String value_tSalesforceInput_2 = (String) valueObj_tSalesforceInput_2;

							row2.Quantity_Released__c = ParserUtils
									.parseTo_Double(value_tSalesforceInput_2);

						} else {
							row2.Quantity_Released__c = null;
						}

						// get the real value according the columnName
						valueObj_tSalesforceInput_2 = topRecord_tSalesforceInput_2
								.getValue("S_H_Tax__c");
						if (valueObj_tSalesforceInput_2 != null) {
							String value_tSalesforceInput_2 = (String) valueObj_tSalesforceInput_2;

							row2.S_H_Tax__c = ParserUtils
									.parseTo_Double(value_tSalesforceInput_2);

						} else {
							row2.S_H_Tax__c = null;
						}

						// get the real value according the columnName
						valueObj_tSalesforceInput_2 = topRecord_tSalesforceInput_2
								.getValue("Total_Tax__c");
						if (valueObj_tSalesforceInput_2 != null) {
							String value_tSalesforceInput_2 = (String) valueObj_tSalesforceInput_2;

							row2.Total_Tax__c = ParserUtils
									.parseTo_Double(value_tSalesforceInput_2);

						} else {
							row2.Total_Tax__c = null;
						}

						// get the real value according the columnName
						valueObj_tSalesforceInput_2 = topRecord_tSalesforceInput_2
								.getValue("Legal_Entity__c");
						if (valueObj_tSalesforceInput_2 != null) {
							String value_tSalesforceInput_2 = (String) valueObj_tSalesforceInput_2;

							row2.Legal_Entity__c = value_tSalesforceInput_2;

						} else {
							row2.Legal_Entity__c = null;
						}

						// get the real value according the columnName
						valueObj_tSalesforceInput_2 = topRecord_tSalesforceInput_2
								.getValue("Quote_No__c");
						if (valueObj_tSalesforceInput_2 != null) {
							String value_tSalesforceInput_2 = (String) valueObj_tSalesforceInput_2;

							row2.Quote_No__c = value_tSalesforceInput_2;

						} else {
							row2.Quote_No__c = null;
						}

						// get the real value according the columnName
						valueObj_tSalesforceInput_2 = topRecord_tSalesforceInput_2
								.getValue("Discount_percent__c");
						if (valueObj_tSalesforceInput_2 != null) {
							String value_tSalesforceInput_2 = (String) valueObj_tSalesforceInput_2;

							row2.Discount_percent__c = ParserUtils
									.parseTo_Double(value_tSalesforceInput_2);

						} else {
							row2.Discount_percent__c = null;
						}

						// get the real value according the columnName
						valueObj_tSalesforceInput_2 = topRecord_tSalesforceInput_2
								.getValue("Total_Discount__c");
						if (valueObj_tSalesforceInput_2 != null) {
							String value_tSalesforceInput_2 = (String) valueObj_tSalesforceInput_2;

							row2.Total_Discount__c = ParserUtils
									.parseTo_Double(value_tSalesforceInput_2);

						} else {
							row2.Total_Discount__c = null;
						}

						// get the real value according the columnName
						valueObj_tSalesforceInput_2 = topRecord_tSalesforceInput_2
								.getValue("Total_Invoice_AmountsOld__c");
						if (valueObj_tSalesforceInput_2 != null) {
							String value_tSalesforceInput_2 = (String) valueObj_tSalesforceInput_2;

							row2.Total_Invoice_AmountsOld__c = ParserUtils
									.parseTo_Double(value_tSalesforceInput_2);

						} else {
							row2.Total_Invoice_AmountsOld__c = null;
						}

						// get the real value according the columnName
						valueObj_tSalesforceInput_2 = topRecord_tSalesforceInput_2
								.getValue("X2014_Total_Invoice_AmountsOld__c");
						if (valueObj_tSalesforceInput_2 != null) {
							String value_tSalesforceInput_2 = (String) valueObj_tSalesforceInput_2;

							row2.X2014_Total_Invoice_AmountsOld__c = ParserUtils
									.parseTo_Double(value_tSalesforceInput_2);

						} else {
							row2.X2014_Total_Invoice_AmountsOld__c = null;
						}

						// get the real value according the columnName
						valueObj_tSalesforceInput_2 = topRecord_tSalesforceInput_2
								.getValue("Ship_to_Contact__c");
						if (valueObj_tSalesforceInput_2 != null) {
							String value_tSalesforceInput_2 = (String) valueObj_tSalesforceInput_2;

							row2.Ship_to_Contact__c = value_tSalesforceInput_2;

						} else {
							row2.Ship_to_Contact__c = null;
						}

						// get the real value according the columnName
						valueObj_tSalesforceInput_2 = topRecord_tSalesforceInput_2
								.getValue("Sales_Tax2__c");
						if (valueObj_tSalesforceInput_2 != null) {
							String value_tSalesforceInput_2 = (String) valueObj_tSalesforceInput_2;

							row2.Sales_Tax2__c = ParserUtils
									.parseTo_Double(value_tSalesforceInput_2);

						} else {
							row2.Sales_Tax2__c = null;
						}

						// get the real value according the columnName
						valueObj_tSalesforceInput_2 = topRecord_tSalesforceInput_2
								.getValue("Tax2__c");
						if (valueObj_tSalesforceInput_2 != null) {
							String value_tSalesforceInput_2 = (String) valueObj_tSalesforceInput_2;

							row2.Tax2__c = ParserUtils
									.parseTo_Double(value_tSalesforceInput_2);

						} else {
							row2.Tax2__c = null;
						}

						// get the real value according the columnName
						valueObj_tSalesforceInput_2 = topRecord_tSalesforceInput_2
								.getValue("User__c");
						if (valueObj_tSalesforceInput_2 != null) {
							String value_tSalesforceInput_2 = (String) valueObj_tSalesforceInput_2;

							row2.User__c = value_tSalesforceInput_2;

						} else {
							row2.User__c = null;
						}

						// get the real value according the columnName
						valueObj_tSalesforceInput_2 = topRecord_tSalesforceInput_2
								.getValue("Street__c");
						if (valueObj_tSalesforceInput_2 != null) {
							String value_tSalesforceInput_2 = (String) valueObj_tSalesforceInput_2;

							row2.Street__c = value_tSalesforceInput_2;

						} else {
							row2.Street__c = null;
						}

						// get the real value according the columnName
						valueObj_tSalesforceInput_2 = topRecord_tSalesforceInput_2
								.getValue("City__c");
						if (valueObj_tSalesforceInput_2 != null) {
							String value_tSalesforceInput_2 = (String) valueObj_tSalesforceInput_2;

							row2.City__c = value_tSalesforceInput_2;

						} else {
							row2.City__c = null;
						}

						// get the real value according the columnName
						valueObj_tSalesforceInput_2 = topRecord_tSalesforceInput_2
								.getValue("State__c");
						if (valueObj_tSalesforceInput_2 != null) {
							String value_tSalesforceInput_2 = (String) valueObj_tSalesforceInput_2;

							row2.State__c = value_tSalesforceInput_2;

						} else {
							row2.State__c = null;
						}

						// get the real value according the columnName
						valueObj_tSalesforceInput_2 = topRecord_tSalesforceInput_2
								.getValue("Zip__c");
						if (valueObj_tSalesforceInput_2 != null) {
							String value_tSalesforceInput_2 = (String) valueObj_tSalesforceInput_2;

							row2.Zip__c = value_tSalesforceInput_2;

						} else {
							row2.Zip__c = null;
						}

						// get the real value according the columnName
						valueObj_tSalesforceInput_2 = topRecord_tSalesforceInput_2
								.getValue("Country__c");
						if (valueObj_tSalesforceInput_2 != null) {
							String value_tSalesforceInput_2 = (String) valueObj_tSalesforceInput_2;

							row2.Country__c = value_tSalesforceInput_2;

						} else {
							row2.Country__c = null;
						}

						// get the real value according the columnName
						valueObj_tSalesforceInput_2 = topRecord_tSalesforceInput_2
								.getValue("Indication__c");
						if (valueObj_tSalesforceInput_2 != null) {
							String value_tSalesforceInput_2 = (String) valueObj_tSalesforceInput_2;

							row2.Indication__c = value_tSalesforceInput_2;

						} else {
							row2.Indication__c = null;
						}

						// get the real value according the columnName
						valueObj_tSalesforceInput_2 = topRecord_tSalesforceInput_2
								.getValue("User_Phone__c");
						if (valueObj_tSalesforceInput_2 != null) {
							String value_tSalesforceInput_2 = (String) valueObj_tSalesforceInput_2;

							row2.User_Phone__c = value_tSalesforceInput_2;

						} else {
							row2.User_Phone__c = null;
						}

						// get the real value according the columnName
						valueObj_tSalesforceInput_2 = topRecord_tSalesforceInput_2
								.getValue("Need_by__c");
						if (valueObj_tSalesforceInput_2 != null) {
							String value_tSalesforceInput_2 = (String) valueObj_tSalesforceInput_2;

							row2.Need_by__c = ParserUtils.parseTo_Date(
									value_tSalesforceInput_2,
									"yyyy-MM-dd'T'HH:mm:ss'.000Z'");

						} else {
							row2.Need_by__c = null;
						}

						// get the real value according the columnName
						valueObj_tSalesforceInput_2 = topRecord_tSalesforceInput_2
								.getValue("Related_Contract__c");
						if (valueObj_tSalesforceInput_2 != null) {
							String value_tSalesforceInput_2 = (String) valueObj_tSalesforceInput_2;

							row2.Related_Contract__c = value_tSalesforceInput_2;

						} else {
							row2.Related_Contract__c = null;
						}

						// get the real value according the columnName
						valueObj_tSalesforceInput_2 = topRecord_tSalesforceInput_2
								.getValue("Invoice__c");
						if (valueObj_tSalesforceInput_2 != null) {
							String value_tSalesforceInput_2 = (String) valueObj_tSalesforceInput_2;

							row2.Invoice__c = ParserUtils
									.parseTo_Boolean(value_tSalesforceInput_2);

						} else {
							row2.Invoice__c = null;
						}

						// get the real value according the columnName
						valueObj_tSalesforceInput_2 = topRecord_tSalesforceInput_2
								.getValue("Accession_Date__c");
						if (valueObj_tSalesforceInput_2 != null) {
							String value_tSalesforceInput_2 = (String) valueObj_tSalesforceInput_2;

							row2.Accession_Date__c = ParserUtils.parseTo_Date(
									value_tSalesforceInput_2, "yyyy-MM-dd");

						} else {
							row2.Accession_Date__c = null;
						}

						// get the real value according the columnName
						valueObj_tSalesforceInput_2 = topRecord_tSalesforceInput_2
								.getValue("Reconciliation_Date__c");
						if (valueObj_tSalesforceInput_2 != null) {
							String value_tSalesforceInput_2 = (String) valueObj_tSalesforceInput_2;

							row2.Reconciliation_Date__c = ParserUtils
									.parseTo_Date(value_tSalesforceInput_2,
											"yyyy-MM-dd");

						} else {
							row2.Reconciliation_Date__c = null;
						}

						// get the real value according the columnName
						valueObj_tSalesforceInput_2 = topRecord_tSalesforceInput_2
								.getValue("Test_Order_Date__c");
						if (valueObj_tSalesforceInput_2 != null) {
							String value_tSalesforceInput_2 = (String) valueObj_tSalesforceInput_2;

							row2.Test_Order_Date__c = ParserUtils.parseTo_Date(
									value_tSalesforceInput_2, "yyyy-MM-dd");

						} else {
							row2.Test_Order_Date__c = null;
						}

						// get the real value according the columnName
						valueObj_tSalesforceInput_2 = topRecord_tSalesforceInput_2
								.getValue("Clinical_Sales_Territory__c");
						if (valueObj_tSalesforceInput_2 != null) {
							String value_tSalesforceInput_2 = (String) valueObj_tSalesforceInput_2;

							row2.Clinical_Sales_Territory__c = value_tSalesforceInput_2;

						} else {
							row2.Clinical_Sales_Territory__c = null;
						}

						// get the real value according the columnName
						valueObj_tSalesforceInput_2 = topRecord_tSalesforceInput_2
								.getValue("Block__c");
						if (valueObj_tSalesforceInput_2 != null) {
							String value_tSalesforceInput_2 = (String) valueObj_tSalesforceInput_2;

							row2.Block__c = value_tSalesforceInput_2;

						} else {
							row2.Block__c = null;
						}

						// get the real value according the columnName
						valueObj_tSalesforceInput_2 = topRecord_tSalesforceInput_2
								.getValue("Order_Detail__c");
						if (valueObj_tSalesforceInput_2 != null) {
							String value_tSalesforceInput_2 = (String) valueObj_tSalesforceInput_2;

							row2.Order_Detail__c = value_tSalesforceInput_2;

						} else {
							row2.Order_Detail__c = null;
						}

						// get the real value according the columnName
						valueObj_tSalesforceInput_2 = topRecord_tSalesforceInput_2
								.getValue("Physician__c");
						if (valueObj_tSalesforceInput_2 != null) {
							String value_tSalesforceInput_2 = (String) valueObj_tSalesforceInput_2;

							row2.Physician__c = value_tSalesforceInput_2;

						} else {
							row2.Physician__c = null;
						}

						// get the real value according the columnName
						valueObj_tSalesforceInput_2 = topRecord_tSalesforceInput_2
								.getValue("Sample_Quantity_Received__c");
						if (valueObj_tSalesforceInput_2 != null) {
							String value_tSalesforceInput_2 = (String) valueObj_tSalesforceInput_2;

							row2.Sample_Quantity_Received__c = ParserUtils
									.parseTo_Double(value_tSalesforceInput_2);

						} else {
							row2.Sample_Quantity_Received__c = null;
						}

						// get the real value according the columnName
						valueObj_tSalesforceInput_2 = topRecord_tSalesforceInput_2
								.getValue("Order_Received_Date__c");
						if (valueObj_tSalesforceInput_2 != null) {
							String value_tSalesforceInput_2 = (String) valueObj_tSalesforceInput_2;

							row2.Order_Received_Date__c = ParserUtils
									.parseTo_Date(value_tSalesforceInput_2,
											"yyyy-MM-dd");

						} else {
							row2.Order_Received_Date__c = null;
						}

						// get the real value according the columnName
						valueObj_tSalesforceInput_2 = topRecord_tSalesforceInput_2
								.getValue("Order_Value__c");
						if (valueObj_tSalesforceInput_2 != null) {
							String value_tSalesforceInput_2 = (String) valueObj_tSalesforceInput_2;

							row2.Order_Value__c = ParserUtils
									.parseTo_Double(value_tSalesforceInput_2);

						} else {
							row2.Order_Value__c = null;
						}

						// get the real value according the columnName
						valueObj_tSalesforceInput_2 = topRecord_tSalesforceInput_2
								.getValue("Sales_Territory__c");
						if (valueObj_tSalesforceInput_2 != null) {
							String value_tSalesforceInput_2 = (String) valueObj_tSalesforceInput_2;

							row2.Sales_Territory__c = value_tSalesforceInput_2;

						} else {
							row2.Sales_Territory__c = null;
						}

						// get the real value according the columnName
						valueObj_tSalesforceInput_2 = topRecord_tSalesforceInput_2
								.getValue("Pharma_Sponsored__c");
						if (valueObj_tSalesforceInput_2 != null) {
							String value_tSalesforceInput_2 = (String) valueObj_tSalesforceInput_2;

							row2.Pharma_Sponsored__c = ParserUtils
									.parseTo_Boolean(value_tSalesforceInput_2);

						} else {
							row2.Pharma_Sponsored__c = null;
						}

						// get the real value according the columnName
						valueObj_tSalesforceInput_2 = topRecord_tSalesforceInput_2
								.getValue("Form_of_Payment_Received_or_Negotiated__c");
						if (valueObj_tSalesforceInput_2 != null) {
							String value_tSalesforceInput_2 = (String) valueObj_tSalesforceInput_2;

							row2.Form_of_Payment_Received_or_Negotiated__c = ParserUtils
									.parseTo_Boolean(value_tSalesforceInput_2);

						} else {
							row2.Form_of_Payment_Received_or_Negotiated__c = null;
						}

						// get the real value according the columnName
						valueObj_tSalesforceInput_2 = topRecord_tSalesforceInput_2
								.getValue("VAT__c");
						if (valueObj_tSalesforceInput_2 != null) {
							String value_tSalesforceInput_2 = (String) valueObj_tSalesforceInput_2;

							row2.VAT__c = value_tSalesforceInput_2;

						} else {
							row2.VAT__c = null;
						}

						// get the real value according the columnName
						valueObj_tSalesforceInput_2 = topRecord_tSalesforceInput_2
								.getValue("Campaigns__c");
						if (valueObj_tSalesforceInput_2 != null) {
							String value_tSalesforceInput_2 = (String) valueObj_tSalesforceInput_2;

							row2.Campaigns__c = value_tSalesforceInput_2;

						} else {
							row2.Campaigns__c = null;
						}

						// get the real value according the columnName
						valueObj_tSalesforceInput_2 = topRecord_tSalesforceInput_2
								.getValue("Purchase_Order_Record__c");
						if (valueObj_tSalesforceInput_2 != null) {
							String value_tSalesforceInput_2 = (String) valueObj_tSalesforceInput_2;

							row2.Purchase_Order_Record__c = value_tSalesforceInput_2;

						} else {
							row2.Purchase_Order_Record__c = null;
						}

						// get the real value according the columnName
						valueObj_tSalesforceInput_2 = topRecord_tSalesforceInput_2
								.getValue("Broker_Account__c");
						if (valueObj_tSalesforceInput_2 != null) {
							String value_tSalesforceInput_2 = (String) valueObj_tSalesforceInput_2;

							row2.Broker_Account__c = value_tSalesforceInput_2;

						} else {
							row2.Broker_Account__c = null;
						}

						// get the real value according the columnName
						valueObj_tSalesforceInput_2 = topRecord_tSalesforceInput_2
								.getValue("Sample_Lab_Location__c");
						if (valueObj_tSalesforceInput_2 != null) {
							String value_tSalesforceInput_2 = (String) valueObj_tSalesforceInput_2;

							row2.Sample_Lab_Location__c = value_tSalesforceInput_2;

						} else {
							row2.Sample_Lab_Location__c = null;
						}

						// get the real value according the columnName
						valueObj_tSalesforceInput_2 = topRecord_tSalesforceInput_2
								.getValue("Physician_Full_Name__c");
						if (valueObj_tSalesforceInput_2 != null) {
							String value_tSalesforceInput_2 = (String) valueObj_tSalesforceInput_2;

							row2.Physician_Full_Name__c = value_tSalesforceInput_2;

						} else {
							row2.Physician_Full_Name__c = null;
						}

						// get the real value according the columnName
						valueObj_tSalesforceInput_2 = topRecord_tSalesforceInput_2
								.getValue("Estimated_Invoice_Date__c");
						if (valueObj_tSalesforceInput_2 != null) {
							String value_tSalesforceInput_2 = (String) valueObj_tSalesforceInput_2;

							row2.Estimated_Invoice_Date__c = ParserUtils
									.parseTo_Date(value_tSalesforceInput_2,
											"yyyy-MM-dd");

						} else {
							row2.Estimated_Invoice_Date__c = null;
						}

						// get the real value according the columnName
						valueObj_tSalesforceInput_2 = topRecord_tSalesforceInput_2
								.getValue("dermoSEQ_Stage__c");
						if (valueObj_tSalesforceInput_2 != null) {
							String value_tSalesforceInput_2 = (String) valueObj_tSalesforceInput_2;

							row2.dermoSEQ_Stage__c = value_tSalesforceInput_2;

						} else {
							row2.dermoSEQ_Stage__c = null;
						}

						// get the real value according the columnName
						valueObj_tSalesforceInput_2 = topRecord_tSalesforceInput_2
								.getValue("Sales_Credit_Date__c");
						if (valueObj_tSalesforceInput_2 != null) {
							String value_tSalesforceInput_2 = (String) valueObj_tSalesforceInput_2;

							row2.Sales_Credit_Date__c = ParserUtils
									.parseTo_Date(value_tSalesforceInput_2,
											"yyyy-MM-dd");

						} else {
							row2.Sales_Credit_Date__c = null;
						}

						// get the real value according the columnName
						valueObj_tSalesforceInput_2 = topRecord_tSalesforceInput_2
								.getValue("Broker_Tax_ID__c");
						if (valueObj_tSalesforceInput_2 != null) {
							String value_tSalesforceInput_2 = (String) valueObj_tSalesforceInput_2;

							row2.Broker_Tax_ID__c = value_tSalesforceInput_2;

						} else {
							row2.Broker_Tax_ID__c = null;
						}

						// get the real value according the columnName
						valueObj_tSalesforceInput_2 = topRecord_tSalesforceInput_2
								.getValue("Broker_ID_Number__c");
						if (valueObj_tSalesforceInput_2 != null) {
							String value_tSalesforceInput_2 = (String) valueObj_tSalesforceInput_2;

							row2.Broker_ID_Number__c = value_tSalesforceInput_2;

						} else {
							row2.Broker_ID_Number__c = null;
						}

						// get the real value according the columnName
						valueObj_tSalesforceInput_2 = topRecord_tSalesforceInput_2
								.getValue("Pharma__c");
						if (valueObj_tSalesforceInput_2 != null) {
							String value_tSalesforceInput_2 = (String) valueObj_tSalesforceInput_2;

							row2.Pharma__c = value_tSalesforceInput_2;

						} else {
							row2.Pharma__c = null;
						}

						// get the real value according the columnName
						valueObj_tSalesforceInput_2 = topRecord_tSalesforceInput_2
								.getValue("Broker_Contact__c");
						if (valueObj_tSalesforceInput_2 != null) {
							String value_tSalesforceInput_2 = (String) valueObj_tSalesforceInput_2;

							row2.Broker_Contact__c = value_tSalesforceInput_2;

						} else {
							row2.Broker_Contact__c = null;
						}

						// get the real value according the columnName
						valueObj_tSalesforceInput_2 = topRecord_tSalesforceInput_2
								.getValue("Sequencing_Completion_Deadline_Date__c");
						if (valueObj_tSalesforceInput_2 != null) {
							String value_tSalesforceInput_2 = (String) valueObj_tSalesforceInput_2;

							row2.Sequencing_Completion_Deadline_Date__c = ParserUtils
									.parseTo_Date(value_tSalesforceInput_2,
											"yyyy-MM-dd");

						} else {
							row2.Sequencing_Completion_Deadline_Date__c = null;
						}

						// get the real value according the columnName
						valueObj_tSalesforceInput_2 = topRecord_tSalesforceInput_2
								.getValue("Distributor__c");
						if (valueObj_tSalesforceInput_2 != null) {
							String value_tSalesforceInput_2 = (String) valueObj_tSalesforceInput_2;

							row2.Distributor__c = value_tSalesforceInput_2;

						} else {
							row2.Distributor__c = null;
						}

						// get the real value according the columnName
						valueObj_tSalesforceInput_2 = topRecord_tSalesforceInput_2
								.getValue("Broker_Address__c");
						if (valueObj_tSalesforceInput_2 != null) {
							String value_tSalesforceInput_2 = (String) valueObj_tSalesforceInput_2;

							row2.Broker_Address__c = value_tSalesforceInput_2;

						} else {
							row2.Broker_Address__c = null;
						}

						// get the real value according the columnName
						valueObj_tSalesforceInput_2 = topRecord_tSalesforceInput_2
								.getValue("Broker_Contact_Phone__c");
						if (valueObj_tSalesforceInput_2 != null) {
							String value_tSalesforceInput_2 = (String) valueObj_tSalesforceInput_2;

							row2.Broker_Contact_Phone__c = value_tSalesforceInput_2;

						} else {
							row2.Broker_Contact_Phone__c = null;
						}

						// get the real value according the columnName
						valueObj_tSalesforceInput_2 = topRecord_tSalesforceInput_2
								.getValue("Broker_Contact_Email__c");
						if (valueObj_tSalesforceInput_2 != null) {
							String value_tSalesforceInput_2 = (String) valueObj_tSalesforceInput_2;

							row2.Broker_Contact_Email__c = value_tSalesforceInput_2;

						} else {
							row2.Broker_Contact_Email__c = null;
						}

						// get the real value according the columnName
						valueObj_tSalesforceInput_2 = topRecord_tSalesforceInput_2
								.getValue("Ship_To_Contact_With_PO__c");
						if (valueObj_tSalesforceInput_2 != null) {
							String value_tSalesforceInput_2 = (String) valueObj_tSalesforceInput_2;

							row2.Ship_To_Contact_With_PO__c = value_tSalesforceInput_2;

						} else {
							row2.Ship_To_Contact_With_PO__c = null;
						}

						// get the real value according the columnName
						valueObj_tSalesforceInput_2 = topRecord_tSalesforceInput_2
								.getValue("Extractions_Needed__c");
						if (valueObj_tSalesforceInput_2 != null) {
							String value_tSalesforceInput_2 = (String) valueObj_tSalesforceInput_2;

							row2.Extractions_Needed__c = ParserUtils
									.parseTo_Boolean(value_tSalesforceInput_2);

						} else {
							row2.Extractions_Needed__c = null;
						}

						// get the real value according the columnName
						valueObj_tSalesforceInput_2 = topRecord_tSalesforceInput_2
								.getValue("Attn_To__c");
						if (valueObj_tSalesforceInput_2 != null) {
							String value_tSalesforceInput_2 = (String) valueObj_tSalesforceInput_2;

							row2.Attn_To__c = value_tSalesforceInput_2;

						} else {
							row2.Attn_To__c = null;
						}

						// get the real value according the columnName
						valueObj_tSalesforceInput_2 = topRecord_tSalesforceInput_2
								.getValue("Mouse_TCRB_Block__c");
						if (valueObj_tSalesforceInput_2 != null) {
							String value_tSalesforceInput_2 = (String) valueObj_tSalesforceInput_2;

							row2.Mouse_TCRB_Block__c = value_tSalesforceInput_2;

						} else {
							row2.Mouse_TCRB_Block__c = null;
						}

						/**
						 * [tSalesforceInput_2 begin ] stop
						 */

						/**
						 * [tSalesforceInput_2 main ] start
						 */

						currentComponent = "tSalesforceInput_2";

						tos_count_tSalesforceInput_2++;

						/**
						 * [tSalesforceInput_2 main ] stop
						 */

						/**
						 * [tPostgresqlOutput_2 main ] start
						 */

						currentComponent = "tPostgresqlOutput_2";

						// row2
						// row2

						if (execStat) {
							runStat.updateStatOnConnection("row2" + iterateId,
									1, 1);
						}

						whetherReject_tPostgresqlOutput_2 = false;
						if (row2.Id == null) {
							pstmt_tPostgresqlOutput_2.setNull(1,
									java.sql.Types.VARCHAR);
						} else {
							pstmt_tPostgresqlOutput_2.setString(1, row2.Id);
						}

						if (row2.OwnerId == null) {
							pstmt_tPostgresqlOutput_2.setNull(2,
									java.sql.Types.VARCHAR);
						} else {
							pstmt_tPostgresqlOutput_2
									.setString(2, row2.OwnerId);
						}

						if (row2.ContractId == null) {
							pstmt_tPostgresqlOutput_2.setNull(3,
									java.sql.Types.VARCHAR);
						} else {
							pstmt_tPostgresqlOutput_2.setString(3,
									row2.ContractId);
						}

						if (row2.AccountId == null) {
							pstmt_tPostgresqlOutput_2.setNull(4,
									java.sql.Types.VARCHAR);
						} else {
							pstmt_tPostgresqlOutput_2.setString(4,
									row2.AccountId);
						}

						if (row2.Pricebook2Id == null) {
							pstmt_tPostgresqlOutput_2.setNull(5,
									java.sql.Types.VARCHAR);
						} else {
							pstmt_tPostgresqlOutput_2.setString(5,
									row2.Pricebook2Id);
						}

						if (row2.OriginalOrderId == null) {
							pstmt_tPostgresqlOutput_2.setNull(6,
									java.sql.Types.VARCHAR);
						} else {
							pstmt_tPostgresqlOutput_2.setString(6,
									row2.OriginalOrderId);
						}

						if (row2.RecordTypeId == null) {
							pstmt_tPostgresqlOutput_2.setNull(7,
									java.sql.Types.VARCHAR);
						} else {
							pstmt_tPostgresqlOutput_2.setString(7,
									row2.RecordTypeId);
						}

						if (row2.EffectiveDate != null) {
							pstmt_tPostgresqlOutput_2.setTimestamp(
									8,
									new java.sql.Timestamp(row2.EffectiveDate
											.getTime()));
						} else {
							pstmt_tPostgresqlOutput_2.setNull(8,
									java.sql.Types.TIMESTAMP);
						}

						if (row2.EndDate != null) {
							pstmt_tPostgresqlOutput_2.setTimestamp(
									9,
									new java.sql.Timestamp(row2.EndDate
											.getTime()));
						} else {
							pstmt_tPostgresqlOutput_2.setNull(9,
									java.sql.Types.TIMESTAMP);
						}

						if (row2.IsReductionOrder == null) {
							pstmt_tPostgresqlOutput_2.setNull(10,
									java.sql.Types.BOOLEAN);
						} else {
							pstmt_tPostgresqlOutput_2.setBoolean(10,
									row2.IsReductionOrder);
						}

						if (row2.Status == null) {
							pstmt_tPostgresqlOutput_2.setNull(11,
									java.sql.Types.VARCHAR);
						} else {
							pstmt_tPostgresqlOutput_2
									.setString(11, row2.Status);
						}

						if (row2.Description == null) {
							pstmt_tPostgresqlOutput_2.setNull(12,
									java.sql.Types.VARCHAR);
						} else {
							pstmt_tPostgresqlOutput_2.setString(12,
									row2.Description);
						}

						if (row2.CustomerAuthorizedById == null) {
							pstmt_tPostgresqlOutput_2.setNull(13,
									java.sql.Types.VARCHAR);
						} else {
							pstmt_tPostgresqlOutput_2.setString(13,
									row2.CustomerAuthorizedById);
						}

						if (row2.CustomerAuthorizedDate != null) {
							pstmt_tPostgresqlOutput_2.setTimestamp(
									14,
									new java.sql.Timestamp(
											row2.CustomerAuthorizedDate
													.getTime()));
						} else {
							pstmt_tPostgresqlOutput_2.setNull(14,
									java.sql.Types.TIMESTAMP);
						}

						if (row2.CompanyAuthorizedById == null) {
							pstmt_tPostgresqlOutput_2.setNull(15,
									java.sql.Types.VARCHAR);
						} else {
							pstmt_tPostgresqlOutput_2.setString(15,
									row2.CompanyAuthorizedById);
						}

						if (row2.CompanyAuthorizedDate != null) {
							pstmt_tPostgresqlOutput_2.setTimestamp(
									16,
									new java.sql.Timestamp(
											row2.CompanyAuthorizedDate
													.getTime()));
						} else {
							pstmt_tPostgresqlOutput_2.setNull(16,
									java.sql.Types.TIMESTAMP);
						}

						if (row2.Type == null) {
							pstmt_tPostgresqlOutput_2.setNull(17,
									java.sql.Types.VARCHAR);
						} else {
							pstmt_tPostgresqlOutput_2.setString(17, row2.Type);
						}

						if (row2.BillingStreet == null) {
							pstmt_tPostgresqlOutput_2.setNull(18,
									java.sql.Types.VARCHAR);
						} else {
							pstmt_tPostgresqlOutput_2.setString(18,
									row2.BillingStreet);
						}

						if (row2.BillingCity == null) {
							pstmt_tPostgresqlOutput_2.setNull(19,
									java.sql.Types.VARCHAR);
						} else {
							pstmt_tPostgresqlOutput_2.setString(19,
									row2.BillingCity);
						}

						if (row2.BillingState == null) {
							pstmt_tPostgresqlOutput_2.setNull(20,
									java.sql.Types.VARCHAR);
						} else {
							pstmt_tPostgresqlOutput_2.setString(20,
									row2.BillingState);
						}

						if (row2.BillingPostalCode == null) {
							pstmt_tPostgresqlOutput_2.setNull(21,
									java.sql.Types.VARCHAR);
						} else {
							pstmt_tPostgresqlOutput_2.setString(21,
									row2.BillingPostalCode);
						}

						if (row2.BillingCountry == null) {
							pstmt_tPostgresqlOutput_2.setNull(22,
									java.sql.Types.VARCHAR);
						} else {
							pstmt_tPostgresqlOutput_2.setString(22,
									row2.BillingCountry);
						}

						if (row2.BillingStateCode == null) {
							pstmt_tPostgresqlOutput_2.setNull(23,
									java.sql.Types.VARCHAR);
						} else {
							pstmt_tPostgresqlOutput_2.setString(23,
									row2.BillingStateCode);
						}

						if (row2.BillingCountryCode == null) {
							pstmt_tPostgresqlOutput_2.setNull(24,
									java.sql.Types.VARCHAR);
						} else {
							pstmt_tPostgresqlOutput_2.setString(24,
									row2.BillingCountryCode);
						}

						if (row2.BillingLatitude == null) {
							pstmt_tPostgresqlOutput_2.setNull(25,
									java.sql.Types.DOUBLE);
						} else {
							pstmt_tPostgresqlOutput_2.setDouble(25,
									row2.BillingLatitude);
						}

						if (row2.BillingLongitude == null) {
							pstmt_tPostgresqlOutput_2.setNull(26,
									java.sql.Types.DOUBLE);
						} else {
							pstmt_tPostgresqlOutput_2.setDouble(26,
									row2.BillingLongitude);
						}

						if (row2.BillingAddress == null) {
							pstmt_tPostgresqlOutput_2.setNull(27,
									java.sql.Types.VARCHAR);
						} else {
							pstmt_tPostgresqlOutput_2.setString(27,
									row2.BillingAddress);
						}

						if (row2.ShippingStreet == null) {
							pstmt_tPostgresqlOutput_2.setNull(28,
									java.sql.Types.VARCHAR);
						} else {
							pstmt_tPostgresqlOutput_2.setString(28,
									row2.ShippingStreet);
						}

						if (row2.ShippingCity == null) {
							pstmt_tPostgresqlOutput_2.setNull(29,
									java.sql.Types.VARCHAR);
						} else {
							pstmt_tPostgresqlOutput_2.setString(29,
									row2.ShippingCity);
						}

						if (row2.ShippingState == null) {
							pstmt_tPostgresqlOutput_2.setNull(30,
									java.sql.Types.VARCHAR);
						} else {
							pstmt_tPostgresqlOutput_2.setString(30,
									row2.ShippingState);
						}

						if (row2.ShippingPostalCode == null) {
							pstmt_tPostgresqlOutput_2.setNull(31,
									java.sql.Types.VARCHAR);
						} else {
							pstmt_tPostgresqlOutput_2.setString(31,
									row2.ShippingPostalCode);
						}

						if (row2.ShippingCountry == null) {
							pstmt_tPostgresqlOutput_2.setNull(32,
									java.sql.Types.VARCHAR);
						} else {
							pstmt_tPostgresqlOutput_2.setString(32,
									row2.ShippingCountry);
						}

						if (row2.ShippingStateCode == null) {
							pstmt_tPostgresqlOutput_2.setNull(33,
									java.sql.Types.VARCHAR);
						} else {
							pstmt_tPostgresqlOutput_2.setString(33,
									row2.ShippingStateCode);
						}

						if (row2.ShippingCountryCode == null) {
							pstmt_tPostgresqlOutput_2.setNull(34,
									java.sql.Types.VARCHAR);
						} else {
							pstmt_tPostgresqlOutput_2.setString(34,
									row2.ShippingCountryCode);
						}

						if (row2.ShippingLatitude == null) {
							pstmt_tPostgresqlOutput_2.setNull(35,
									java.sql.Types.DOUBLE);
						} else {
							pstmt_tPostgresqlOutput_2.setDouble(35,
									row2.ShippingLatitude);
						}

						if (row2.ShippingLongitude == null) {
							pstmt_tPostgresqlOutput_2.setNull(36,
									java.sql.Types.DOUBLE);
						} else {
							pstmt_tPostgresqlOutput_2.setDouble(36,
									row2.ShippingLongitude);
						}

						if (row2.ShippingAddress == null) {
							pstmt_tPostgresqlOutput_2.setNull(37,
									java.sql.Types.VARCHAR);
						} else {
							pstmt_tPostgresqlOutput_2.setString(37,
									row2.ShippingAddress);
						}

						if (row2.Name == null) {
							pstmt_tPostgresqlOutput_2.setNull(38,
									java.sql.Types.VARCHAR);
						} else {
							pstmt_tPostgresqlOutput_2.setString(38, row2.Name);
						}

						if (row2.ActivatedDate != null) {
							pstmt_tPostgresqlOutput_2.setTimestamp(
									39,
									new java.sql.Timestamp(row2.ActivatedDate
											.getTime()));
						} else {
							pstmt_tPostgresqlOutput_2.setNull(39,
									java.sql.Types.TIMESTAMP);
						}

						if (row2.ActivatedById == null) {
							pstmt_tPostgresqlOutput_2.setNull(40,
									java.sql.Types.VARCHAR);
						} else {
							pstmt_tPostgresqlOutput_2.setString(40,
									row2.ActivatedById);
						}

						if (row2.StatusCode == null) {
							pstmt_tPostgresqlOutput_2.setNull(41,
									java.sql.Types.VARCHAR);
						} else {
							pstmt_tPostgresqlOutput_2.setString(41,
									row2.StatusCode);
						}

						if (row2.CurrencyIsoCode == null) {
							pstmt_tPostgresqlOutput_2.setNull(42,
									java.sql.Types.VARCHAR);
						} else {
							pstmt_tPostgresqlOutput_2.setString(42,
									row2.CurrencyIsoCode);
						}

						if (row2.OrderNumber == null) {
							pstmt_tPostgresqlOutput_2.setNull(43,
									java.sql.Types.VARCHAR);
						} else {
							pstmt_tPostgresqlOutput_2.setString(43,
									row2.OrderNumber);
						}

						if (row2.TotalAmount == null) {
							pstmt_tPostgresqlOutput_2.setNull(44,
									java.sql.Types.DOUBLE);
						} else {
							pstmt_tPostgresqlOutput_2.setDouble(44,
									row2.TotalAmount);
						}

						if (row2.CreatedDate != null) {
							pstmt_tPostgresqlOutput_2.setTimestamp(
									45,
									new java.sql.Timestamp(row2.CreatedDate
											.getTime()));
						} else {
							pstmt_tPostgresqlOutput_2.setNull(45,
									java.sql.Types.TIMESTAMP);
						}

						if (row2.CreatedById == null) {
							pstmt_tPostgresqlOutput_2.setNull(46,
									java.sql.Types.VARCHAR);
						} else {
							pstmt_tPostgresqlOutput_2.setString(46,
									row2.CreatedById);
						}

						if (row2.LastModifiedDate != null) {
							pstmt_tPostgresqlOutput_2.setTimestamp(47,
									new java.sql.Timestamp(
											row2.LastModifiedDate.getTime()));
						} else {
							pstmt_tPostgresqlOutput_2.setNull(47,
									java.sql.Types.TIMESTAMP);
						}

						if (row2.LastModifiedById == null) {
							pstmt_tPostgresqlOutput_2.setNull(48,
									java.sql.Types.VARCHAR);
						} else {
							pstmt_tPostgresqlOutput_2.setString(48,
									row2.LastModifiedById);
						}

						if (row2.IsDeleted == null) {
							pstmt_tPostgresqlOutput_2.setNull(49,
									java.sql.Types.BOOLEAN);
						} else {
							pstmt_tPostgresqlOutput_2.setBoolean(49,
									row2.IsDeleted);
						}

						if (row2.SystemModstamp != null) {
							pstmt_tPostgresqlOutput_2.setTimestamp(
									50,
									new java.sql.Timestamp(row2.SystemModstamp
											.getTime()));
						} else {
							pstmt_tPostgresqlOutput_2.setNull(50,
									java.sql.Types.TIMESTAMP);
						}

						if (row2.LastViewedDate != null) {
							pstmt_tPostgresqlOutput_2.setTimestamp(
									51,
									new java.sql.Timestamp(row2.LastViewedDate
											.getTime()));
						} else {
							pstmt_tPostgresqlOutput_2.setNull(51,
									java.sql.Types.TIMESTAMP);
						}

						if (row2.LastReferencedDate != null) {
							pstmt_tPostgresqlOutput_2.setTimestamp(52,
									new java.sql.Timestamp(
											row2.LastReferencedDate.getTime()));
						} else {
							pstmt_tPostgresqlOutput_2.setNull(52,
									java.sql.Types.TIMESTAMP);
						}

						if (row2.Data_Release_Date__c != null) {
							pstmt_tPostgresqlOutput_2
									.setTimestamp(
											53,
											new java.sql.Timestamp(
													row2.Data_Release_Date__c
															.getTime()));
						} else {
							pstmt_tPostgresqlOutput_2.setNull(53,
									java.sql.Types.TIMESTAMP);
						}

						if (row2.ISO_Country_Code__c == null) {
							pstmt_tPostgresqlOutput_2.setNull(54,
									java.sql.Types.VARCHAR);
						} else {
							pstmt_tPostgresqlOutput_2.setString(54,
									row2.ISO_Country_Code__c);
						}

						if (row2.Credit_Card_del__c == null) {
							pstmt_tPostgresqlOutput_2.setNull(55,
									java.sql.Types.VARCHAR);
						} else {
							pstmt_tPostgresqlOutput_2.setString(55,
									row2.Credit_Card_del__c);
						}

						if (row2.Invoice_1_Number__c == null) {
							pstmt_tPostgresqlOutput_2.setNull(56,
									java.sql.Types.VARCHAR);
						} else {
							pstmt_tPostgresqlOutput_2.setString(56,
									row2.Invoice_1_Number__c);
						}

						if (row2.Invoice_2_Number__c == null) {
							pstmt_tPostgresqlOutput_2.setNull(57,
									java.sql.Types.VARCHAR);
						} else {
							pstmt_tPostgresqlOutput_2.setString(57,
									row2.Invoice_2_Number__c);
						}

						if (row2.Invoice_3_Number__c == null) {
							pstmt_tPostgresqlOutput_2.setNull(58,
									java.sql.Types.VARCHAR);
						} else {
							pstmt_tPostgresqlOutput_2.setString(58,
									row2.Invoice_3_Number__c);
						}

						if (row2.PO_Contact_Phone__c == null) {
							pstmt_tPostgresqlOutput_2.setNull(59,
									java.sql.Types.VARCHAR);
						} else {
							pstmt_tPostgresqlOutput_2.setString(59,
									row2.PO_Contact_Phone__c);
						}

						if (row2.Invoice_4_Number__c == null) {
							pstmt_tPostgresqlOutput_2.setNull(60,
									java.sql.Types.VARCHAR);
						} else {
							pstmt_tPostgresqlOutput_2.setString(60,
									row2.Invoice_4_Number__c);
						}

						if (row2.Bill_To_Email__c == null) {
							pstmt_tPostgresqlOutput_2.setNull(61,
									java.sql.Types.VARCHAR);
						} else {
							pstmt_tPostgresqlOutput_2.setString(61,
									row2.Bill_To_Email__c);
						}

						if (row2.Order_Catagory__c == null) {
							pstmt_tPostgresqlOutput_2.setNull(62,
									java.sql.Types.VARCHAR);
						} else {
							pstmt_tPostgresqlOutput_2.setString(62,
									row2.Order_Catagory__c);
						}

						if (row2.Other_Carrier_Tracking__c == null) {
							pstmt_tPostgresqlOutput_2.setNull(63,
									java.sql.Types.VARCHAR);
						} else {
							pstmt_tPostgresqlOutput_2.setString(63,
									row2.Other_Carrier_Tracking__c);
						}

						if (row2.Priority__c == null) {
							pstmt_tPostgresqlOutput_2.setNull(64,
									java.sql.Types.VARCHAR);
						} else {
							pstmt_tPostgresqlOutput_2.setString(64,
									row2.Priority__c);
						}

						if (row2.Probability__c == null) {
							pstmt_tPostgresqlOutput_2.setNull(65,
									java.sql.Types.VARCHAR);
						} else {
							pstmt_tPostgresqlOutput_2.setString(65,
									row2.Probability__c);
						}

						if (row2.Age__c == null) {
							pstmt_tPostgresqlOutput_2.setNull(66,
									java.sql.Types.DOUBLE);
						} else {
							pstmt_tPostgresqlOutput_2
									.setDouble(66, row2.Age__c);
						}

						if (row2.Report_Release_Date__c != null) {
							pstmt_tPostgresqlOutput_2.setTimestamp(
									67,
									new java.sql.Timestamp(
											row2.Report_Release_Date__c
													.getTime()));
						} else {
							pstmt_tPostgresqlOutput_2.setNull(67,
									java.sql.Types.TIMESTAMP);
						}

						if (row2.Sample_Arrival_Date__c != null) {
							pstmt_tPostgresqlOutput_2.setTimestamp(
									68,
									new java.sql.Timestamp(
											row2.Sample_Arrival_Date__c
													.getTime()));
						} else {
							pstmt_tPostgresqlOutput_2.setNull(68,
									java.sql.Types.TIMESTAMP);
						}

						if (row2.Service_Order_Stage__c == null) {
							pstmt_tPostgresqlOutput_2.setNull(69,
									java.sql.Types.VARCHAR);
						} else {
							pstmt_tPostgresqlOutput_2.setString(69,
									row2.Service_Order_Stage__c);
						}

						if (row2.Shipping_Handling__c == null) {
							pstmt_tPostgresqlOutput_2.setNull(70,
									java.sql.Types.DOUBLE);
						} else {
							pstmt_tPostgresqlOutput_2.setDouble(70,
									row2.Shipping_Handling__c);
						}

						if (row2.Data_Analysis_Group__c == null) {
							pstmt_tPostgresqlOutput_2.setNull(71,
									java.sql.Types.VARCHAR);
						} else {
							pstmt_tPostgresqlOutput_2.setString(71,
									row2.Data_Analysis_Group__c);
						}

						if (row2.Total_Order__c == null) {
							pstmt_tPostgresqlOutput_2.setNull(72,
									java.sql.Types.DOUBLE);
						} else {
							pstmt_tPostgresqlOutput_2.setDouble(72,
									row2.Total_Order__c);
						}

						if (row2.Workspace_ID__c == null) {
							pstmt_tPostgresqlOutput_2.setNull(73,
									java.sql.Types.VARCHAR);
						} else {
							pstmt_tPostgresqlOutput_2.setString(73,
									row2.Workspace_ID__c);
						}

						if (row2.clonoSEQ_Stage__c == null) {
							pstmt_tPostgresqlOutput_2.setNull(74,
									java.sql.Types.VARCHAR);
						} else {
							pstmt_tPostgresqlOutput_2.setString(74,
									row2.clonoSEQ_Stage__c);
						}

						if (row2.Amount__c == null) {
							pstmt_tPostgresqlOutput_2.setNull(75,
									java.sql.Types.DOUBLE);
						} else {
							pstmt_tPostgresqlOutput_2.setDouble(75,
									row2.Amount__c);
						}

						if (row2.PO_Contact_Email__c == null) {
							pstmt_tPostgresqlOutput_2.setNull(76,
									java.sql.Types.VARCHAR);
						} else {
							pstmt_tPostgresqlOutput_2.setString(76,
									row2.PO_Contact_Email__c);
						}

						if (row2.PO_Number_c__c == null) {
							pstmt_tPostgresqlOutput_2.setNull(77,
									java.sql.Types.VARCHAR);
						} else {
							pstmt_tPostgresqlOutput_2.setString(77,
									row2.PO_Number_c__c);
						}

						if (row2.Bill_To_Phone__c == null) {
							pstmt_tPostgresqlOutput_2.setNull(78,
									java.sql.Types.VARCHAR);
						} else {
							pstmt_tPostgresqlOutput_2.setString(78,
									row2.Bill_To_Phone__c);
						}

						if (row2.Lead_Source__c == null) {
							pstmt_tPostgresqlOutput_2.setNull(79,
									java.sql.Types.VARCHAR);
						} else {
							pstmt_tPostgresqlOutput_2.setString(79,
									row2.Lead_Source__c);
						}

						if (row2.Invoice_1_Amount__c == null) {
							pstmt_tPostgresqlOutput_2.setNull(80,
									java.sql.Types.DOUBLE);
						} else {
							pstmt_tPostgresqlOutput_2.setDouble(80,
									row2.Invoice_1_Amount__c);
						}

						if (row2.Invoice_1_Revenue_Date__c != null) {
							pstmt_tPostgresqlOutput_2.setTimestamp(
									81,
									new java.sql.Timestamp(
											row2.Invoice_1_Revenue_Date__c
													.getTime()));
						} else {
							pstmt_tPostgresqlOutput_2.setNull(81,
									java.sql.Types.TIMESTAMP);
						}

						if (row2.Invoice_2_Amount__c == null) {
							pstmt_tPostgresqlOutput_2.setNull(82,
									java.sql.Types.DOUBLE);
						} else {
							pstmt_tPostgresqlOutput_2.setDouble(82,
									row2.Invoice_2_Amount__c);
						}

						if (row2.Invoice_3_Amount__c == null) {
							pstmt_tPostgresqlOutput_2.setNull(83,
									java.sql.Types.DOUBLE);
						} else {
							pstmt_tPostgresqlOutput_2.setDouble(83,
									row2.Invoice_3_Amount__c);
						}

						if (row2.Invoice_3_Unearned_Revenue__c == null) {
							pstmt_tPostgresqlOutput_2.setNull(84,
									java.sql.Types.BOOLEAN);
						} else {
							pstmt_tPostgresqlOutput_2.setBoolean(84,
									row2.Invoice_3_Unearned_Revenue__c);
						}

						if (row2.Invoice_4_Amount__c == null) {
							pstmt_tPostgresqlOutput_2.setNull(85,
									java.sql.Types.DOUBLE);
						} else {
							pstmt_tPostgresqlOutput_2.setDouble(85,
									row2.Invoice_4_Amount__c);
						}

						if (row2.Locus__c == null) {
							pstmt_tPostgresqlOutput_2.setNull(86,
									java.sql.Types.VARCHAR);
						} else {
							pstmt_tPostgresqlOutput_2.setString(86,
									row2.Locus__c);
						}

						if (row2.Turnaround_Days__c == null) {
							pstmt_tPostgresqlOutput_2.setNull(87,
									java.sql.Types.DOUBLE);
						} else {
							pstmt_tPostgresqlOutput_2.setDouble(87,
									row2.Turnaround_Days__c);
						}

						if (row2.Credit_Card__c == null) {
							pstmt_tPostgresqlOutput_2.setNull(88,
									java.sql.Types.VARCHAR);
						} else {
							pstmt_tPostgresqlOutput_2.setString(88,
									row2.Credit_Card__c);
						}

						if (row2.Sec_code__c == null) {
							pstmt_tPostgresqlOutput_2.setNull(89,
									java.sql.Types.VARCHAR);
						} else {
							pstmt_tPostgresqlOutput_2.setString(89,
									row2.Sec_code__c);
						}

						if (row2.Order_Notes__c == null) {
							pstmt_tPostgresqlOutput_2.setNull(90,
									java.sql.Types.VARCHAR);
						} else {
							pstmt_tPostgresqlOutput_2.setString(90,
									row2.Order_Notes__c);
						}

						if (row2.Expiration__c == null) {
							pstmt_tPostgresqlOutput_2.setNull(91,
									java.sql.Types.VARCHAR);
						} else {
							pstmt_tPostgresqlOutput_2.setString(91,
									row2.Expiration__c);
						}

						if (row2.Billing_To_Name__c == null) {
							pstmt_tPostgresqlOutput_2.setNull(92,
									java.sql.Types.VARCHAR);
						} else {
							pstmt_tPostgresqlOutput_2.setString(92,
									row2.Billing_To_Name__c);
						}

						if (row2.Ship_To_Name__c == null) {
							pstmt_tPostgresqlOutput_2.setNull(93,
									java.sql.Types.VARCHAR);
						} else {
							pstmt_tPostgresqlOutput_2.setString(93,
									row2.Ship_To_Name__c);
						}

						if (row2.Related_Case__c == null) {
							pstmt_tPostgresqlOutput_2.setNull(94,
									java.sql.Types.VARCHAR);
						} else {
							pstmt_tPostgresqlOutput_2.setString(94,
									row2.Related_Case__c);
						}

						if (row2.Related_Order__c == null) {
							pstmt_tPostgresqlOutput_2.setNull(95,
									java.sql.Types.VARCHAR);
						} else {
							pstmt_tPostgresqlOutput_2.setString(95,
									row2.Related_Order__c);
						}

						if (row2.Resolution__c == null) {
							pstmt_tPostgresqlOutput_2.setNull(96,
									java.sql.Types.VARCHAR);
						} else {
							pstmt_tPostgresqlOutput_2.setString(96,
									row2.Resolution__c);
						}

						if (row2.Deadline_Date__c != null) {
							pstmt_tPostgresqlOutput_2.setTimestamp(97,
									new java.sql.Timestamp(
											row2.Deadline_Date__c.getTime()));
						} else {
							pstmt_tPostgresqlOutput_2.setNull(97,
									java.sql.Types.TIMESTAMP);
						}

						if (row2.Accounts_Payable_Contact_Email__c == null) {
							pstmt_tPostgresqlOutput_2.setNull(98,
									java.sql.Types.VARCHAR);
						} else {
							pstmt_tPostgresqlOutput_2.setString(98,
									row2.Accounts_Payable_Contact_Email__c);
						}

						if (row2.Accounts_Payable_Contact_Phone__c == null) {
							pstmt_tPostgresqlOutput_2.setNull(99,
									java.sql.Types.VARCHAR);
						} else {
							pstmt_tPostgresqlOutput_2.setString(99,
									row2.Accounts_Payable_Contact_Phone__c);
						}

						if (row2.Sample_Rejection_Criteria__c == null) {
							pstmt_tPostgresqlOutput_2.setNull(100,
									java.sql.Types.VARCHAR);
						} else {
							pstmt_tPostgresqlOutput_2.setString(100,
									row2.Sample_Rejection_Criteria__c);
						}

						if (row2.Sample_Rejection_Jeopardy__c == null) {
							pstmt_tPostgresqlOutput_2.setNull(101,
									java.sql.Types.BOOLEAN);
						} else {
							pstmt_tPostgresqlOutput_2.setBoolean(101,
									row2.Sample_Rejection_Jeopardy__c);
						}

						if (row2.Ship_Attn_To_Email__c == null) {
							pstmt_tPostgresqlOutput_2.setNull(102,
									java.sql.Types.VARCHAR);
						} else {
							pstmt_tPostgresqlOutput_2.setString(102,
									row2.Ship_Attn_To_Email__c);
						}

						if (row2.PO_Receipt_Date__c != null) {
							pstmt_tPostgresqlOutput_2.setTimestamp(103,
									new java.sql.Timestamp(
											row2.PO_Receipt_Date__c.getTime()));
						} else {
							pstmt_tPostgresqlOutput_2.setNull(103,
									java.sql.Types.TIMESTAMP);
						}

						if (row2.Quantity_Released__c == null) {
							pstmt_tPostgresqlOutput_2.setNull(104,
									java.sql.Types.DOUBLE);
						} else {
							pstmt_tPostgresqlOutput_2.setDouble(104,
									row2.Quantity_Released__c);
						}

						if (row2.S_H_Tax__c == null) {
							pstmt_tPostgresqlOutput_2.setNull(105,
									java.sql.Types.DOUBLE);
						} else {
							pstmt_tPostgresqlOutput_2.setDouble(105,
									row2.S_H_Tax__c);
						}

						if (row2.Total_Tax__c == null) {
							pstmt_tPostgresqlOutput_2.setNull(106,
									java.sql.Types.DOUBLE);
						} else {
							pstmt_tPostgresqlOutput_2.setDouble(106,
									row2.Total_Tax__c);
						}

						if (row2.Legal_Entity__c == null) {
							pstmt_tPostgresqlOutput_2.setNull(107,
									java.sql.Types.VARCHAR);
						} else {
							pstmt_tPostgresqlOutput_2.setString(107,
									row2.Legal_Entity__c);
						}

						if (row2.Quote_No__c == null) {
							pstmt_tPostgresqlOutput_2.setNull(108,
									java.sql.Types.VARCHAR);
						} else {
							pstmt_tPostgresqlOutput_2.setString(108,
									row2.Quote_No__c);
						}

						if (row2.Discount_percent__c == null) {
							pstmt_tPostgresqlOutput_2.setNull(109,
									java.sql.Types.DOUBLE);
						} else {
							pstmt_tPostgresqlOutput_2.setDouble(109,
									row2.Discount_percent__c);
						}

						if (row2.Total_Discount__c == null) {
							pstmt_tPostgresqlOutput_2.setNull(110,
									java.sql.Types.DOUBLE);
						} else {
							pstmt_tPostgresqlOutput_2.setDouble(110,
									row2.Total_Discount__c);
						}

						if (row2.Total_Invoice_AmountsOld__c == null) {
							pstmt_tPostgresqlOutput_2.setNull(111,
									java.sql.Types.DOUBLE);
						} else {
							pstmt_tPostgresqlOutput_2.setDouble(111,
									row2.Total_Invoice_AmountsOld__c);
						}

						if (row2.X2014_Total_Invoice_AmountsOld__c == null) {
							pstmt_tPostgresqlOutput_2.setNull(112,
									java.sql.Types.DOUBLE);
						} else {
							pstmt_tPostgresqlOutput_2.setDouble(112,
									row2.X2014_Total_Invoice_AmountsOld__c);
						}

						if (row2.Ship_to_Contact__c == null) {
							pstmt_tPostgresqlOutput_2.setNull(113,
									java.sql.Types.VARCHAR);
						} else {
							pstmt_tPostgresqlOutput_2.setString(113,
									row2.Ship_to_Contact__c);
						}

						if (row2.Sales_Tax2__c == null) {
							pstmt_tPostgresqlOutput_2.setNull(114,
									java.sql.Types.DOUBLE);
						} else {
							pstmt_tPostgresqlOutput_2.setDouble(114,
									row2.Sales_Tax2__c);
						}

						if (row2.Tax2__c == null) {
							pstmt_tPostgresqlOutput_2.setNull(115,
									java.sql.Types.DOUBLE);
						} else {
							pstmt_tPostgresqlOutput_2.setDouble(115,
									row2.Tax2__c);
						}

						if (row2.User__c == null) {
							pstmt_tPostgresqlOutput_2.setNull(116,
									java.sql.Types.VARCHAR);
						} else {
							pstmt_tPostgresqlOutput_2.setString(116,
									row2.User__c);
						}

						if (row2.Street__c == null) {
							pstmt_tPostgresqlOutput_2.setNull(117,
									java.sql.Types.VARCHAR);
						} else {
							pstmt_tPostgresqlOutput_2.setString(117,
									row2.Street__c);
						}

						if (row2.City__c == null) {
							pstmt_tPostgresqlOutput_2.setNull(118,
									java.sql.Types.VARCHAR);
						} else {
							pstmt_tPostgresqlOutput_2.setString(118,
									row2.City__c);
						}

						if (row2.State__c == null) {
							pstmt_tPostgresqlOutput_2.setNull(119,
									java.sql.Types.VARCHAR);
						} else {
							pstmt_tPostgresqlOutput_2.setString(119,
									row2.State__c);
						}

						if (row2.Zip__c == null) {
							pstmt_tPostgresqlOutput_2.setNull(120,
									java.sql.Types.VARCHAR);
						} else {
							pstmt_tPostgresqlOutput_2.setString(120,
									row2.Zip__c);
						}

						if (row2.Country__c == null) {
							pstmt_tPostgresqlOutput_2.setNull(121,
									java.sql.Types.VARCHAR);
						} else {
							pstmt_tPostgresqlOutput_2.setString(121,
									row2.Country__c);
						}

						if (row2.Indication__c == null) {
							pstmt_tPostgresqlOutput_2.setNull(122,
									java.sql.Types.VARCHAR);
						} else {
							pstmt_tPostgresqlOutput_2.setString(122,
									row2.Indication__c);
						}

						if (row2.User_Phone__c == null) {
							pstmt_tPostgresqlOutput_2.setNull(123,
									java.sql.Types.VARCHAR);
						} else {
							pstmt_tPostgresqlOutput_2.setString(123,
									row2.User_Phone__c);
						}

						if (row2.Need_by__c != null) {
							pstmt_tPostgresqlOutput_2.setTimestamp(
									124,
									new java.sql.Timestamp(row2.Need_by__c
											.getTime()));
						} else {
							pstmt_tPostgresqlOutput_2.setNull(124,
									java.sql.Types.TIMESTAMP);
						}

						if (row2.Related_Contract__c == null) {
							pstmt_tPostgresqlOutput_2.setNull(125,
									java.sql.Types.VARCHAR);
						} else {
							pstmt_tPostgresqlOutput_2.setString(125,
									row2.Related_Contract__c);
						}

						if (row2.Invoice__c == null) {
							pstmt_tPostgresqlOutput_2.setNull(126,
									java.sql.Types.BOOLEAN);
						} else {
							pstmt_tPostgresqlOutput_2.setBoolean(126,
									row2.Invoice__c);
						}

						if (row2.Accession_Date__c != null) {
							pstmt_tPostgresqlOutput_2.setTimestamp(127,
									new java.sql.Timestamp(
											row2.Accession_Date__c.getTime()));
						} else {
							pstmt_tPostgresqlOutput_2.setNull(127,
									java.sql.Types.TIMESTAMP);
						}

						if (row2.Reconciliation_Date__c != null) {
							pstmt_tPostgresqlOutput_2.setTimestamp(
									128,
									new java.sql.Timestamp(
											row2.Reconciliation_Date__c
													.getTime()));
						} else {
							pstmt_tPostgresqlOutput_2.setNull(128,
									java.sql.Types.TIMESTAMP);
						}

						if (row2.Test_Order_Date__c != null) {
							pstmt_tPostgresqlOutput_2.setTimestamp(129,
									new java.sql.Timestamp(
											row2.Test_Order_Date__c.getTime()));
						} else {
							pstmt_tPostgresqlOutput_2.setNull(129,
									java.sql.Types.TIMESTAMP);
						}

						if (row2.Clinical_Sales_Territory__c == null) {
							pstmt_tPostgresqlOutput_2.setNull(130,
									java.sql.Types.VARCHAR);
						} else {
							pstmt_tPostgresqlOutput_2.setString(130,
									row2.Clinical_Sales_Territory__c);
						}

						if (row2.Block__c == null) {
							pstmt_tPostgresqlOutput_2.setNull(131,
									java.sql.Types.VARCHAR);
						} else {
							pstmt_tPostgresqlOutput_2.setString(131,
									row2.Block__c);
						}

						if (row2.Order_Detail__c == null) {
							pstmt_tPostgresqlOutput_2.setNull(132,
									java.sql.Types.VARCHAR);
						} else {
							pstmt_tPostgresqlOutput_2.setString(132,
									row2.Order_Detail__c);
						}

						if (row2.Physician__c == null) {
							pstmt_tPostgresqlOutput_2.setNull(133,
									java.sql.Types.VARCHAR);
						} else {
							pstmt_tPostgresqlOutput_2.setString(133,
									row2.Physician__c);
						}

						if (row2.Sample_Quantity_Received__c == null) {
							pstmt_tPostgresqlOutput_2.setNull(134,
									java.sql.Types.DOUBLE);
						} else {
							pstmt_tPostgresqlOutput_2.setDouble(134,
									row2.Sample_Quantity_Received__c);
						}

						if (row2.Order_Received_Date__c != null) {
							pstmt_tPostgresqlOutput_2.setTimestamp(
									135,
									new java.sql.Timestamp(
											row2.Order_Received_Date__c
													.getTime()));
						} else {
							pstmt_tPostgresqlOutput_2.setNull(135,
									java.sql.Types.TIMESTAMP);
						}

						if (row2.Order_Value__c == null) {
							pstmt_tPostgresqlOutput_2.setNull(136,
									java.sql.Types.DOUBLE);
						} else {
							pstmt_tPostgresqlOutput_2.setDouble(136,
									row2.Order_Value__c);
						}

						if (row2.Sales_Territory__c == null) {
							pstmt_tPostgresqlOutput_2.setNull(137,
									java.sql.Types.VARCHAR);
						} else {
							pstmt_tPostgresqlOutput_2.setString(137,
									row2.Sales_Territory__c);
						}

						if (row2.Pharma_Sponsored__c == null) {
							pstmt_tPostgresqlOutput_2.setNull(138,
									java.sql.Types.BOOLEAN);
						} else {
							pstmt_tPostgresqlOutput_2.setBoolean(138,
									row2.Pharma_Sponsored__c);
						}

						if (row2.Form_of_Payment_Received_or_Negotiated__c == null) {
							pstmt_tPostgresqlOutput_2.setNull(139,
									java.sql.Types.BOOLEAN);
						} else {
							pstmt_tPostgresqlOutput_2
									.setBoolean(
											139,
											row2.Form_of_Payment_Received_or_Negotiated__c);
						}

						if (row2.VAT__c == null) {
							pstmt_tPostgresqlOutput_2.setNull(140,
									java.sql.Types.VARCHAR);
						} else {
							pstmt_tPostgresqlOutput_2.setString(140,
									row2.VAT__c);
						}

						if (row2.Campaigns__c == null) {
							pstmt_tPostgresqlOutput_2.setNull(141,
									java.sql.Types.VARCHAR);
						} else {
							pstmt_tPostgresqlOutput_2.setString(141,
									row2.Campaigns__c);
						}

						if (row2.Purchase_Order_Record__c == null) {
							pstmt_tPostgresqlOutput_2.setNull(142,
									java.sql.Types.VARCHAR);
						} else {
							pstmt_tPostgresqlOutput_2.setString(142,
									row2.Purchase_Order_Record__c);
						}

						if (row2.Broker_Account__c == null) {
							pstmt_tPostgresqlOutput_2.setNull(143,
									java.sql.Types.VARCHAR);
						} else {
							pstmt_tPostgresqlOutput_2.setString(143,
									row2.Broker_Account__c);
						}

						if (row2.Sample_Lab_Location__c == null) {
							pstmt_tPostgresqlOutput_2.setNull(144,
									java.sql.Types.VARCHAR);
						} else {
							pstmt_tPostgresqlOutput_2.setString(144,
									row2.Sample_Lab_Location__c);
						}

						if (row2.Physician_Full_Name__c == null) {
							pstmt_tPostgresqlOutput_2.setNull(145,
									java.sql.Types.VARCHAR);
						} else {
							pstmt_tPostgresqlOutput_2.setString(145,
									row2.Physician_Full_Name__c);
						}

						if (row2.Estimated_Invoice_Date__c != null) {
							pstmt_tPostgresqlOutput_2.setTimestamp(
									146,
									new java.sql.Timestamp(
											row2.Estimated_Invoice_Date__c
													.getTime()));
						} else {
							pstmt_tPostgresqlOutput_2.setNull(146,
									java.sql.Types.TIMESTAMP);
						}

						if (row2.dermoSEQ_Stage__c == null) {
							pstmt_tPostgresqlOutput_2.setNull(147,
									java.sql.Types.VARCHAR);
						} else {
							pstmt_tPostgresqlOutput_2.setString(147,
									row2.dermoSEQ_Stage__c);
						}

						if (row2.Sales_Credit_Date__c != null) {
							pstmt_tPostgresqlOutput_2
									.setTimestamp(
											148,
											new java.sql.Timestamp(
													row2.Sales_Credit_Date__c
															.getTime()));
						} else {
							pstmt_tPostgresqlOutput_2.setNull(148,
									java.sql.Types.TIMESTAMP);
						}

						if (row2.Broker_Tax_ID__c == null) {
							pstmt_tPostgresqlOutput_2.setNull(149,
									java.sql.Types.VARCHAR);
						} else {
							pstmt_tPostgresqlOutput_2.setString(149,
									row2.Broker_Tax_ID__c);
						}

						if (row2.Broker_ID_Number__c == null) {
							pstmt_tPostgresqlOutput_2.setNull(150,
									java.sql.Types.VARCHAR);
						} else {
							pstmt_tPostgresqlOutput_2.setString(150,
									row2.Broker_ID_Number__c);
						}

						if (row2.Pharma__c == null) {
							pstmt_tPostgresqlOutput_2.setNull(151,
									java.sql.Types.VARCHAR);
						} else {
							pstmt_tPostgresqlOutput_2.setString(151,
									row2.Pharma__c);
						}

						if (row2.Broker_Contact__c == null) {
							pstmt_tPostgresqlOutput_2.setNull(152,
									java.sql.Types.VARCHAR);
						} else {
							pstmt_tPostgresqlOutput_2.setString(152,
									row2.Broker_Contact__c);
						}

						if (row2.Sequencing_Completion_Deadline_Date__c != null) {
							pstmt_tPostgresqlOutput_2
									.setTimestamp(
											153,
											new java.sql.Timestamp(
													row2.Sequencing_Completion_Deadline_Date__c
															.getTime()));
						} else {
							pstmt_tPostgresqlOutput_2.setNull(153,
									java.sql.Types.TIMESTAMP);
						}

						if (row2.Distributor__c == null) {
							pstmt_tPostgresqlOutput_2.setNull(154,
									java.sql.Types.VARCHAR);
						} else {
							pstmt_tPostgresqlOutput_2.setString(154,
									row2.Distributor__c);
						}

						if (row2.Broker_Address__c == null) {
							pstmt_tPostgresqlOutput_2.setNull(155,
									java.sql.Types.VARCHAR);
						} else {
							pstmt_tPostgresqlOutput_2.setString(155,
									row2.Broker_Address__c);
						}

						if (row2.Broker_Contact_Phone__c == null) {
							pstmt_tPostgresqlOutput_2.setNull(156,
									java.sql.Types.VARCHAR);
						} else {
							pstmt_tPostgresqlOutput_2.setString(156,
									row2.Broker_Contact_Phone__c);
						}

						if (row2.Broker_Contact_Email__c == null) {
							pstmt_tPostgresqlOutput_2.setNull(157,
									java.sql.Types.VARCHAR);
						} else {
							pstmt_tPostgresqlOutput_2.setString(157,
									row2.Broker_Contact_Email__c);
						}

						if (row2.Ship_To_Contact_With_PO__c == null) {
							pstmt_tPostgresqlOutput_2.setNull(158,
									java.sql.Types.VARCHAR);
						} else {
							pstmt_tPostgresqlOutput_2.setString(158,
									row2.Ship_To_Contact_With_PO__c);
						}

						if (row2.Extractions_Needed__c == null) {
							pstmt_tPostgresqlOutput_2.setNull(159,
									java.sql.Types.BOOLEAN);
						} else {
							pstmt_tPostgresqlOutput_2.setBoolean(159,
									row2.Extractions_Needed__c);
						}

						if (row2.Attn_To__c == null) {
							pstmt_tPostgresqlOutput_2.setNull(160,
									java.sql.Types.VARCHAR);
						} else {
							pstmt_tPostgresqlOutput_2.setString(160,
									row2.Attn_To__c);
						}

						if (row2.Mouse_TCRB_Block__c == null) {
							pstmt_tPostgresqlOutput_2.setNull(161,
									java.sql.Types.VARCHAR);
						} else {
							pstmt_tPostgresqlOutput_2.setString(161,
									row2.Mouse_TCRB_Block__c);
						}

						pstmt_tPostgresqlOutput_2.addBatch();
						nb_line_tPostgresqlOutput_2++;

						batchSizeCounter_tPostgresqlOutput_2++;

						if ((batchSize_tPostgresqlOutput_2 > 0)
								&& (batchSize_tPostgresqlOutput_2 <= batchSizeCounter_tPostgresqlOutput_2)) {
							try {
								int countSum_tPostgresqlOutput_2 = 0;

								for (int countEach_tPostgresqlOutput_2 : pstmt_tPostgresqlOutput_2
										.executeBatch()) {
									countSum_tPostgresqlOutput_2 += (countEach_tPostgresqlOutput_2 < 0 ? 0
											: countEach_tPostgresqlOutput_2);
								}

								insertedCount_tPostgresqlOutput_2 += countSum_tPostgresqlOutput_2;

								batchSizeCounter_tPostgresqlOutput_2 = 0;
							} catch (java.sql.BatchUpdateException e) {

								int countSum_tPostgresqlOutput_2 = 0;
								for (int countEach_tPostgresqlOutput_2 : e
										.getUpdateCounts()) {
									countSum_tPostgresqlOutput_2 += (countEach_tPostgresqlOutput_2 < 0 ? 0
											: countEach_tPostgresqlOutput_2);
								}

								insertedCount_tPostgresqlOutput_2 += countSum_tPostgresqlOutput_2;

								System.err.println(e.getMessage());

							}
						}

						commitCounter_tPostgresqlOutput_2++;
						if (commitEvery_tPostgresqlOutput_2 <= commitCounter_tPostgresqlOutput_2) {
							if ((batchSize_tPostgresqlOutput_2 > 0)
									&& (batchSizeCounter_tPostgresqlOutput_2 > 0)) {
								try {
									int countSum_tPostgresqlOutput_2 = 0;

									for (int countEach_tPostgresqlOutput_2 : pstmt_tPostgresqlOutput_2
											.executeBatch()) {
										countSum_tPostgresqlOutput_2 += (countEach_tPostgresqlOutput_2 < 0 ? 0
												: countEach_tPostgresqlOutput_2);
									}

									insertedCount_tPostgresqlOutput_2 += countSum_tPostgresqlOutput_2;

									batchSizeCounter_tPostgresqlOutput_2 = 0;
								} catch (java.sql.BatchUpdateException e) {

									int countSum_tPostgresqlOutput_2 = 0;
									for (int countEach_tPostgresqlOutput_2 : e
											.getUpdateCounts()) {
										countSum_tPostgresqlOutput_2 += (countEach_tPostgresqlOutput_2 < 0 ? 0
												: countEach_tPostgresqlOutput_2);
									}

									insertedCount_tPostgresqlOutput_2 += countSum_tPostgresqlOutput_2;

									System.err.println(e.getMessage());

								}
							}
							conn_tPostgresqlOutput_2.commit();

							commitCounter_tPostgresqlOutput_2 = 0;
						}

						tos_count_tPostgresqlOutput_2++;

						/**
						 * [tPostgresqlOutput_2 main ] stop
						 */

						/**
						 * [tSalesforceInput_2 end ] start
						 */

						currentComponent = "tSalesforceInput_2";

						// (for salesforce wizard preview)
						if (limit_tSalesforceInput_2 > 0
								&& nb_line_tSalesforceInput_2 >= limit_tSalesforceInput_2) {
							bContinue_tSalesforceInput_2 = false;
							break;
						}

					}
					// handle the loop + 1 problem by checking the most recent
					// queryResult
					if (qr_tSalesforceInput_2.getDone()) {
						bContinue_tSalesforceInput_2 = false;
					} else {
						qr_tSalesforceInput_2 = sfMgr_tSalesforceInput_2
								.queryMore(
										qr_tSalesforceInput_2.getQueryLocator(),
										new Integer(250));
						topqr_tSalesforceInput_2 = new org.talend.salesforce.TopQueryResult();
						topqr_tSalesforceInput_2
								.processTopQueryResult(qr_tSalesforceInput_2);
					}
				}

				sfMgr_tSalesforceInput_2.logout();

				globalMap.put("tSalesforceInput_2_NB_LINE",
						nb_line_tSalesforceInput_2);

				ok_Hash.put("tSalesforceInput_2", true);
				end_Hash.put("tSalesforceInput_2", System.currentTimeMillis());

				/**
				 * [tSalesforceInput_2 end ] stop
				 */

				/**
				 * [tPostgresqlOutput_2 end ] start
				 */

				currentComponent = "tPostgresqlOutput_2";

				try {
					int countSum_tPostgresqlOutput_2 = 0;
					if (pstmt_tPostgresqlOutput_2 != null
							&& batchSizeCounter_tPostgresqlOutput_2 > 0) {

						for (int countEach_tPostgresqlOutput_2 : pstmt_tPostgresqlOutput_2
								.executeBatch()) {
							countSum_tPostgresqlOutput_2 += (countEach_tPostgresqlOutput_2 < 0 ? 0
									: countEach_tPostgresqlOutput_2);
						}

					}

					insertedCount_tPostgresqlOutput_2 += countSum_tPostgresqlOutput_2;

				} catch (java.sql.BatchUpdateException e) {

					int countSum_tPostgresqlOutput_2 = 0;
					for (int countEach_tPostgresqlOutput_2 : e
							.getUpdateCounts()) {
						countSum_tPostgresqlOutput_2 += (countEach_tPostgresqlOutput_2 < 0 ? 0
								: countEach_tPostgresqlOutput_2);
					}

					insertedCount_tPostgresqlOutput_2 += countSum_tPostgresqlOutput_2;

					System.err.println(e.getMessage());

				}

				if (pstmt_tPostgresqlOutput_2 != null) {
					pstmt_tPostgresqlOutput_2.close();
				}

				conn_tPostgresqlOutput_2.commit();

				conn_tPostgresqlOutput_2.close();

				resourceMap.put("finish_tPostgresqlOutput_2", true);

				nb_line_deleted_tPostgresqlOutput_2 = nb_line_deleted_tPostgresqlOutput_2
						+ deletedCount_tPostgresqlOutput_2;
				nb_line_update_tPostgresqlOutput_2 = nb_line_update_tPostgresqlOutput_2
						+ updatedCount_tPostgresqlOutput_2;
				nb_line_inserted_tPostgresqlOutput_2 = nb_line_inserted_tPostgresqlOutput_2
						+ insertedCount_tPostgresqlOutput_2;
				nb_line_rejected_tPostgresqlOutput_2 = nb_line_rejected_tPostgresqlOutput_2
						+ rejectedCount_tPostgresqlOutput_2;

				globalMap.put("tPostgresqlOutput_2_NB_LINE",
						nb_line_tPostgresqlOutput_2);
				globalMap.put("tPostgresqlOutput_2_NB_LINE_UPDATED",
						nb_line_update_tPostgresqlOutput_2);
				globalMap.put("tPostgresqlOutput_2_NB_LINE_INSERTED",
						nb_line_inserted_tPostgresqlOutput_2);
				globalMap.put("tPostgresqlOutput_2_NB_LINE_DELETED",
						nb_line_deleted_tPostgresqlOutput_2);
				globalMap.put("tPostgresqlOutput_2_NB_LINE_REJECTED",
						nb_line_rejected_tPostgresqlOutput_2);

				if (execStat) {
					if (resourceMap.get("inIterateVComp") == null
							|| !((Boolean) resourceMap.get("inIterateVComp"))) {
						runStat.updateStatOnConnection("row2" + iterateId, 2, 0);
					}
				}

				ok_Hash.put("tPostgresqlOutput_2", true);
				end_Hash.put("tPostgresqlOutput_2", System.currentTimeMillis());

				/**
				 * [tPostgresqlOutput_2 end ] stop
				 */

			}// end the resume

		} catch (java.lang.Exception e) {

			TalendException te = new TalendException(e, currentComponent,
					globalMap);

			throw te;
		} catch (java.lang.Error error) {

			runStat.stopThreadStat();

			throw error;
		} finally {

			try {

				/**
				 * [tSalesforceInput_2 finally ] start
				 */

				currentComponent = "tSalesforceInput_2";

				/**
				 * [tSalesforceInput_2 finally ] stop
				 */

				/**
				 * [tPostgresqlOutput_2 finally ] start
				 */

				currentComponent = "tPostgresqlOutput_2";

				if (resourceMap.get("finish_tPostgresqlOutput_2") == null) {
					if (resourceMap.get("conn_tPostgresqlOutput_2") != null) {
						try {

							((java.sql.Connection) resourceMap
									.get("conn_tPostgresqlOutput_2")).close();

						} catch (java.sql.SQLException sqlEx_tPostgresqlOutput_2) {
							String errorMessage_tPostgresqlOutput_2 = "failed to close the connection in tPostgresqlOutput_2 :"
									+ sqlEx_tPostgresqlOutput_2.getMessage();

							System.err
									.println(errorMessage_tPostgresqlOutput_2);
						}
					}
				}

				/**
				 * [tPostgresqlOutput_2 finally ] stop
				 */

			} catch (java.lang.Exception e) {
				// ignore
			} catch (java.lang.Error error) {
				// ignore
			}
			resourceMap = null;
		}

		globalMap.put("tSalesforceInput_2_SUBPROCESS_STATE", 1);
	}

	public String resuming_logs_dir_path = null;
	public String resuming_checkpoint_path = null;
	public String parent_part_launcher = null;
	private String resumeEntryMethodName = null;
	private boolean globalResumeTicket = false;

	public boolean watch = false;
	// portStats is null, it means don't execute the statistics
	public Integer portStats = null;
	public int portTraces = 4334;
	public String clientHost;
	public String defaultClientHost = "localhost";
	public String contextStr = "Default";
	public boolean isDefaultContext = true;
	public String pid = "0";
	public String rootPid = null;
	public String fatherPid = null;
	public String fatherNode = null;
	public long startTime = 0;
	public boolean isChildJob = false;
	public String log4jLevel = "";

	private boolean execStat = true;

	private ThreadLocal<java.util.Map<String, String>> threadLocal = new ThreadLocal<java.util.Map<String, String>>() {
		protected java.util.Map<String, String> initialValue() {
			java.util.Map<String, String> threadRunResultMap = new java.util.HashMap<String, String>();
			threadRunResultMap.put("errorCode", null);
			threadRunResultMap.put("status", "");
			return threadRunResultMap;
		};
	};

	private SyncInt runningThreadCount = new SyncInt();

	private class SyncInt {
		private int count = 0;

		public synchronized void add(int i) {
			count += i;
		}

		public synchronized int getCount() {
			return count;
		}
	}

	private java.util.Properties context_param = new java.util.Properties();
	public java.util.Map<String, Object> parentContextMap = new java.util.HashMap<String, Object>();

	public String status = "";

	public static void main(String[] args) {
		final Step01_Stage_salesforce_data Step01_Stage_salesforce_dataClass = new Step01_Stage_salesforce_data();

		int exitCode = Step01_Stage_salesforce_dataClass.runJobInTOS(args);

		System.exit(exitCode);
	}

	public String[][] runJob(String[] args) {

		int exitCode = runJobInTOS(args);
		String[][] bufferValue = new String[][] { { Integer.toString(exitCode) } };

		return bufferValue;
	}

	public boolean hastBufferOutputComponent() {
		boolean hastBufferOutput = false;

		return hastBufferOutput;
	}

	public int runJobInTOS(String[] args) {
		// reset status
		status = "";

		String lastStr = "";
		for (String arg : args) {
			if (arg.equalsIgnoreCase("--context_param")) {
				lastStr = arg;
			} else if (lastStr.equals("")) {
				evalParam(arg);
			} else {
				evalParam(lastStr + " " + arg);
				lastStr = "";
			}
		}

		if (clientHost == null) {
			clientHost = defaultClientHost;
		}

		if (pid == null || "0".equals(pid)) {
			pid = TalendString.getAsciiRandomString(6);
		}

		if (rootPid == null) {
			rootPid = pid;
		}
		if (fatherPid == null) {
			fatherPid = pid;
		} else {
			isChildJob = true;
		}

		if (portStats != null) {
			// portStats = -1; //for testing
			if (portStats < 0 || portStats > 65535) {
				// issue:10869, the portStats is invalid, so this client socket
				// can't open
				System.err.println("The statistics socket port " + portStats
						+ " is invalid.");
				execStat = false;
			}
		} else {
			execStat = false;
		}

		try {
			// call job/subjob with an existing context, like:
			// --context=production. if without this parameter, there will use
			// the default context instead.
			java.io.InputStream inContext = Step01_Stage_salesforce_data.class
					.getClassLoader().getResourceAsStream(
							"local_project/step01_stage_salesforce_data_0_1/contexts/"
									+ contextStr + ".properties");
			if (isDefaultContext && inContext == null) {

			} else {
				if (inContext != null) {
					// defaultProps is in order to keep the original context
					// value
					defaultProps.load(inContext);
					inContext.close();
					context = new ContextProperties(defaultProps);
				} else {
					// print info and job continue to run, for case:
					// context_param is not empty.
					System.err.println("Could not find the context "
							+ contextStr);
				}
			}

			if (!context_param.isEmpty()) {
				context.putAll(context_param);
			}
		} catch (java.io.IOException ie) {
			System.err.println("Could not load context " + contextStr);
			ie.printStackTrace();
		}

		// get context value from parent directly
		if (parentContextMap != null && !parentContextMap.isEmpty()) {
		}

		// Resume: init the resumeUtil
		resumeEntryMethodName = ResumeUtil
				.getResumeEntryMethodName(resuming_checkpoint_path);
		resumeUtil = new ResumeUtil(resuming_logs_dir_path, isChildJob, rootPid);
		resumeUtil.initCommonInfo(pid, rootPid, fatherPid, projectName,
				jobName, contextStr, jobVersion);

		List<String> parametersToEncrypt = new java.util.ArrayList<String>();
		// Resume: jobStart
		resumeUtil.addLog("JOB_STARTED", "JOB:" + jobName,
				parent_part_launcher, Thread.currentThread().getId() + "", "",
				"", "", "",
				resumeUtil.convertToJsonText(context, parametersToEncrypt));

		if (execStat) {
			try {
				runStat.openSocket(!isChildJob);
				runStat.setAllPID(rootPid, fatherPid, pid, jobName);
				runStat.startThreadStat(clientHost, portStats);
				runStat.updateStatOnJob(RunStat.JOBSTART, fatherNode);
			} catch (java.io.IOException ioException) {
				ioException.printStackTrace();
			}
		}

		java.util.concurrent.ConcurrentHashMap<Object, Object> concurrentHashMap = new java.util.concurrent.ConcurrentHashMap<Object, Object>();
		globalMap.put("concurrentHashMap", concurrentHashMap);

		long startUsedMemory = Runtime.getRuntime().totalMemory()
				- Runtime.getRuntime().freeMemory();
		long endUsedMemory = 0;
		long end = 0;

		startTime = System.currentTimeMillis();

		this.globalResumeTicket = true;// to run tPreJob

		this.globalResumeTicket = false;// to run others jobs

		runningThreadCount.add(1);
		new Thread() {
			public void run() {
				java.util.Map threadRunResultMap = new java.util.HashMap();
				threadRunResultMap.put("errorCode", null);
				threadRunResultMap.put("status", "");
				threadLocal.set(threadRunResultMap);

				try {
					((java.util.Map) threadLocal.get()).put("errorCode", null);
					tSalesforceInput_1Process(globalMap);
					if (!"failure".equals(((java.util.Map) threadLocal.get())
							.get("status"))) {
						((java.util.Map) threadLocal.get())
								.put("status", "end");
					}
				} catch (TalendException e_tSalesforceInput_1) {
					globalMap.put("tSalesforceInput_1_SUBPROCESS_STATE", -1);

					e_tSalesforceInput_1.printStackTrace();

				} catch (Error e_tSalesforceInput_1) {
					globalMap.put("tSalesforceInput_1_SUBPROCESS_STATE", -1);

					e_tSalesforceInput_1.printStackTrace();

				} finally {
					Integer localErrorCode = (Integer) (((java.util.Map) threadLocal
							.get()).get("errorCode"));
					String localStatus = (String) (((java.util.Map) threadLocal
							.get()).get("status"));
					if (localErrorCode != null) {
						if (errorCode == null
								|| localErrorCode.compareTo(errorCode) > 0) {
							errorCode = localErrorCode;
						}
					}
					if (!status.equals("failure")) {
						status = localStatus;
					}

					runningThreadCount.add(-1);
				}
			}
		}.start();

		runningThreadCount.add(1);
		new Thread() {
			public void run() {
				java.util.Map threadRunResultMap = new java.util.HashMap();
				threadRunResultMap.put("errorCode", null);
				threadRunResultMap.put("status", "");
				threadLocal.set(threadRunResultMap);

				try {
					((java.util.Map) threadLocal.get()).put("errorCode", null);
					tSalesforceInput_2Process(globalMap);
					if (!"failure".equals(((java.util.Map) threadLocal.get())
							.get("status"))) {
						((java.util.Map) threadLocal.get())
								.put("status", "end");
					}
				} catch (TalendException e_tSalesforceInput_2) {
					globalMap.put("tSalesforceInput_2_SUBPROCESS_STATE", -1);

					e_tSalesforceInput_2.printStackTrace();

				} catch (Error e_tSalesforceInput_2) {
					globalMap.put("tSalesforceInput_2_SUBPROCESS_STATE", -1);

					e_tSalesforceInput_2.printStackTrace();

				} finally {
					Integer localErrorCode = (Integer) (((java.util.Map) threadLocal
							.get()).get("errorCode"));
					String localStatus = (String) (((java.util.Map) threadLocal
							.get()).get("status"));
					if (localErrorCode != null) {
						if (errorCode == null
								|| localErrorCode.compareTo(errorCode) > 0) {
							errorCode = localErrorCode;
						}
					}
					if (!status.equals("failure")) {
						status = localStatus;
					}

					runningThreadCount.add(-1);
				}
			}
		}.start();

		while (runningThreadCount.getCount() > 0) {
			try {
				Thread.sleep(10);
			} catch (java.lang.Exception e) {
				e.printStackTrace();
			}
		}

		this.globalResumeTicket = true;// to run tPostJob

		end = System.currentTimeMillis();

		if (watch) {
			System.out.println((end - startTime) + " milliseconds");
		}

		endUsedMemory = Runtime.getRuntime().totalMemory()
				- Runtime.getRuntime().freeMemory();
		if (false) {
			System.out
					.println((endUsedMemory - startUsedMemory)
							+ " bytes memory increase when running : Step01_Stage_salesforce_data");
		}

		if (execStat) {
			runStat.updateStatOnJob(RunStat.JOBEND, fatherNode);
			runStat.stopThreadStat();
		}
		int returnCode = 0;
		if (errorCode == null) {
			returnCode = status != null && status.equals("failure") ? 1 : 0;
		} else {
			returnCode = errorCode.intValue();
		}
		resumeUtil.addLog("JOB_ENDED", "JOB:" + jobName, parent_part_launcher,
				Thread.currentThread().getId() + "", "", "" + returnCode, "",
				"", "");

		return returnCode;

	}

	// only for OSGi env
	public void destroy() {

	}

	private java.util.Map<String, Object> getSharedConnections4REST() {
		java.util.Map<String, Object> connections = new java.util.HashMap<String, Object>();

		return connections;
	}

	private void evalParam(String arg) {
		if (arg.startsWith("--resuming_logs_dir_path")) {
			resuming_logs_dir_path = arg.substring(25);
		} else if (arg.startsWith("--resuming_checkpoint_path")) {
			resuming_checkpoint_path = arg.substring(27);
		} else if (arg.startsWith("--parent_part_launcher")) {
			parent_part_launcher = arg.substring(23);
		} else if (arg.startsWith("--watch")) {
			watch = true;
		} else if (arg.startsWith("--stat_port=")) {
			String portStatsStr = arg.substring(12);
			if (portStatsStr != null && !portStatsStr.equals("null")) {
				portStats = Integer.parseInt(portStatsStr);
			}
		} else if (arg.startsWith("--trace_port=")) {
			portTraces = Integer.parseInt(arg.substring(13));
		} else if (arg.startsWith("--client_host=")) {
			clientHost = arg.substring(14);
		} else if (arg.startsWith("--context=")) {
			contextStr = arg.substring(10);
			isDefaultContext = false;
		} else if (arg.startsWith("--father_pid=")) {
			fatherPid = arg.substring(13);
		} else if (arg.startsWith("--root_pid=")) {
			rootPid = arg.substring(11);
		} else if (arg.startsWith("--father_node=")) {
			fatherNode = arg.substring(14);
		} else if (arg.startsWith("--pid=")) {
			pid = arg.substring(6);
		} else if (arg.startsWith("--context_param")) {
			String keyValue = arg.substring(16);
			int index = -1;
			if (keyValue != null && (index = keyValue.indexOf('=')) > -1) {
				if (fatherPid == null) {
					context_param.put(keyValue.substring(0, index),
							replaceEscapeChars(keyValue.substring(index + 1)));
				} else { // the subjob won't escape the especial chars
					context_param.put(keyValue.substring(0, index),
							keyValue.substring(index + 1));
				}
			}
		} else if (arg.startsWith("--log4jLevel=")) {
			log4jLevel = arg.substring(13);
		}

	}

	private final String[][] escapeChars = { { "\\\\", "\\" }, { "\\n", "\n" },
			{ "\\'", "\'" }, { "\\r", "\r" }, { "\\f", "\f" }, { "\\b", "\b" },
			{ "\\t", "\t" } };

	private String replaceEscapeChars(String keyValue) {

		if (keyValue == null || ("").equals(keyValue.trim())) {
			return keyValue;
		}

		StringBuilder result = new StringBuilder();
		int currIndex = 0;
		while (currIndex < keyValue.length()) {
			int index = -1;
			// judege if the left string includes escape chars
			for (String[] strArray : escapeChars) {
				index = keyValue.indexOf(strArray[0], currIndex);
				if (index >= 0) {

					result.append(keyValue.substring(currIndex,
							index + strArray[0].length()).replace(strArray[0],
							strArray[1]));
					currIndex = index + strArray[0].length();
					break;
				}
			}
			// if the left string doesn't include escape chars, append the left
			// into the result
			if (index < 0) {
				result.append(keyValue.substring(currIndex));
				currIndex = currIndex + keyValue.length();
			}
		}

		return result.toString();
	}

	public Integer getErrorCode() {
		return errorCode;
	}

	public String getStatus() {
		return status;
	}

	ResumeUtil resumeUtil = null;
}
/************************************************************************************************
 * 256100 characters generated by Talend Open Studio for ESB on the March 9,
 * 2016 2:38:11 PM PST
 ************************************************************************************************/
