<wadl:application xmlns:wadl="http://wadl.dev.java.net/2009/02" xmlns:xs="http://www.w3.org/2001/XMLSchema">
  <wadl:doc xmlns:enunciate="http://enunciate.codehaus.org/" enunciate:generatedBy="Enunciate-1.21"/>
  <wadl:grammars>
    <wadl:include href="./ns0.xsd"/>
    <wadl:include href="reagentkit.xsd"/>
    <wadl:include href="./controltype.xsd"/>
    <wadl:include href="./artifactgroup.xsd"/>
    <wadl:include href="./artifact.xsd"/>
    <wadl:include href="./configuration.xsd"/>
    <wadl:include href="./process.xsd"/>
    <wadl:include href="./processexecution.xsd"/>
    <wadl:include href="./queue.xsd"/>
    <wadl:include href="./wkfcnf.xsd"/>
    <wadl:include href="./protstepcnf.xsd"/>
    <wadl:include href="./processtype.xsd"/>
    <wadl:include href="./ri.xsd"/>
    <wadl:include href="./stage.xsd"/>
    <wadl:include href="./processtemplate.xsd"/>
    <wadl:include href="./ver.xsd"/>
    <wadl:include href="./protcnf.xsd"/>
    <wadl:include href="./file.xsd"/>
    <wadl:include href="./reagentlot.xsd"/>
    <wadl:include href="./sample.xsd"/>
    <wadl:include href="./instrument.xsd"/>
    <wadl:include href="./reagenttype.xsd"/>
    <wadl:include href="./step.xsd"/>
    <wadl:include href="./permission.xsd"/>
    <wadl:include href="./ns1.xsd"/>
    <wadl:include href="./userdefined.xsd"/>
    <wadl:include href="./container.xsd"/>
    <wadl:include href="./routing.xsd"/>
    <wadl:include href="./lab.xsd"/>
    <wadl:include href="./exception.xsd"/>
    <wadl:include href="./project.xsd"/>
    <wadl:include href="./containertype.xsd"/>
    <wadl:include href="./researcher.xsd"/>
    <wadl:include href="./property.xsd"/>
    <wadl:include href="./role.xsd"/>
  </wadl:grammars>
  <wadl:resources base="http://clims02:8080/api">
    <wadl:resource path="/v2">
      <wadl:method name="GET">
        <wadl:doc>
          <![CDATA[Provides an entry point for the API, listing the available resources in the system.]]>
        </wadl:doc>
        <wadl:response>
          <wadl:doc>
            <![CDATA[The list of links providing URIs for the supported API versions in the system.]]>
          </wadl:doc>
          <wadl:representation mediaType="application/xml" element="ver:versions" xmlns:ver="http://genologics.com/ri/version"/>
        </wadl:response>
      </wadl:method>
    </wadl:resource>
    <wadl:resource path="/v2/artifactgroups">
      <wadl:method name="GET">
        <wadl:doc>
          <![CDATA[Displays a list of artifact groups stored in the system.
If the number of artifact groups returned exceeds the display maximum, the results are paged.<br/><br/>

When submitting a GET request, you can use the following query parameters to filter the results.
For more information about using query parameters, please refer to the Filtering list resources section under REST General Concepts.]]>
        </wadl:doc>
        <wadl:request>
          <wadl:param name="start-index" style="query">
            <wadl:doc>
              <![CDATA[When working with large lists of artifact groups, displays the artifact groups from a set point. If omitted, the first page of results is returned.]]>
            </wadl:doc>
          </wadl:param>
          <wadl:param name="artifactgroup" style="query">
            <wadl:doc>
              <![CDATA[Displays only the artifact groups with names that match the specified value. When filtering results, you can repeat this parameter.]]>
            </wadl:doc>
          </wadl:param>
        </wadl:request>
        <wadl:response>
          <wadl:doc>
            <![CDATA[The system returns a response that includes a list of artifact groups and URI links, starting from the start-index offset.]]>
          </wadl:doc>
          <wadl:representation mediaType="application/xml" element="artgr:artifactgroup" xmlns:artgr="http://genologics.com/ri/artifactgroup"/>
        </wadl:response>
      </wadl:method>
    </wadl:resource>
    <wadl:resource path="/v2/artifacts">
      <wadl:method name="GET">
        <wadl:doc>
          <![CDATA[Displays a list of artifacts stored in the system. If the number of artifacts returned exceeds the display maximum, the results are paged.<br/><br/>

When submitting a GET request, you can use the following query parameters to filter the results.
For more information about using query parameters, please refer to the Filtering list resources section under REST General Concepts.]]>
        </wadl:doc>
        <wadl:request>
          <wadl:param name="start-index" style="query">
            <wadl:doc>
              <![CDATA[When working with large lists of results, displays the results from a set point. If omitted, the first page of results is returned.]]>
            </wadl:doc>
          </wadl:param>
          <wadl:param name="name" style="query">
            <wadl:doc>
              <![CDATA[Displays only artifacts with names that match the specified value. When configuring a process in the client, this is known as the artifact's Display Name. When filtering results, you can repeat this parameter.]]>
            </wadl:doc>
          </wadl:param>
          <wadl:param name="type" style="query">
            <wadl:doc>
              <![CDATA[Displays only artifacts whose type matches the specified value, such as Analyte or ResultFile. When filtering results, you can repeat this parameter. UDF filtering requires one (and only one) artifact type to be specified.]]>
            </wadl:doc>
          </wadl:param>
          <wadl:param name="udf.UDFNAME[.OPERATOR]=UDFVALUE" style="query">
            <wadl:doc>
              <![CDATA[Displays only artifacts that include the specified UDF value. The system will only return artifacts with standalone UDFs; it will not return artifacts with UDFs that belong to a UDT. When filtering results, you can repeat this parameter.]]>
            </wadl:doc>
          </wadl:param>
          <wadl:param name="process-type" style="query">
            <wadl:doc>
              <![CDATA[Displays only the artifacts that were produced by the specified process type (the name of the process in the client). When filtering results, you can repeat this parameter.]]>
            </wadl:doc>
          </wadl:param>
          <wadl:param name="working-flag" style="query">
            <wadl:doc>
              <![CDATA[Displays only the artifacts that have had their working flag (the working status in the client) set to the specified value. You can specify true or false.]]>
            </wadl:doc>
          </wadl:param>
          <wadl:param name="qc-flag" style="query">
            <wadl:doc>
              <![CDATA[Displays only the artifacts containing the specified QC flag value (which is applied by running a process). You can use one of the following values: UNKNOWN, PASSED, FAILED, CONTINUE. UNKNOWN indicates that a quality control (QC) step has not been performed. PASSED indicates that the artifact has successfully passed a QC step. FAILED indicates that the artifact has failed a QC step. CONTINUE is a legacy system value that is no longer applied to artifacts. When filtering results, you can repeat this parameter.]]>
            </wadl:doc>
          </wadl:param>
          <wadl:param name="sample-name" style="query">
            <wadl:doc>
              <![CDATA[Displays only the artifacts that are related to the specified submitted sample name. When filtering results, you can repeat this parameter.]]>
            </wadl:doc>
          </wadl:param>
          <wadl:param name="samplelimsid" style="query">
            <wadl:doc>
              <![CDATA[Displays only the artifacts that are related to the submitted sample with the specified LIMS ID. When filtering results, you can repeat this parameter.]]>
            </wadl:doc>
          </wadl:param>
          <wadl:param name="artifactgroup" style="query">
            <wadl:doc>
              <![CDATA[Displays only the artifacts that belong to the specified artifact group (the name of the experiment in the client). When filtering results, you can repeat this parameter.]]>
            </wadl:doc>
          </wadl:param>
          <wadl:param name="containername" style="query">
            <wadl:doc>
              <![CDATA[Displays only the artifacts that reside in containers whose name (identifier) matches the specified value. When filtering results, you can repeat this parameter.]]>
            </wadl:doc>
          </wadl:param>
          <wadl:param name="containerlimsid" style="query">
            <wadl:doc>
              <![CDATA[Displays only the artifacts that reside in containers whose LIMS ID matches the specified value. When filtering results, you can repeat this parameter.]]>
            </wadl:doc>
          </wadl:param>
          <wadl:param name="reagent-label" style="query">
            <wadl:doc>
              <![CDATA[Displays only the artifacts with attached reagent labels whose name (identifier) matches the specified values. When filtering results, you can repeat this parameter.]]>
            </wadl:doc>
          </wadl:param>
          <wadl:param name="escalated" style="query">
            <wadl:doc>
              <![CDATA[Displays only the artifacts that have (if true) or not (if false) been escalated.]]>
            </wadl:doc>
          </wadl:param>
        </wadl:request>
        <wadl:response>
          <wadl:doc>
            <![CDATA[The system returns a response that includes a list of artifacts and URI links, starting from the start-index offset.]]>
          </wadl:doc>
          <wadl:representation mediaType="application/xml" element="art:artifacts" xmlns:art="http://genologics.com/ri/artifact"/>
        </wadl:response>
      </wadl:method>
    </wadl:resource>
    <wadl:resource path="/v2/containers">
      <wadl:method name="GET">
        <wadl:doc>
          <![CDATA[Displays a list of containers stored in the system. If the number of containers returned exceeds the display maximum, the results are paged.<br/><br/>

When submitting a GET request, you can use the following query parameters to filter the results.
For more information about using query parameters, please refer to the Filtering list resources section under REST General Concepts.]]>
        </wadl:doc>
        <wadl:request>
          <wadl:param name="start-index" style="query">
            <wadl:doc>
              <![CDATA[When working with large lists of containers, displays the containers from a set point. If omitted, the first page of results is returned.]]>
            </wadl:doc>
          </wadl:param>
          <wadl:param name="type" style="query">
            <wadl:doc>
              <![CDATA[Displays only containers whose type matches the specified value, such as Tube or 96 well plate. When filtering results, you can repeat this parameter.]]>
            </wadl:doc>
          </wadl:param>
          <wadl:param name="name" style="query">
            <wadl:doc>
              <![CDATA[Displays only containers with names that match the specified value. When filtering results, you can repeat this parameter.]]>
            </wadl:doc>
          </wadl:param>
          <wadl:param name="udf.UDFNAME[.OPERATOR]=UDFVALUE" style="query">
            <wadl:doc>
              <![CDATA[Displays only containers that include the specified UDF value. The system will only return containers with standalone UDFs; it will not return containers with UDFs that belong to a UDT. When filtering results, you can repeat this parameter.]]>
            </wadl:doc>
          </wadl:param>
          <wadl:param name="udt.name=UDTNAME" style="query">
            <wadl:doc>
              <![CDATA[Displays only containers that include data for the specified UDT name. When filtering results, you can repeat this parameter.]]>
            </wadl:doc>
          </wadl:param>
          <wadl:param name="udt.UDTNAME.UDFNAME[.OPERATOR]=UDFVALUE" style="query">
            <wadl:doc>
              <![CDATA[Displays only containers that include the specified value for a UDF within a UDT. The system will only return containers with UDFs that belong to a UDT; it will not return containers with standalone UDFs. When filtering results, you can repeat this parameter.]]>
            </wadl:doc>
          </wadl:param>
          <wadl:param name="state" style="query">
            <wadl:doc>
              <![CDATA[Displays only containers that are set to the specified container state. You can use one of the following values: Empty, Populated, Discarded. When filtering results, you can repeat this parameter.]]>
            </wadl:doc>
          </wadl:param>
          <wadl:param name="last-modified" style="query">
            <wadl:doc>
              <![CDATA[Displays only the containers modified since the specified date, in YYYY-MM-DDThh:mm:ssTZD format. For more information on this format, please refer to the ISO 8601 Complete Date (plus hours, minutes and seconds) standard.]]>
            </wadl:doc>
          </wadl:param>
        </wadl:request>
        <wadl:response>
          <wadl:doc>
            <![CDATA[The system returns a response that includes a list of containers and URI links, starting from the start-index offset.]]>
          </wadl:doc>
          <wadl:representation mediaType="application/xml" element="con:containers" xmlns:con="http://genologics.com/ri/container"/>
        </wadl:response>
      </wadl:method>
      <wadl:method name="POST">
        <wadl:doc>
          <![CDATA[Creates a new container in the system. The system will automatically assign the container a LIMS ID. Unless your XML specifies a
particular container state with the state element, the system will automatically create an empty container.<br/><br/>

When creating a container, you must use the container-type element to specify what type of container you want to add.
The container-type element must link to an existing container type in the system.
You can provide a name for the container using the name child element, but
if a name is not provided, the LIMS ID will be used.<br/><br/>

Example XML to add single container with no udfs, where the server is localhost.
The container type uri will need to match your system.
<code>
&lt;?xml version="1.0" encoding="UTF-8"?&gt;
&lt;con:container xmlns:con="http://genologics.com/ri/container"&gt;
&nbsp;&nbsp;&lt;name&gt;Example Container&lt;/name&gt;
&nbsp;&nbsp;&lt;type uri="http://localhost:8080/api/v2/containertypes/4" name="Tube"/&gt;
&lt;/con:container&gt;
</code>]]>
        </wadl:doc>
        <wadl:request>
          <wadl:doc>
            <![CDATA[The information about the container you want to add to the system.]]>
          </wadl:doc>
          <wadl:representation mediaType="*/*" element="con:container" xmlns:con="http://genologics.com/ri/container"/>
          <wadl:representation mediaType="application/xml" element="con:container" xmlns:con="http://genologics.com/ri/container"/>
        </wadl:request>
        <wadl:response>
          <wadl:doc>
            <![CDATA[When the container is successfully created, the system returns an HTTP 201 (Created) code with a
response body that includes information about the new container.]]>
          </wadl:doc>
          <wadl:representation mediaType="application/xml" element="con:container" xmlns:con="http://genologics.com/ri/container"/>
        </wadl:response>
      </wadl:method>
    </wadl:resource>
    <wadl:resource path="/v2/containertypes">
      <wadl:method name="GET">
        <wadl:doc>
          <![CDATA[Displays a list of the types of containers stored in the system. If the number of container types returned exceeds the display maximum, the results are paged.<br/><br/>

When submitting a GET request, you can use the following query parameters to filter the results.
For more information about using query parameters, please refer to the Filtering list resources section under REST General Concepts.]]>
        </wadl:doc>
        <wadl:request>
          <wadl:param name="start-index" style="query">
            <wadl:doc>
              <![CDATA[When working with large lists of container types, displays the containers from a set point. If omitted, the first page of results is returned.]]>
            </wadl:doc>
          </wadl:param>
          <wadl:param name="name" style="query">
            <wadl:doc>
              <![CDATA[Displays only the container types whose name matches the specified value (the name of a container type). When filtering results, you can repeat this parameter.]]>
            </wadl:doc>
          </wadl:param>
        </wadl:request>
        <wadl:response>
          <wadl:doc>
            <![CDATA[The system returns a response that includes a list of container types and URI links, starting from the start-index offset.]]>
          </wadl:doc>
          <wadl:representation mediaType="application/xml" element="ctp:container-types" xmlns:ctp="http://genologics.com/ri/containertype"/>
        </wadl:response>
      </wadl:method>
      <wadl:method name="POST">
        <wadl:doc>
          <![CDATA[POST a containerType to the system.<br/><br/>

Every element in container-type is POSTable, including the name (non-unique) attribute of the container-type tag pair.
&lt;unavailable-well&gt; nodes are NOT required for POST.  If provided, the value must be a
Y:X based co-ordinate that is valid, based on offsets, size, and is-alpha values.  Note that &lt;calibrant-well&gt;
nodes are no longer supported and will be ignored.<br/><br/>

All dimension child elements are required fields for POST.<br/><br/>

Here is an example &lt;container-type&gt; in xml format:<br/>
<code>
&lt;ctp:container-type xmlns:ctp="http://genologics.com/ri/containertype" name="96 well plate api demo"&gt;
&nbsp;&nbsp;&lt;x-dimension&gt;
&nbsp;&nbsp;&nbsp;&nbsp;&lt;is-alpha&gt;false&lt;/is-alpha&gt;
&nbsp;&nbsp;&nbsp;&nbsp;&lt;offset&gt;1&lt;/offset&gt;
&nbsp;&nbsp;&nbsp;&nbsp;&lt;size&gt;12&lt;/size&gt;
&nbsp;&nbsp;&lt;/x-dimension&gt;
&nbsp;&nbsp;&lt;y-dimension&gt;
&nbsp;&nbsp;&nbsp;&nbsp;&lt;is-alpha&gt;true&lt;/is-alpha&gt;
&nbsp;&nbsp;&nbsp;&nbsp;&lt;offset&gt;0&lt;/offset&gt;
&nbsp;&nbsp;&nbsp;&nbsp;&lt;size&gt;8&lt;/size&gt;
&nbsp;&nbsp;&lt;/y-dimension&gt;
&lt;/ctp:container-type&gt;
</code>

Here is an example response in xml format:<br/>
<code>
&lt;ctp:container-type xmlns:ctp="http://genologics.com/ri/containertype" uri="http://qafunc03:8080/api/v2/containertypes/60" name="96 well plate api demo"&gt;
&nbsp;&nbsp;&lt;x-dimension&gt;
&nbsp;&nbsp;&nbsp;&nbsp;&lt;is-alpha&gt;false&lt;/is-alpha&gt;
&nbsp;&nbsp;&nbsp;&nbsp;&lt;offset&gt;1&lt;/offset&gt;
&nbsp;&nbsp;&nbsp;&nbsp;&lt;size&gt;12&lt;/size&gt;
&nbsp;&nbsp;&lt;/x-dimension&gt;
&nbsp;&nbsp;&lt;y-dimension&gt;
&nbsp;&nbsp;&nbsp;&nbsp;&lt;is-alpha&gt;true&lt;/is-alpha&gt;
&nbsp;&nbsp;&nbsp;&nbsp;&lt;offset&gt;0&lt;/offset&gt;
&nbsp;&nbsp;&nbsp;&nbsp;&lt;size&gt;8&lt;/size&gt;
&nbsp;&nbsp;&lt;/y-dimension&gt;
&lt;/ctp:container-type&gt;
</code>]]>
        </wadl:doc>
        <wadl:request>
          <wadl:doc>
            <![CDATA[new containerType to create. <br/>]]>
          </wadl:doc>
          <wadl:representation mediaType="*/*" element="ctp:container-type" xmlns:ctp="http://genologics.com/ri/containertype"/>
          <wadl:representation mediaType="application/xml" element="ctp:container-type" xmlns:ctp="http://genologics.com/ri/containertype"/>
        </wadl:request>
        <wadl:response>
          <wadl:doc>
            <![CDATA[HTTP Status 201 (Created) with the URI to new ContainerType in the Location header of the response.
The representation for the newly created ContainerType will be returned as the response body.]]>
          </wadl:doc>
          <wadl:representation mediaType="application/xml" element="ctp:container-type" xmlns:ctp="http://genologics.com/ri/containertype"/>
        </wadl:response>
      </wadl:method>
    </wadl:resource>
    <wadl:resource path="/v2/controltypes">
      <wadl:method name="GET">
        <wadl:doc>
          <![CDATA[Displays a list of control types stored in the system.]]>
        </wadl:doc>
        <wadl:response>
          <wadl:doc>
            <![CDATA[The system returns a response that includes a list of control types and URI links.]]>
          </wadl:doc>
          <wadl:representation mediaType="application/xml" element="ctrltp:control-types" xmlns:ctrltp="http://genologics.com/ri/controltype"/>
        </wadl:response>
      </wadl:method>
      <wadl:method name="POST">
        <wadl:doc>
          <![CDATA[Creates a new control type in the system.<br/><br/>

When creating a control type, you must specify the name of the control type you want to add.
Unless your XML specifies a particular archived state, the system will automatically set the archived state to false.<br/><br/>

An example of a submitted &lt;control-type&gt; is as follows:<br/>
<code>
&lt;ctrltp:control-type xmlns:ctrltp="http://genologics.com/ri/controltype" name="E. coli genomic DNA"&gt;
&nbsp;&nbsp;&lt;supplier&gt;ATCC&lt;/supplier&gt;
&nbsp;&nbsp;&lt;catalogue-number&gt;11229D-5&lt;/catalogue-number&gt;
&nbsp;&nbsp;&lt;website&gt;http://www.atcc.org/Products/All/11229D-5.aspx&lt;/website&gt;
&nbsp;&nbsp;&lt;archived&gt;false&lt;/archived&gt;
&nbsp;&nbsp;&lt;single-step&gt;false&lt;/single-step&gt;
&lt;/ctrltp:control-type&gt;
</code><]]>
        </wadl:doc>
        <wadl:request>
          <wadl:doc>
            <![CDATA[The information about the control type you want to add to the system.]]>
          </wadl:doc>
          <wadl:representation mediaType="*/*" element="ctrltp:control-type" xmlns:ctrltp="http://genologics.com/ri/controltype"/>
          <wadl:representation mediaType="application/xml" element="ctrltp:control-type" xmlns:ctrltp="http://genologics.com/ri/controltype"/>
        </wadl:request>
        <wadl:response>
          <wadl:doc>
            <![CDATA[When the control type is successfully created, the system returns an HTTP 201 (Created) code with a
response body that includes information about the new control type.]]>
          </wadl:doc>
          <wadl:representation mediaType="application/xml" element="ctrltp:control-type" xmlns:ctrltp="http://genologics.com/ri/controltype"/>
        </wadl:response>
      </wadl:method>
    </wadl:resource>
    <wadl:resource path="/v2/files">
      <wadl:method name="POST">
        <wadl:doc>
          <![CDATA[Adds a new file to the system and associates it with a resource or artifact.<br/><br/>

This action does not place a file on the server.<br/><br/>

Before you can import files through the API, you must POST a request to the glsstorage resource. This
allocates a location where you can place the file that you want to work with through the API. Once the
glsstorage resource returns a location, you can place the file in the specified location, and then POST the
returned XML to the files resource in order to associate the file in the system. For more information, please
refer to the glsstorage resource section of this reference guide.<br/><br/>

To associate a new file in the system, your POST request must contain values in the original-location,
attached-to, and content-location elements. The content-location element must reference a storage location
that has been previously allocated by POSTing to the glsstorage resource.<br/><br/>

Before POSTing to the files resource, you must place the desired file in the location
specified by the content-location element. If the file does not reside in this location, the POST request will fail.<br/><br/>

An example of a &lt;file&gt; POST is as follows:
<code>
&lt;file:file xmlns:file="http://genologics.com/ri/file"&gt;
&nbsp;&nbsp;&lt;content-location&gt;sftp://localhost/local_home/glsftp/Process/2005/6/HDX-FWX-050601-79-2/HDE2A1TP16-10-13.raw&lt;/content-location&gt;
&nbsp;&nbsp;&lt;attached-to&gt;http://localhost:8080/api/v2/artifacts/LUN3A1PA1&lt;/attached-to&gt;
&nbsp;&nbsp;&lt;original-location&gt;/home/glsftp/Testing/results.csv&lt;/original-location&gt;
&nbsp;&nbsp;&lt;is-published&gt;false&lt;/is-published&gt;
&lt;/file:file&gt;
</code>]]>
        </wadl:doc>
        <wadl:request>
          <wadl:doc>
            <![CDATA[The information about the file you want to associate in the system. Here is an example &lt;file&gt; in xml format. Note the attached-to uri will need to match an existing resource in your system. Allowed resource types are: project, sample, process, or a file artifact type such as a result file. The content-location will also need to match an existing file uri in your system. <br/>]]>
          </wadl:doc>
          <wadl:representation mediaType="application/xml" element="file:file" xmlns:file="http://genologics.com/ri/file"/>
        </wadl:request>
        <wadl:response>
          <wadl:doc>
            <![CDATA[When the file is successfully associated, the system returns an HTTP 201 (Created) code with a response
body that includes information about the newly associated file.]]>
          </wadl:doc>
          <wadl:representation mediaType="application/xml" element="file:file" xmlns:file="http://genologics.com/ri/file"/>
        </wadl:response>
      </wadl:method>
      <wadl:method name="GET">
        <wadl:doc>
          <![CDATA[Displays a list of files that are associated with resources or artifacts in the system.<br/><br/>

If the number of files returned exceeds the display maximum, the results are paged.<br/><br/>

When submitting a GET request, you can use the following query parameters to filter the results. For more information about
using query parameters, please refer to the Filtering list resources section under REST General Concepts.]]>
        </wadl:doc>
        <wadl:request>
          <wadl:param name="start-index" style="query">
            <wadl:doc>
              <![CDATA[When working with large lists of results, displays the results from a set point. If omitted, the first page of results is returned.]]>
            </wadl:doc>
          </wadl:param>
          <wadl:param name="last-modified" style="query">
            <wadl:doc>
              <![CDATA[Displays only the files modified since the specified date, in YYYY-MM-DDThh:mm:ssTZD format. For more information on this format, please refer to the ISO 8601 Complete Date (plus hours, minutes and seconds) standard.]]>
            </wadl:doc>
          </wadl:param>
          <wadl:param name="published" style="query">
            <wadl:doc>
              <![CDATA[A boolean value that displays files that have or have not been published to LabLink. To view files that are available in LabLink, use 'true'. To view files that are only available in the client, use 'false'.]]>
            </wadl:doc>
          </wadl:param>
          <wadl:param name="processlimsid" style="query">
            <wadl:doc>
              <![CDATA[Displays only the files that are associated with the specified process LIMS ID. When filtering a list of files, you can repeat this parameter, specifying a new value each time.]]>
            </wadl:doc>
          </wadl:param>
          <wadl:param name="projectlimsid" style="query">
            <wadl:doc>
              <![CDATA[Displays only the files that are associated with the specified project LIMS ID. When filtering a list of files, you can repeat this parameter, specifying a new value each time.]]>
            </wadl:doc>
          </wadl:param>
          <wadl:param name="samplelimsid" style="query">
            <wadl:doc>
              <![CDATA[Displays only the files that are associated with the specified sample LIMS ID. When filtering a list of files, you can repeat this parameter, specifying a new value each time.]]>
            </wadl:doc>
          </wadl:param>
          <wadl:param name="fileartifactlimsid" style="query">
            <wadl:doc>
              <![CDATA[Displays only the files that are associated with the specified LIMS ID for file-based artifacts, such as Result Files, Search Result Files, and Gel Spots. When filtering a list of files, you can repeat this parameter, specifying a new value each time.]]>
            </wadl:doc>
          </wadl:param>
          <wadl:param name="processtype" style="query">
            <wadl:doc>
              <![CDATA[Displays only the files that are attached to the outputs produced by the specified process type (the name of the process in the client).]]>
            </wadl:doc>
          </wadl:param>
          <wadl:param name="unattached" style="query">
            <wadl:doc>
              <![CDATA[When a file is captured using the ADC plug-in, GenoLogics LIMS will attempt to automatically attach and associate it with the correct location. Files that cannot be automatically associated are stored in a separate Captured Files area. Captured Files can subsequently be manually attached and associated in GenoLogics LIMS. An unattached=true will return only those files still in the Captured Files list. An unattached=false will return files that have successfully been attached and associated within the LIMS.]]>
            </wadl:doc>
          </wadl:param>
          <wadl:param name="outputname" style="query">
            <wadl:doc>
              <![CDATA[Displays only the files that are associated with the specified output name (the name of the output produced by the process). When filtering a list of files, you can repeat this parameter, specifying a new value each time.]]>
            </wadl:doc>
          </wadl:param>
          <wadl:param name="originallocation" style="query">
            <wadl:doc>
              <![CDATA[Displays only the files whose original location matches the specified path, including the name of the file. For example, /home/user/docs/Letter.txt. When filtering a list of files you can repeat this parameter, specifying a new value each time.]]>
            </wadl:doc>
          </wadl:param>
        </wadl:request>
        <wadl:response>
          <wadl:doc>
            <![CDATA[The system returns a response that includes a list of files and URI links, starting from the start-index offset.]]>
          </wadl:doc>
          <wadl:representation mediaType="application/xml" element="file:files" xmlns:file="http://genologics.com/ri/file"/>
        </wadl:response>
      </wadl:method>
    </wadl:resource>
    <wadl:resource path="/v2/glsstorage">
      <wadl:method name="POST">
        <wadl:doc>
          <![CDATA[Creates a new file storage location in the server file repository.
The location sets up a file location on a disk mount point on the server.<br/><br/>

Before you can import files through the API, you must POST a request to the glsstorage resource. This
allocates a location where you can place the file that you want to work with through the API.<br/><br/>

To request a storage location, your POST request must contain values in the original-location and attached-to
elements. The system uses these values to determine the target location for the file, and to generate and
assign a LIMS ID. This information is returned to you as a value in the content-location element of the
response XML. Once you have the information, you must place the file in the specified location, and then POST
the returned XML to the files resource in order to associate the file in the system.<br/><br/>

To summarize, when importing a file using the API, you must:

<ul>
<li>Construct XML using the file element, and the attached-to and original-location child elements. The
attached-to element must contain the resource or artifact you want to associate the file with. The
original-location element must contain the name and path of the file you want to eventually import into the
system.</li>
<li>POST the XML to the glsstorage resource.
<li>Receive the response from the glsstorage resource, noting the URI specified by the content-location
element.</li>
<li>Place the desired file in the location specified by the content-location element in the response XML.</li>
<li>POST the returned XML to the files resource.</li>

<br/>
An example POST is as follows:<br/>
<code>
&lt;file:file xmlns:file="http://genologics.com/ri/file"&gt;
&nbsp;&nbsp;&lt;attached-to&gt;http://localhost:8080/api/v2/artifacts/LUN3A1PA1&lt;/attached-to&gt;
&nbsp;&nbsp;&lt;original-location&gt;/home/glsftp/Testing/results.csv&lt;/original-location&gt;
&lt;/file:file&gt;
</code>

An example response:<br/>
<code>
&lt;file:file xmlns:file="http://genologics.com/ri/file"&gt;
&nbsp;&nbsp;&lt;content-location&gt;sftp://localhost/local_home/glsftp/Process/2005/6/HDX-FWX-050601-79-2/HDE2A1TP16-10-13.raw&lt;/content-location&gt;
&nbsp;&nbsp;&lt;attached-to&gt;http://localhost:8080/api/v2/artifacts/LUN3A1PA1&lt;/attached-to&gt;
&nbsp;&nbsp;&lt;original-location&gt;/home/glsftp/Testing/results.csv&lt;/original-location&gt;
&lt;/file:file&gt;
</code>
</ul>]]>
        </wadl:doc>
        <wadl:request>
          <wadl:doc>
            <![CDATA[The information about the file you want to eventually import into the system. Here is an example &lt;file&gt; in xml format. Note the attached-to uri will need to match an existing resource in your system. Allowed resource types are: project, sample, process, or a file artifact type such as a result file.<br/>]]>
          </wadl:doc>
          <wadl:representation mediaType="application/xml" element="file:file" xmlns:file="http://genologics.com/ri/file"/>
        </wadl:request>
        <wadl:response>
          <wadl:doc>
            <![CDATA[When the storage location is successfully allocated, the system returns an HTTP 200 (Ok) code with a
response body containing a value in the content-location element, indicating where you should store
the file.]]>
          </wadl:doc>
          <wadl:representation mediaType="application/xml" element="file:file" xmlns:file="http://genologics.com/ri/file"/>
        </wadl:response>
      </wadl:method>
    </wadl:resource>
    <wadl:resource path="/v2/instruments">
      <wadl:method name="GET">
        <wadl:doc>
          <![CDATA[Displays a list of instruments stored in the system. If the number of instruments returned exceeds the display maximum, the results are paged.<br/><br/>

When submitting a GET request, you can use the following query parameters to filter the results.
For more information about using query parameters, please refer to the Filtering list resources section under REST General Concepts.]]>
        </wadl:doc>
        <wadl:request>
          <wadl:param name="start-index" style="query">
            <wadl:doc>
              <![CDATA[When working with large lists of instruments, displays the instruments from a set point. If omitted, the first page of instruments is returned.]]>
            </wadl:doc>
          </wadl:param>
          <wadl:param name="name" style="query">
            <wadl:doc>
              <![CDATA[Displays only the instruments that match the instrument name against the provided parameter. When filtering results, you can repeat this parameter.]]>
            </wadl:doc>
          </wadl:param>
        </wadl:request>
        <wadl:response>
          <wadl:doc>
            <![CDATA[The system returns a response that includes a list of instruments and URI links, starting from the start-index offset.]]>
          </wadl:doc>
          <wadl:representation mediaType="application/xml" element="inst:instruments" xmlns:inst="http://genologics.com/ri/instrument"/>
        </wadl:response>
      </wadl:method>
    </wadl:resource>
    <wadl:resource path="/v2/labs">
      <wadl:method name="GET">
        <wadl:doc>
          <![CDATA[Displays a list of labs stored in the system. If the number of labs returned exceeds the display maximum, the results are paged.<br/><br/>

When submitting a GET request, you can use the following query parameters to filter the results.
For more information about using query parameters, please refer to the Filtering list resources section under REST General Concepts.<br/><br/>

NOTE: Labs are referred to as Accounts in Clarity LIMS UIs.]]>
        </wadl:doc>
        <wadl:request>
          <wadl:param name="start-index" style="query">
            <wadl:doc>
              <![CDATA[When working with large lists of labs, displays the labs from a set point. If omitted, the first page of results is returned.]]>
            </wadl:doc>
          </wadl:param>
          <wadl:param name="last-modified" style="query">
            <wadl:doc>
              <![CDATA[Displays only the labs modified since the specified date, in YYYY-MM-DDThh:mm:ssTZD format. For more information on this format, please refer to the ISO 8601 Complete Date (plus hours, minutes and seconds) standard.]]>
            </wadl:doc>
          </wadl:param>
          <wadl:param name="udf.UDFNAME[.OPERATOR]=UDFVALUE" style="query">
            <wadl:doc>
              <![CDATA[Displays only labs that include the specified UDF value. The system will only return labs with standalone UDFs; it will not return labs with UDFs that belong to a UDT.]]>
            </wadl:doc>
          </wadl:param>
          <wadl:param name="udt.name=UDTNAME" style="query">
            <wadl:doc>
              <![CDATA[Displays only labs that include data for the specified UDT name. When filtering results, you can repeat this parameter.]]>
            </wadl:doc>
          </wadl:param>
          <wadl:param name="udt.UDTNAME.UDFNAME[.OPERATOR]=UDFVALUE" style="query">
            <wadl:doc>
              <![CDATA[Displays only labs that include the specified value for a UDF within a UDT. The system will only return labs with UDFs that belong to a UDT; it will not return labs with standalone UDFs. When filtering results, you can repeat this parameter.]]>
            </wadl:doc>
          </wadl:param>
          <wadl:param name="name" style="query">
            <wadl:doc>
              <![CDATA[Displays only labs whose name matches the specified value. When filtering results, you can repeat this parameter.]]>
            </wadl:doc>
          </wadl:param>
        </wadl:request>
        <wadl:response>
          <wadl:doc>
            <![CDATA[The system returns a response that includes a list of labs and URI links, starting from the start-index offset.]]>
          </wadl:doc>
          <wadl:representation mediaType="application/xml" element="lab:labs" xmlns:lab="http://genologics.com/ri/lab"/>
        </wadl:response>
      </wadl:method>
      <wadl:method name="POST">
        <wadl:doc>
          <![CDATA[Creates a new lab in the system. When creating a new lab, you must do the following:
<ul>
<li>You must provide a name for the lab.</li>
<br/>
NOTE: Labs are referred to as Accounts in Clarity LIMS UIs.<br/><br/>

Here is an example &lt;lab&gt; in xml format. Note that the UDF and UDT elements are optional and must be pre-configured in the system.<br/>
<code>
&lt;lab:lab xmlns:udf="http://genologics.com/ri/userdefined" xmlns:ri="http://genologics.com/ri" xmlns:lab="http://genologics.com/ri/lab"&gt;
&nbsp;&nbsp;&lt;name&gt;API Demo Lab&lt;/name&gt;
&nbsp;&nbsp;&lt;billing-address&gt;
&nbsp;&nbsp;&nbsp;&nbsp;&lt;street&gt;Suite 2302 - 4464 Markham Street&lt;/street&gt;
&nbsp;&nbsp;&nbsp;&nbsp;&lt;city&gt;Victoria&lt;/city&gt;
&nbsp;&nbsp;&nbsp;&nbsp;&lt;state&gt;BC&lt;/state&gt;
&nbsp;&nbsp;&nbsp;&nbsp;&lt;country&gt;Canada&lt;/country&gt;
&nbsp;&nbsp;&nbsp;&nbsp;&lt;postalCode&gt;V8Z 7X8&lt;/postalCode&gt;
&nbsp;&nbsp;&nbsp;&nbsp;&lt;institution&gt;GenoLogics&lt;/institution&gt;
&nbsp;&nbsp;&nbsp;&nbsp;&lt;department&gt;Software Development&lt;/department&gt;
&nbsp;&nbsp;&lt;/billing-address&gt;
&nbsp;&nbsp;&lt;shipping-address&gt;
&nbsp;&nbsp;&nbsp;&nbsp;&lt;street&gt;Suite 2302 - 4464 Markham Street&lt;/street&gt;
&nbsp;&nbsp;&nbsp;&nbsp;&lt;city&gt;Victoria&lt;/city&gt;
&nbsp;&nbsp;&nbsp;&nbsp;&lt;state&gt;BC&lt;/state&gt;
&nbsp;&nbsp;&nbsp;&nbsp;&lt;country&gt;Canada&lt;/country&gt;
&nbsp;&nbsp;&nbsp;&nbsp;&lt;postalCode&gt;V8Z 7X8&lt;/postalCode&gt;
&nbsp;&nbsp;&nbsp;&nbsp;&lt;institution&gt;GenoLogics&lt;/institution&gt;
&nbsp;&nbsp;&nbsp;&nbsp;&lt;department&gt;Software Development&lt;/department&gt;
&nbsp;&nbsp;&lt;/shipping-address&gt;
&nbsp;&nbsp;&lt;udf:type name="Lab UDT"&gt;
&nbsp;&nbsp;&nbsp;&nbsp;&lt;udf:field type="String" name="Lab UDF under UDT"&gt;a demo value for Lab UDF under UDT&lt;/udf:field&gt;
&nbsp;&nbsp;&lt;/udf:type&gt;
&nbsp;&nbsp;&lt;udf:field type="String" name="Lab standalone UDF"&gt;a demo value for  Lab standalone UDF&lt;/udf:field&gt;
&nbsp;&nbsp;&lt;website&gt;www.genologics.com&lt;/website&gt;
&lt;/lab:lab&gt;
</code>

Here is an example response in xml format:<br/>
<code>
&lt;lab:lab xmlns:udf="http://genologics.com/ri/userdefined" xmlns:ri="http://genologics.com/ri" xmlns:lab="http://genologics.com/ri/lab" uri="http://qafunc03:8080/api/v2/labs/5"&gt;
&nbsp;&nbsp;&lt;name&gt;API Demo Lab&lt;/name&gt;
&nbsp;&nbsp;&lt;billing-address&gt;
&nbsp;&nbsp;&nbsp;&nbsp;&lt;street&gt;Suite 2302 - 4464 Markham Street&lt;/street&gt;
&nbsp;&nbsp;&nbsp;&nbsp;&lt;city&gt;Victoria&lt;/city&gt;
&nbsp;&nbsp;&nbsp;&nbsp;&lt;state&gt;BC&lt;/state&gt;
&nbsp;&nbsp;&nbsp;&nbsp;&lt;country&gt;Canada&lt;/country&gt;
&nbsp;&nbsp;&nbsp;&nbsp;&lt;postalCode&gt;V8Z 7X8&lt;/postalCode&gt;
&nbsp;&nbsp;&nbsp;&nbsp;&lt;institution&gt;GenoLogics&lt;/institution&gt;
&nbsp;&nbsp;&nbsp;&nbsp;&lt;department&gt;Software Development&lt;/department&gt;
&nbsp;&nbsp;&lt;/billing-address&gt;
&nbsp;&nbsp;&lt;shipping-address&gt;
&nbsp;&nbsp;&nbsp;&nbsp;&lt;street&gt;Suite 2302 - 4464 Markham Street&lt;/street&gt;
&nbsp;&nbsp;&nbsp;&nbsp;&lt;city&gt;Victoria&lt;/city&gt;
&nbsp;&nbsp;&nbsp;&nbsp;&lt;state&gt;BC&lt;/state&gt;
&nbsp;&nbsp;&nbsp;&nbsp;&lt;country&gt;Canada&lt;/country&gt;
&nbsp;&nbsp;&nbsp;&nbsp;&lt;postalCode&gt;V8Z 7X8&lt;/postalCode&gt;
&nbsp;&nbsp;&nbsp;&nbsp;&lt;institution&gt;GenoLogics&lt;/institution&gt;
&nbsp;&nbsp;&nbsp;&nbsp;&lt;department&gt;Software Development&lt;/department&gt;
&nbsp;&nbsp;&lt;/shipping-address&gt;
&nbsp;&nbsp;&lt;udf:type name="Lab UDT"&gt;
&nbsp;&nbsp;&nbsp;&nbsp;&lt;udf:field type="String" name="Lab UDF under UDT"&gt;a demo value for Lab UDF under UDT&lt;/udf:field&gt;
&nbsp;&nbsp;&lt;/udf:type&gt;
&nbsp;&nbsp;&lt;udf:field type="String" name="Lab standalone UDF"&gt;a demo value for  Lab standalone UDF&lt;/udf:field&gt;
&nbsp;&nbsp;&lt;website&gt;www.genologics.com&lt;/website&gt;
&lt;/lab:lab&gt;
</code>
</ul>]]>
        </wadl:doc>
        <wadl:request>
          <wadl:doc>
            <![CDATA[The information about the lab you want to create.]]>
          </wadl:doc>
          <wadl:representation mediaType="*/*" element="lab:lab" xmlns:lab="http://genologics.com/ri/lab"/>
          <wadl:representation mediaType="application/xml" element="lab:lab" xmlns:lab="http://genologics.com/ri/lab"/>
        </wadl:request>
        <wadl:response>
          <wadl:doc>
            <![CDATA[When the lab is created, the system returns an HTTP 201 (Created) code with a response body that includes information about the newly created lab.]]>
          </wadl:doc>
          <wadl:representation mediaType="application/xml" element="lab:lab" xmlns:lab="http://genologics.com/ri/lab"/>
        </wadl:response>
      </wadl:method>
    </wadl:resource>
    <wadl:resource path="/v2/permissions">
      <wadl:method name="GET">
        <wadl:doc>
          <![CDATA[Displays the list of permissions stored in the system.]]>
        </wadl:doc>
        <wadl:response>
          <wadl:doc>
            <![CDATA[The system returns a response that includes a list of permissions and URI links.]]>
          </wadl:doc>
          <wadl:representation mediaType="application/xml" element="perm:permissions" xmlns:perm="http://genologics.com/ri/permission"/>
        </wadl:response>
      </wadl:method>
    </wadl:resource>
    <wadl:resource path="/v2/processes">
      <wadl:method name="GET">
        <wadl:doc>
          <![CDATA[Displays a list of processes that have been run in the system. If the number of processes returned exceeds the display maximum, the results are paged.<br/><br/>

When submitting a GET request, you can use the following query parameters to filter the results.
For more information about using query parameters, please refer to the Filtering list resources section under REST General Concepts.]]>
        </wadl:doc>
        <wadl:request>
          <wadl:param name="start-index" style="query">
            <wadl:doc>
              <![CDATA[When working with large lists of results, displays the results from a set point. If omitted, the first page of results is returned.]]>
            </wadl:doc>
          </wadl:param>
          <wadl:param name="last-modified" style="query">
            <wadl:doc>
              <![CDATA[Displays only the processes modified since the specified date, in YYYY-MM-DDThh:mm:ssTZD format. For more information on this format, please refer to the ISO 8601 Complete Date (plus hours, minutes and seconds) standard.]]>
            </wadl:doc>
          </wadl:param>
          <wadl:param name="type" style="query">
            <wadl:doc>
              <![CDATA[Displays only the processes whose type matches the specified value (the name of the process in the client). When filtering results, you can repeat this parameter.]]>
            </wadl:doc>
          </wadl:param>
          <wadl:param name="inputartifactlimsid" style="query">
            <wadl:doc>
              <![CDATA[Displays only the processes whose input artifacts include the specified artifact LIMS ID. When filtering results, you can repeat this parameter.]]>
            </wadl:doc>
          </wadl:param>
          <wadl:param name="udf.UDFNAME[.OPERATOR]=UDFVALUE" style="query">
            <wadl:doc>
              <![CDATA[Displays only processes that include the specified UDF value. The system will only return processes with standalone UDFs; it will not return processes with UDFs that belong to a UDT. When filtering results, you can repeat this parameter.]]>
            </wadl:doc>
          </wadl:param>
          <wadl:param name="udt.name=UDTNAME" style="query">
            <wadl:doc>
              <![CDATA[Displays only processes that include data for the specified UDT name. When filtering results, you can repeat this parameter.]]>
            </wadl:doc>
          </wadl:param>
          <wadl:param name="udt.UDTNAME.UDFNAME[.OPERATOR]=UDFVALUE" style="query">
            <wadl:doc>
              <![CDATA[Displays only processes that include the specified value for a UDF within a UDT. The system will only return processes with UDFs that belong to a UDT; it will not return processes with standalone UDFs. When filtering results, you can repeat this parameter.]]>
            </wadl:doc>
          </wadl:param>
          <wadl:param name="techfirstname" style="query">
            <wadl:doc>
              <![CDATA[Displays only the processes whose researcher's first name matches the specified value. When filtering results, you can repeat this parameter.]]>
            </wadl:doc>
          </wadl:param>
          <wadl:param name="techlastname" style="query">
            <wadl:doc>
              <![CDATA[Displays only the processes whose researcher's last name matches the specified value. When filtering results, you can repeat this parameter.]]>
            </wadl:doc>
          </wadl:param>
          <wadl:param name="projectname" style="query">
            <wadl:doc>
              <![CDATA[Displays only the processes whose input artifacts are related to a submitted sample in the specified project (the name of the project). When filtering results, you can repeat this parameter.]]>
            </wadl:doc>
          </wadl:param>
        </wadl:request>
        <wadl:response>
          <wadl:doc>
            <![CDATA[The system returns a response that includes a list of processes and URI links, starting from the start-index offset.]]>
          </wadl:doc>
          <wadl:representation mediaType="application/xml" element="prc:processes" xmlns:prc="http://genologics.com/ri/process"/>
        </wadl:response>
      </wadl:method>
      <wadl:method name="POST">
        <wadl:doc>
          <![CDATA[Creates (runs) a process.<br/><br/>

When posting processes, the following rules apply:
<ul>
<li>Before you can post a process, a process type with the provided name must exist in the system and be enabled.
<li>You must supply a reference to a Technician that corresponds with a user in the system.
<li>You can only post configured processes. For more information about Clarity LIMS process types,
see [Understanding process types|https://documentationgls.atlassian.net/wiki/display/DOC/Understanding+process+types]
in the Clarity LIMS Lab Manager Guide at [http://documentation.genologics.com].
<li>The parameter is a child element of process execution that integrates the Process with the External Program
Integration plug-in (EPP). When a user runs the Process, the system automatically issues a command configured in the
process parameter this element represents.
<br/>

When working with input/output maps (the inputs and outputs of a process), the following rules apply:
<li>The inputs you specify must match what the process type is configured to accept as an input.</li>
<li>The input artifacts you specify must exist in the system.</li>
<li>The outputs you specify must match what the process type is configured to produce as an output.</li>
<li>The output containers you specify must exist in the system. The specified well location must exist in the container and be available (empty and not reserved).</li>
<li>You cannot place more than one output into the same well of a container.</li>
<li>You cannot associate two inputs with the same output, unless it is a shared output.</li>
<li>A process always creates a variable number of outputs, which can equal zero.</li>
<li>A process always creates an output for each reagent label applied to an input.</li>
<br/>

When working with process-level User-Defined Fields and User-Defined Types, the following rules apply:
<li>The UDFs and UDTs that you refer to must be configured for the type of process you are working with.</li>
<li>You must provide any UDFs or UDTs that are configured in the system as a required item.</li>
<br/>

When working with QC options, the following rules apply:
<li>You can apply QC values to the inputs or outputs of any type of process.
<li>If an input has QC information specified multiple times (i.e. multiple outputs per input case), only the first setting is considered
<li>QC inheritance will be applied if the process type is configured to 'Apply the QC flags of the inputs to the outputs' and no QC flags are provided for the entire process execution request.
<br/>

Example XML to transfer a single sample to a new container where the server is localhost. The container, input and researcher uri's will need to match your system.
<code>
&lt;?xml version="1.0" encoding="UTF-8"?&gt;
&lt;prx:process xmlns:prx="http://genologics.com/ri/processexecution"&gt;
&lt;type&gt;Transfer&lt;/type&gt;<br/>
&lt;technician uri="http://localhost:8080/api/v2/researchers/1"&gt;&lt;/technician&gt;
&lt;input-output-map shared="false"&gt;
&lt;input uri="http://localhost:8080/api/v2/artifacts/ADM1A1PA1"&gt;&lt;/input&gt;
&lt;output type="Analyte"&gt;
&lt;location&gt;
&lt;container uri="http://localhost:8080/api/v2/containers/27-9"&gt;&lt;/container&gt;
&lt;value&gt;1:1&lt;/value&gt;
&lt;/location&gt;
&lt;/output&gt;
&lt;/input-output-map&gt;
&lt;/prx:process&gt;
</code>
</ul>]]>
        </wadl:doc>
        <wadl:request>
          <wadl:doc>
            <![CDATA[The representation of the process creation.]]>
          </wadl:doc>
          <wadl:representation mediaType="application/xml" element="prx:process" xmlns:prx="http://genologics.com/ri/processexecution"/>
        </wadl:request>
        <wadl:response>
          <wadl:doc>
            <![CDATA[HTTP Status 201 (Created) with the URI for the new process in the Location header of the response.
The representation for the newly created process will be returned as the response body.]]>
          </wadl:doc>
          <wadl:representation mediaType="application/xml" element="prc:process" xmlns:prc="http://genologics.com/ri/process"/>
        </wadl:response>
      </wadl:method>
    </wadl:resource>
    <wadl:resource path="/v2/processtemplates">
      <wadl:method name="GET">
        <wadl:doc>
          <![CDATA[Displays a list of Process Templates available in the system.]]>
        </wadl:doc>
        <wadl:request>
          <wadl:param name="start-index" style="query">
            <wadl:doc>
              <![CDATA[When working with large lists of results, displays the results from a set point If omitted, the first page of results is returned]]>
            </wadl:doc>
          </wadl:param>
          <wadl:param name="type" style="query">
            <wadl:doc>
              <![CDATA[Displays only the process templates whose type matches the specified value (the name of the process in the client). When filtering results, you can repeat this parameter]]>
            </wadl:doc>
          </wadl:param>
          <wadl:param name="name" style="query">
            <wadl:doc>
              <![CDATA[Displays only the process templates whose name matches the specified value When filtering results, you can repeat this parameter]]>
            </wadl:doc>
          </wadl:param>
          <wadl:param name="default" style="query">
            <wadl:doc>
              <![CDATA[true when process template is default, false otherwise]]>
            </wadl:doc>
          </wadl:param>
        </wadl:request>
        <wadl:response>
          <wadl:representation mediaType="application/xml" element="ptm:process-templates" xmlns:ptm="http://genologics.com/ri/processtemplate"/>
        </wadl:response>
      </wadl:method>
    </wadl:resource>
    <wadl:resource path="/v2/processtypes">
      <wadl:method name="GET">
        <wadl:doc>
          <![CDATA[Gets a paged list of process type links.<br/><br/>

The list of process type links can be filtered by providing query parameters. The resulting list of
process type links will match a value for all the provided query parameters.<br/><br/>

When submitting a GET request, you can use the following query parameters to filter the results.
For more information about using query parameters, please refer to the Filtering list resources section under REST General Concepts.]]>
        </wadl:doc>
        <wadl:request>
          <wadl:param name="start-index" style="query">
            <wadl:doc>
              <![CDATA[An offset parameter that enables paging of the results. If omitted, the system returns the first page of process type links.]]>
            </wadl:doc>
          </wadl:param>
          <wadl:param name="displayname" style="query">
            <wadl:doc>
              <![CDATA[Limits the list of process type links to only those process types with the specified display name.]]>
            </wadl:doc>
          </wadl:param>
        </wadl:request>
        <wadl:response>
          <wadl:doc>
            <![CDATA[the list of process type links starting from the paging offset start-index.]]>
          </wadl:doc>
          <wadl:representation mediaType="application/xml" element="ptp:process-types" xmlns:ptp="http://genologics.com/ri/processtype"/>
        </wadl:response>
      </wadl:method>
    </wadl:resource>
    <wadl:resource path="/v2/projects">
      <wadl:method name="GET">
        <wadl:doc>
          <![CDATA[Displays a list of projects stored in the system. If the number of projects returned exceeds the display maximum, the results are paged.<br/><br/>

When submitting a GET request, you can use the following query parameters to filter the results.
For more information about using query parameters, please refer to the Filtering list resources section under REST General Concepts.]]>
        </wadl:doc>
        <wadl:request>
          <wadl:param name="start-index" style="query">
            <wadl:doc>
              <![CDATA[When working with large lists of projects, displays the results from a set point. If omitted, the first page of projects is returned.]]>
            </wadl:doc>
          </wadl:param>
          <wadl:param name="udf.UDFNAME[.OPERATOR]=UDFVALUE" style="query">
            <wadl:doc>
              <![CDATA[Displays only projects that include the specified UDF value. The system will only return projects with standalone UDFs; it will not return projects with UDFs that belong to a UDT. When filtering results, you can repeat this parameter.]]>
            </wadl:doc>
          </wadl:param>
          <wadl:param name="udt.name=UDTNAME" style="query">
            <wadl:doc>
              <![CDATA[Displays only projects that include data for the specified UDT name. When filtering results, you can repeat this parameter.]]>
            </wadl:doc>
          </wadl:param>
          <wadl:param name="udt.UDTNAME.UDFNAME[.OPERATOR]=UDFVALUE" style="query">
            <wadl:doc>
              <![CDATA[Displays only projects that include the specified value for a UDF within a UDT. The system will only return projects with UDFs that belong to a UDT; it will not return projects with standalone UDFs. When filtering results, you can repeat this parameter.]]>
            </wadl:doc>
          </wadl:param>
          <wadl:param name="last-modified" style="query">
            <wadl:doc>
              <![CDATA[Displays only the projects modified since the specified date, in YYYY-MM-DDThh:mm:ssTZD format. For more information on this format, please refer to the ISO 8601 Complete Date (plus hours, minutes and seconds) standard.]]>
            </wadl:doc>
          </wadl:param>
          <wadl:param name="open-date" style="query">
            <wadl:doc>
              <![CDATA[Displays only the projects submitted since 00:00:00 of the specified date, in YYYY-MM-DD format.]]>
            </wadl:doc>
          </wadl:param>
          <wadl:param name="name" style="query">
            <wadl:doc>
              <![CDATA[Displays only the projects that match the project name against the provided parameter. When filtering results, you can repeat this parameter.]]>
            </wadl:doc>
          </wadl:param>
        </wadl:request>
        <wadl:response>
          <wadl:doc>
            <![CDATA[The system returns a response that includes a list of projects and URI links, starting from the start-index offset.]]>
          </wadl:doc>
          <wadl:representation mediaType="application/xml" element="prj:projects" xmlns:prj="http://genologics.com/ri/project"/>
        </wadl:response>
      </wadl:method>
      <wadl:method name="POST">
        <wadl:doc>
          <![CDATA[Creates a new project in the system. The system will automatically assign the project a LIMS ID.<br/><br/>

When POSTing a project, the following rules apply:
<ul>
<li>You must provide a contact for the project using the researcher element. The researcher you specify
must link to an existing researcher in the system and be assigned to a lab.</li>
<li>You must provide a name for the project using the name child element.</li>
<li>You can use the close-date child element to specify a 'close date' for the project, but only
if an 'open date' is provided with the open-date child element.</li>

Here is an example &lt;project&gt; in xml format. Note the researcher uri will need to match your system. The file uri is optional and will need to match an existing resource in the system.
The UDF and UDT elements are also optional and must be pre-configured in the system.<br/>
<code>
&lt;prj:project xmlns:udf="http://genologics.com/ri/userdefined" xmlns:ri="http://genologics.com/ri" xmlns:file="http://genologics.com/ri/file" xmlns:prj="http://genologics.com/ri/project"&gt;
&nbsp;&nbsp;&lt;name&gt;API Demo&lt;/name&gt;
&nbsp;&nbsp;&lt;open-date&gt;2012-01-03&lt;/open-date&gt;
&nbsp;&nbsp;&lt;researcher uri="http://qafunc03:8080/api/v2/researchers/1"/&gt;
&nbsp;&nbsp;&lt;udf:type name="Project UDT Demo"&gt;
&nbsp;&nbsp;&nbsp;&nbsp;&lt;udf:field type="String" name="Project UDF UDT Demo"&gt;Project UDF Under UDT Demo value&lt;/udf:field&gt;
&nbsp;&nbsp;&lt;/udf:type&gt;
&nbsp;&nbsp;&lt;udf:field type="String" name="Project Standalone UDF Demo"&gt;Project Standalone Demo UDF value&lt;/udf:field&gt;
&nbsp;&nbsp;&lt;file:file uri="http://qafunc03:8080/api/v2/files/ADM2-40-3"/&gt;
&lt;/prj:project&gt;
</code>
<br/>

Here is an example response in xml format:<br/>
<code>
&lt;prj:project xmlns:udf="http://genologics.com/ri/userdefined" xmlns:ri="http://genologics.com/ri" xmlns:file="http://genologics.com/ri/file" xmlns:prj="http://genologics.com/ri/project" uri="http://qafunc03:8080/api/v2/projects/ADM3" limsid="ADM3"&gt;
&nbsp;&nbsp;&lt;name&gt;API Demo&lt;/name&gt;
&nbsp;&nbsp;&lt;open-date&gt;2012-01-03&lt;/open-date&gt;
&nbsp;&nbsp;&lt;researcher uri="http://qafunc03:8080/api/v2/researchers/1"/&gt;
&nbsp;&nbsp;&lt;udf:type name="Project UDT Demo"&gt;
&nbsp;&nbsp;&nbsp;&nbsp;&lt;udf:field type="String" name="Project UDF UDT Demo"&gt;Project UDF Under UDT Demo value&lt;/udf:field&gt;
&nbsp;&nbsp;&lt;/udf:type&gt;
&nbsp;&nbsp;&lt;udf:field type="String" name="Project Standalone UDF Demo"&gt;Project Standalone Demo UDF value&lt;/udf:field&gt;
&nbsp;&nbsp;&lt;file:file limsid="ADM2-40-3" uri="http://qafunc03:8080/api/v2/files/ADM2-40-3"/&gt;
&lt;/prj:project&gt;
</code>
</ul>]]>
        </wadl:doc>
        <wadl:request>
          <wadl:doc>
            <![CDATA[The information about the project you want to add to the system.]]>
          </wadl:doc>
          <wadl:representation mediaType="*/*" element="prj:project" xmlns:prj="http://genologics.com/ri/project"/>
          <wadl:representation mediaType="application/xml" element="prj:project" xmlns:prj="http://genologics.com/ri/project"/>
        </wadl:request>
        <wadl:response>
          <wadl:doc>
            <![CDATA[When the project is successfully created, the system returns an HTTP 201 (Created) code with a
response body that includes information about the new project.]]>
          </wadl:doc>
          <wadl:representation mediaType="application/xml" element="prj:project" xmlns:prj="http://genologics.com/ri/project"/>
        </wadl:response>
      </wadl:method>
    </wadl:resource>
    <wadl:resource path="/v2/reagentkits">
      <wadl:method name="GET">
        <wadl:doc>
          <![CDATA[Displays a list of reagent kits stored in the system.<br/><br/>

When submitting a GET request, you can use the following query parameters to filter the results.
For more information about using query parameters, please refer to the Filtering list resources section under REST General Concepts.]]>
        </wadl:doc>
        <wadl:request>
          <wadl:param name="start-index" style="query">
            <wadl:doc>
              <![CDATA[When working with large lists of results, displays the results from a set point. If omitted, the first page of results is returned.]]>
            </wadl:doc>
          </wadl:param>
          <wadl:param name="name" style="query">
            <wadl:doc>
              <![CDATA[Displays only reagent kits with names that match the specified value. When filtering results, you can repeat this parameter.]]>
            </wadl:doc>
          </wadl:param>
        </wadl:request>
        <wadl:response>
          <wadl:doc>
            <![CDATA[The system returns a response that includes a list of reagent kits and URI links.]]>
          </wadl:doc>
          <wadl:representation mediaType="application/xml" element="kit:reagent-kits" xmlns:kit="http://genologics.com/ri/reagentkit"/>
        </wadl:response>
      </wadl:method>
      <wadl:method name="POST">
        <wadl:doc>
          <![CDATA[Creates a new reagent kit in the system.<br/>

When creating a new reagent kit, you must specify the name of the reagent kit you want to add.
Unless your XML specifies a particular archived state, the system will automatically set archived to false.<br/><br/>

An example of a &lt;reagent-kit&gt; is as follows:<br/>
<code>
&lt;kit:reagent-kit&nbsp;xmlns:kit=&quot;http://genologics.com/ri/reagentkit&quot;&gt;
&nbsp;&nbsp;&lt;name&gt;Affy-3a&lt;/name&gt;
&nbsp;&nbsp;&lt;supplier&gt;Supplies&nbsp;Inc.&lt;/supplier&gt;
&nbsp;&nbsp;&lt;catalogue-number&gt;1-AF-A&lt;/catalogue-number&gt;
&nbsp;&nbsp;&lt;website&gt;www.suppliesinc.com&lt;/website&gt;
&nbsp;&nbsp;&lt;archived&gt;false&lt;/archived&gt;
&lt;/kit:reagent-kit&gt;
</code>]]>
        </wadl:doc>
        <wadl:request>
          <wadl:doc>
            <![CDATA[The information about the reagent kit you want to add to the system.]]>
          </wadl:doc>
          <wadl:representation mediaType="*/*" element="kit:reagent-kit" xmlns:kit="http://genologics.com/ri/reagentkit"/>
          <wadl:representation mediaType="application/xml" element="kit:reagent-kit" xmlns:kit="http://genologics.com/ri/reagentkit"/>
        </wadl:request>
        <wadl:response>
          <wadl:doc>
            <![CDATA[When the reagent kit is successfully created, the system returns an HTTP 201 (Created) code with
a response body that includes information about the new reagent kit.]]>
          </wadl:doc>
          <wadl:representation mediaType="application/xml" element="kit:reagent-kit" xmlns:kit="http://genologics.com/ri/reagentkit"/>
        </wadl:response>
      </wadl:method>
    </wadl:resource>
    <wadl:resource path="/v2/reagentlots">
      <wadl:method name="GET">
        <wadl:doc>
          <![CDATA[Displays a list of reagent lots stored in the system.<br/><br/>

When submitting a GET request, you can use the following query parameters to filter the results.
For more information about using query parameters, please refer to the Filtering list resources section under REST General Concepts.]]>
        </wadl:doc>
        <wadl:request>
          <wadl:param name="start-index" style="query">
            <wadl:doc>
              <![CDATA[When working with large lists of results, displays the results from a set point. If omitted, the first page of results is returned.]]>
            </wadl:doc>
          </wadl:param>
          <wadl:param name="name" style="query">
            <wadl:doc>
              <![CDATA[Displays only reagent lots with names that match the specified value. When filtering results, you can repeat this parameter.]]>
            </wadl:doc>
          </wadl:param>
          <wadl:param name="kitname" style="query">
            <wadl:doc>
              <![CDATA[Displays only reagent lots whose associated reagent kits have names matching the given value. When filtering results, you can repeat this parameter.]]>
            </wadl:doc>
          </wadl:param>
          <wadl:param name="number" style="query">
            <wadl:doc>
              <![CDATA[Displays only reagent lots with numbers that match the specified value. When filtering results, you can repeat this parameter.]]>
            </wadl:doc>
          </wadl:param>
        </wadl:request>
        <wadl:response>
          <wadl:doc>
            <![CDATA[The system returns a response that includes a list of reagents lots and URI links.]]>
          </wadl:doc>
          <wadl:representation mediaType="application/xml" element="lot:reagent-lots" xmlns:lot="http://genologics.com/ri/reagentlot"/>
        </wadl:response>
      </wadl:method>
      <wadl:method name="POST">
        <wadl:doc>
          <![CDATA[Creates a new reagent lot in the system.<br/><br/>

When creating a reagent lot you must specify both lot number and expiry date unless the reagent lot status
is PENDING in which case those fields are not required.
If status is not specified, it will be set to PENDING by default.<br/><br/>

An example of a &lt;reagent-lot&gt; is as follows:<br/>
<code>
&lt;lot:reagent-lot&nbsp;xmlns:lot=&quot;http://genologics.com/ri/reagentlot&quot;&gt;
&nbsp;&nbsp;&lt;reagent-kit&nbsp;uri=&quot;http://localhost:8080/api/v2/reagentkits/101&quot;&nbsp;name=&quot;Affy-3a&quot;/&gt;
&nbsp;&nbsp;&lt;name&gt;Affy-3a&nbsp;Batch&nbsp;#1&lt;/name&gt;
&nbsp;&nbsp;&lt;lot-number&gt;5613281&lt;/lot-number&gt;
&nbsp;&nbsp;&lt;expiry-date&gt;2014-05-01&lt;/expiry-date&gt;
&nbsp;&nbsp;&lt;storage-location&gt;Cooler&nbsp;in&nbsp;room&nbsp;204&lt;/storage-location&gt;
&nbsp;&nbsp;&lt;notes&gt;Shipment&nbsp;Contained&nbsp;2&nbsp;kits.&lt;/notes&gt;
&nbsp;&nbsp;&lt;status&gt;ACTIVE&lt;/status&gt;
&lt;/lot:reagent-lot&gt;
</code>]]>
        </wadl:doc>
        <wadl:request>
          <wadl:doc>
            <![CDATA[The information about the reagent lot you want to add to the system.]]>
          </wadl:doc>
          <wadl:representation mediaType="*/*" element="lot:reagent-lot" xmlns:lot="http://genologics.com/ri/reagentlot"/>
          <wadl:representation mediaType="application/xml" element="lot:reagent-lot" xmlns:lot="http://genologics.com/ri/reagentlot"/>
        </wadl:request>
        <wadl:response>
          <wadl:doc>
            <![CDATA[When the reagent lot is successfully created, the system returns an HTTP 201 (Created) code with
a response body that includes information about the new reagent lot.]]>
          </wadl:doc>
          <wadl:representation mediaType="application/xml" element="lot:reagent-lot" xmlns:lot="http://genologics.com/ri/reagentlot"/>
        </wadl:response>
      </wadl:method>
    </wadl:resource>
    <wadl:resource path="/v2/reagenttypes">
      <wadl:method name="GET">
        <wadl:doc>
          <![CDATA[Gets a paged list of reagent type links.<br/><br/>

When submitting a GET request, you can use the following query parameters to filter the results.
For more information about using query parameters, please refer to the Filtering list resources section under REST General Concepts.]]>
        </wadl:doc>
        <wadl:request>
          <wadl:param name="start-index" style="query">
            <wadl:doc>
              <![CDATA[An offset parameter that enables paging of the results. If omitted, the system returns the first page of reagent type links.]]>
            </wadl:doc>
          </wadl:param>
          <wadl:param name="name" style="query">
            <wadl:doc>
              <![CDATA[Displays only reagent types with names that match the specified value.  When filtering results, you can repeat this parameter.]]>
            </wadl:doc>
          </wadl:param>
        </wadl:request>
        <wadl:response>
          <wadl:doc>
            <![CDATA[The list of reagent type links starting from the paging offset start-index.]]>
          </wadl:doc>
          <wadl:representation mediaType="application/xml" element="rtp:reagent-types" xmlns:rtp="http://genologics.com/ri/reagenttype"/>
        </wadl:response>
      </wadl:method>
    </wadl:resource>
    <wadl:resource path="/v2/researchers">
      <wadl:method name="GET">
        <wadl:doc>
          <![CDATA[Displays a list of researchers stored in the system. In the client, researchers are referred to as contacts.
If the number of researchers returned exceeds the display maximum, the results are paged.<br/><br/>

When submitting a GET request, you can use the following query parameters to filter the results.
For more information about using query parameters, please refer to the Filtering list resources section under REST General Concepts.]]>
        </wadl:doc>
        <wadl:request>
          <wadl:param name="start-index" style="query">
            <wadl:doc>
              <![CDATA[When working with large lists of researchers, displays the researchers from a set point. If omitted, the first page of results is returned.]]>
            </wadl:doc>
          </wadl:param>
          <wadl:param name="last-modified" style="query">
            <wadl:doc>
              <![CDATA[Displays only the researchers modified since the specified date, in YYYY-MM-DDThh:mm:ssTZD format. For more information on this format, please refer to the ISO 8601 Complete Date (plus hours, minutes and seconds) standard.]]>
            </wadl:doc>
          </wadl:param>
          <wadl:param name="udf.UDFNAME[.OPERATOR]=UDFVALUE" style="query">
            <wadl:doc>
              <![CDATA[Displays only the researchers that include the specified UDF value. The system will only return researchers with standalone UDFs; it will not return researchers with UDFs that belong to a UDT. When filtering results, you can repeat this parameter.]]>
            </wadl:doc>
          </wadl:param>
          <wadl:param name="udt.name=UDTNAME" style="query">
            <wadl:doc>
              <![CDATA[Displays only the researchers that include data for the specified UDT name. When filtering results, you can repeat this parameter.]]>
            </wadl:doc>
          </wadl:param>
          <wadl:param name="udt.UDTNAME.UDFNAME[.OPERATOR]=UDFVALUE" style="query">
            <wadl:doc>
              <![CDATA[Displays only the researchers that include the specified value for a UDF within a UDT. The system will only return researchers with UDFs that belong to a UDT; it will not return researchers with standalone UDFs. When filtering results, you can repeat this parameter.]]>
            </wadl:doc>
          </wadl:param>
          <wadl:param name="firstname" style="query">
            <wadl:doc>
              <![CDATA[Displays only the researchers whose first name matches the specified value. When filtering results, you can repeat this parameter.]]>
            </wadl:doc>
          </wadl:param>
          <wadl:param name="lastname" style="query">
            <wadl:doc>
              <![CDATA[Displays only the researchers whose last name matches the specified value. When filtering results, you can repeat this parameter.]]>
            </wadl:doc>
          </wadl:param>
          <wadl:param name="username" style="query">
            <wadl:doc>
              <![CDATA[Displays only the researchers that match the username against the provided parameter. When filtering results, you can repeat this parameter.]]>
            </wadl:doc>
          </wadl:param>
        </wadl:request>
        <wadl:response>
          <wadl:doc>
            <![CDATA[The system returns a response that includes a list of researchers and URI links, starting from the start-index offset.]]>
          </wadl:doc>
          <wadl:representation mediaType="application/xml" element="res:researchers" xmlns:res="http://genologics.com/ri/researcher"/>
        </wadl:response>
      </wadl:method>
      <wadl:method name="POST">
        <wadl:doc>
          <![CDATA[Creates a new researcher in the system. In the client, this adds a new contact.<br/><br/>

When creating a new researcher, you must do the following:
<ul>
<li>You must provide a first name for the researcher.</li>
<li>You must provide a last name for the researcher.</li>
<li>You must provide a valid email address for the researcher.</li>

<br/>
If you provide credentials you must also:<br/>
<li>Provide a unique user name</li>
<li>Provide a password</li>
<li>Provide initials consisting of exactly 3 alphanumeric characters</li>
<br/>
Here is an example &lt;researcher&gt; in xml format. Note that the UDF and UDT elements are optional and must be pre-configured in the system and
the lab uri will need to match your system.<br/>
<code>
&lt;res:researcher xmlns:udf="http://genologics.com/ri/userdefined" xmlns:ri="http://genologics.com/ri" xmlns:res="http://genologics.com/ri/researcher"&gt;
&nbsp;&nbsp;&lt;first-name&gt;API&lt;/first-name&gt;
&nbsp;&nbsp;&lt;last-name&gt;Demo&lt;/last-name&gt;
&nbsp;&nbsp;&lt;email&gt;noreply@genologics.com&lt;/email&gt;
&nbsp;&nbsp;&lt;lab uri="http://qafunc03:8080/api/v2/labs/1"/&gt;
&nbsp;&nbsp;&lt;udf:type name="Researcher UDT Demo"&gt;
&nbsp;&nbsp;&nbsp;&nbsp;&lt;udf:field type="String" name="Researcher UDF Under UDT Demo"&gt;Researcher UDF Under UDT Demo value&lt;/udf:field&gt;
&nbsp;&nbsp;&lt;/udf:type&gt;
&nbsp;&nbsp;&lt;udf:field type="String" name="Researcher UDF Demo"&gt;Researcher UDF Demo value&lt;/udf:field&gt;
&nbsp;&nbsp;&lt;credentials&gt;
&nbsp;&nbsp;&nbsp;&nbsp;&lt;username&gt;apidemo&lt;/username&gt;
&nbsp;&nbsp;&nbsp;&nbsp;&lt;password&gt;apidemo&lt;/password&gt;
&nbsp;&nbsp;&nbsp;&nbsp;&lt;account-locked&gt;false&lt;/account-locked&gt;
&nbsp;&nbsp;&nbsp;&nbsp;&lt;role name="System Administrator"/&gt;
&nbsp;&nbsp;&nbsp;&nbsp;&lt;role name="Collaborator"/&gt;
&nbsp;&nbsp;&nbsp;&nbsp;&lt;role name="Facility Administrator"/&gt;
&nbsp;&nbsp;&nbsp;&nbsp;&lt;role name="Researcher"/&gt;
&nbsp;&nbsp;&lt;/credentials&gt;
&nbsp;&nbsp;&lt;initials&gt;JPX&lt;/initials&gt;
&lt;/res:researcher&gt;
</code>

Here is an example response in xml format:<br/>
<code>
&lt;res:researcher xmlns:udf="http://genologics.com/ri/userdefined" xmlns:ri="http://genologics.com/ri" xmlns:res="http://genologics.com/ri/researcher" uri="http://qafunc03:8080/api/v2/researchers/6&gt;
&nbsp;&nbsp;&lt;first-name&gt;API&lt;/first-name&gt;
&nbsp;&nbsp;&lt;last-name&gt;Demo&lt;/last-name&gt;
&nbsp;&nbsp;&lt;email&gt;noreply@genologics.com&lt;/email&gt;
&nbsp;&nbsp;&lt;lab uri="http://qafunc03:8080/api/v2/labs/1"/&gt;
&nbsp;&nbsp;&lt;udf:type name="Researcher UDT Demo"&gt;
&nbsp;&nbsp;&nbsp;&nbsp;&lt;udf:field type="String" name="Researcher UDF Under UDT Demo"&gt;Researcher UDF Under UDT Demo value&lt;/udf:field&gt;
&nbsp;&nbsp;&lt;/udf:type&gt;
&nbsp;&nbsp;&lt;udf:field type="String" name="Researcher UDF Demo"&gt;Researcher UDF Demo value&lt;/udf:field&gt;
&nbsp;&nbsp;&lt;credentials&gt;
&nbsp;&nbsp;&nbsp;&nbsp;&lt;username&gt;apidemo&lt;/username&gt;
&nbsp;&nbsp;&nbsp;&nbsp;&lt;password&gt;apidemo&lt;/password&gt;
&nbsp;&nbsp;&nbsp;&nbsp;&lt;account-locked&gt;false&lt;/account-locked&gt;
&nbsp;&nbsp;&nbsp;&nbsp;&lt;role name="System Administrator"/&gt;
&nbsp;&nbsp;&nbsp;&nbsp;&lt;role name="Collaborator"/&gt;
&nbsp;&nbsp;&nbsp;&nbsp;&lt;role name="Facility Administrator"/&gt;
&nbsp;&nbsp;&nbsp;&nbsp;&lt;role name="Researcher"/&gt;
&nbsp;&nbsp;&lt;/credentials&gt;
&nbsp;&nbsp;&lt;initials&gt;JPX&lt;/initials&gt;
&lt;/res:researcher&gt;
</code>
</ul>]]>
        </wadl:doc>
        <wadl:request>
          <wadl:doc>
            <![CDATA[The information about the researcher you want to add to the system.]]>
          </wadl:doc>
          <wadl:representation mediaType="*/*" element="res:researcher" xmlns:res="http://genologics.com/ri/researcher"/>
          <wadl:representation mediaType="application/xml" element="res:researcher" xmlns:res="http://genologics.com/ri/researcher"/>
        </wadl:request>
        <wadl:response>
          <wadl:doc>
            <![CDATA[When the researcher is successfully created, the system returns an HTTP 201 (Created) code with a response body
that includes information about the new researcher.]]>
          </wadl:doc>
          <wadl:representation mediaType="application/xml" element="res:researcher" xmlns:res="http://genologics.com/ri/researcher"/>
        </wadl:response>
      </wadl:method>
    </wadl:resource>
    <wadl:resource path="/v2/roles">
      <wadl:method name="GET">
        <wadl:doc>
          <![CDATA[Displays the list of roles stored in the system.]]>
        </wadl:doc>
        <wadl:response>
          <wadl:doc>
            <![CDATA[The system returns a response that includes a list of roles and URI links.]]>
          </wadl:doc>
          <wadl:representation mediaType="application/xml" element="role:roles" xmlns:role="http://genologics.com/ri/role"/>
        </wadl:response>
      </wadl:method>
      <wadl:method name="POST">
        <wadl:doc>
          <![CDATA[Creates a new security role in the system.<br/><br/>

When creating a new role, you must specify the name of the role you want to add.  Each role must have a unique
name. You may optionally assign permissions to the role as well.<br/><br/>

While the XML will allow you to submit a list of researchers, you may not actually assign a role to a user with
this end-point.  Any researchers provided in the XML will be ignored.<br/><br/>

An example of a &lt;role&gt; POST is as follows:<br/>
<code>
&lt;role:role xmlns:role="http://genologics.com/ri/role"&gt;
&nbsp;&nbsp;&lt;name&gt;New Role Name&lt;/name&gt;
&nbsp;&nbsp;&lt;permissions&gt;
&nbsp;&nbsp;&nbsp;&nbsp;&lt;permission uri="http://localhost:8080/api/v2/permissions/10"/&gt;
&nbsp;&nbsp;&nbsp;&nbsp;&lt;permission uri="http://localhost:8080/api/v2/permissions/11"/&gt;
&nbsp;&nbsp;&lt;/permissions&gt;
&lt;/role:role&gt;
</code>]]>
        </wadl:doc>
        <wadl:request>
          <wadl:doc>
            <![CDATA[The information about the role you want to add to the system.]]>
          </wadl:doc>
          <wadl:representation mediaType="*/*" element="role:role" xmlns:role="http://genologics.com/ri/role"/>
          <wadl:representation mediaType="application/xml" element="role:role" xmlns:role="http://genologics.com/ri/role"/>
        </wadl:request>
        <wadl:response>
          <wadl:doc>
            <![CDATA[When the role is successfully created, the system returns an HTTP 201 (Created) code with
a response body that includes information about the new role.]]>
          </wadl:doc>
          <wadl:representation mediaType="application/xml" element="role:role" xmlns:role="http://genologics.com/ri/role"/>
        </wadl:response>
      </wadl:method>
    </wadl:resource>
    <wadl:resource path="/v2/samples">
      <wadl:method name="GET">
        <wadl:doc>
          <![CDATA[Displays a list of samples stored in the system. In the client, these are referred to as Submitted Samples.
If the number of samples returned exceeds the display maximum, the results are paged.<br/><br/>

When submitting a GET request, you can use the following query parameters to filter the results.
For more information about using query parameters, please refer to the Filtering list resources section under REST General Concepts.]]>
        </wadl:doc>
        <wadl:request>
          <wadl:param name="start-index" style="query">
            <wadl:doc>
              <![CDATA[When working with large lists of results, displays the results from a set point. If omitted, the first page of results is returned.]]>
            </wadl:doc>
          </wadl:param>
          <wadl:param name="name" style="query">
            <wadl:doc>
              <![CDATA[Displays only the samples whose names match the specified value. When filtering results, you can repeat this parameter.]]>
            </wadl:doc>
          </wadl:param>
          <wadl:param name="udf.UDFNAME[.OPERATOR]=UDFVALUE" style="query">
            <wadl:doc>
              <![CDATA[Displays only samples that include the specified UDF value. The system will only return samples with standalone UDFs; it will not return samples with UDFs that belong to a UDT. When filtering results, you can repeat this parameter.]]>
            </wadl:doc>
          </wadl:param>
          <wadl:param name="udt.name=UDTNAME" style="query">
            <wadl:doc>
              <![CDATA[Displays only samples that include data for the specified UDT name. When filtering results, you can repeat this parameter.]]>
            </wadl:doc>
          </wadl:param>
          <wadl:param name="udt.UDTNAME.UDFNAME[.OPERATOR]=UDFVALUE" style="query">
            <wadl:doc>
              <![CDATA[Displays only samples that include the specified value for a UDF within a UDT. The system will only return samples with UDFs that belong to a UDT; it will not return samples with standalone UDFs. When filtering results, you can repeat this parameter.]]>
            </wadl:doc>
          </wadl:param>
          <wadl:param name="projectlimsid" style="query">
            <wadl:doc>
              <![CDATA[Displays only samples that belong to the project specified by the project LIMS ID. When filtering results, you can repeat this parameter.]]>
            </wadl:doc>
          </wadl:param>
          <wadl:param name="projectname" style="query">
            <wadl:doc>
              <![CDATA[Displays only samples that belong to the specified project name. When filtering results, you can repeat this parameter.]]>
            </wadl:doc>
          </wadl:param>
        </wadl:request>
        <wadl:response>
          <wadl:doc>
            <![CDATA[The system returns a response that includes a list of samples and URI links, starting from the start-index offset.]]>
          </wadl:doc>
          <wadl:representation mediaType="application/xml" element="smp:samples" xmlns:smp="http://genologics.com/ri/sample"/>
        </wadl:response>
      </wadl:method>
      <wadl:method name="POST">
        <wadl:doc>
          <![CDATA[Creates a new sample.<br/><br/>

When creating a new sample the following constraints are enforced:
<ul>
<li>A name must be provided when creating a sample.</li>
<li>The project for the sample must link to an existing project in the system.</li>
<li>A container location for the sample must link to an existing container in the system and refer to a valid well location.</li>
<li>A new LIMS ID will be allocated and assigned to the sample.</li>
<br/>

Example XML to add single sample with no udfs to an existing project and container, where the server is localhost.
The project and container uri's will need to match your system.
<code>
&lt;?xml version="1.0" encoding="UTF-8"?&gt;
&lt;smp:samplecreation xmlns:smp="http://genologics.com/ri/sample"&gt;
&nbsp;&nbsp;&lt;name&gt;Example Sample&lt;/name&gt;
&nbsp;&nbsp;&lt;project uri="http://localhost:8080/api/v2/projects/ADM243"&gt;&lt;/project&gt;
&nbsp;&nbsp;&lt;location&gt;
&nbsp;&nbsp;&nbsp;&nbsp;&lt;container uri="http://localhost:8080/api/v2/containers/27-100001"&gt;&lt;/container&gt;
&nbsp;&nbsp;&nbsp;&nbsp;&lt;value&gt;1:1&lt;/value&gt;
&nbsp;&nbsp;&lt;/location&gt;
&lt;/smp:samplecreation&gt;
</code>
</ul>

Note: control samples can be created during step creation. See the documentation on Step POST for details.]]>
        </wadl:doc>
        <wadl:request>
          <wadl:doc>
            <![CDATA[The representation for the new sample.]]>
          </wadl:doc>
          <wadl:representation mediaType="*/*" element="smp:samplecreation" xmlns:smp="http://genologics.com/ri/sample"/>
          <wadl:representation mediaType="application/xml" element="smp:samplecreation" xmlns:smp="http://genologics.com/ri/sample"/>
        </wadl:request>
        <wadl:response>
          <wadl:doc>
            <![CDATA[HTTP Status 201 (Created) with the URI to new sample in the Location header of the response.  The representation for the
newly created sample will be returned as the response body.]]>
          </wadl:doc>
          <wadl:representation mediaType="application/xml" element="smp:samplecreation" xmlns:smp="http://genologics.com/ri/sample"/>
        </wadl:response>
      </wadl:method>
    </wadl:resource>
    <wadl:resource path="/v2/steps">
      <wadl:method name="POST">
        <wadl:doc>
          <![CDATA[Begins a step.<br/><br/>

When specifying inputs to the step, these may either be artifact URIs (using the 'uri' attribute) or
a control sample by specifying the control type URI (using the 'control-type-uri' attribute). Only one of
'uri' or 'control-type-uri' can be specified for each input. When using the 'control-type-uri' to designate a
control sample, the control type specified must be in the list of permitted control types for the protocol step.
The input control samples will be created as part of successful step creation.]]>
        </wadl:doc>
        <wadl:request>
          <wadl:doc>
            <![CDATA[A representation of the step to be created including all the analyte artifacts to be worked on]]>
          </wadl:doc>
          <wadl:representation mediaType="application/xml" element="stp:step-creation" xmlns:stp="http://genologics.com/ri/step"/>
        </wadl:request>
        <wadl:response>
          <wadl:doc>
            <![CDATA[The representation of the step.]]>
          </wadl:doc>
          <wadl:representation mediaType="application/xml" element="stp:step" xmlns:stp="http://genologics.com/ri/step"/>
        </wadl:response>
      </wadl:method>
    </wadl:resource>
    <wadl:resource path="/v2/{version}">
      <wadl:param name="version" style="path">
        <wadl:doc>
          <![CDATA[The specific version of the API for the resource index.]]>
        </wadl:doc>
      </wadl:param>
      <wadl:method name="GET">
        <wadl:doc>
          <![CDATA[Provides an entry point for a specific version of the API]]>
        </wadl:doc>
        <wadl:request/>
        <wadl:response>
          <wadl:doc>
            <![CDATA[a list of links to API list resources]]>
          </wadl:doc>
          <wadl:representation mediaType="application/xml" element="ri:index" xmlns:ri="http://genologics.com/ri"/>
        </wadl:response>
      </wadl:method>
    </wadl:resource>
    <wadl:resource path="/v2/artifactgroups/{experimentid}">
      <wadl:param name="experimentid" style="path">
        <wadl:doc>
          <![CDATA[The artifactgroup ID of the artifact group you would like to display.]]>
        </wadl:doc>
      </wadl:param>
      <wadl:method name="GET">
        <wadl:doc>
          <![CDATA[Displays the XML representation of a specified artifact group.]]>
        </wadl:doc>
        <wadl:request/>
        <wadl:response>
          <wadl:doc>
            <![CDATA[The system returns a response that includes the XML representation of the artifact group.]]>
          </wadl:doc>
          <wadl:representation mediaType="application/xml" element="artgr:artifactgroup" xmlns:artgr="http://genologics.com/ri/artifactgroup"/>
        </wadl:response>
      </wadl:method>
    </wadl:resource>
    <wadl:resource path="/v2/artifacts/{limsid}">
      <wadl:param name="limsid" style="path">
        <wadl:doc>
          <![CDATA[The LIMS ID of the artifact you would like to display.]]>
        </wadl:doc>
      </wadl:param>
      <wadl:method name="GET">
        <wadl:doc>
          <![CDATA[Displays the XML representation of a specified artifact.<br/><br/>

The system uses a numerical 'state' to track process-level changes made to an artifact.
The state is changed when you run a process on an artifact, either in the client or
through the API. You can locate the state changes made to an artifact using the post-process-uri
and uri attributes within the input-output-map element of a completed process. For more information
about these attributes and elements, please consult the processes (prc) namespace documentation.]]>
        </wadl:doc>
        <wadl:request>
          <wadl:param name="state" style="query">
            <wadl:doc>
              <![CDATA[The state of the artifact you would like to display, preceded with a Question Mark ( ? ). If you do not specify a state, the current state of the artifact is displayed.]]>
            </wadl:doc>
          </wadl:param>
        </wadl:request>
        <wadl:response>
          <wadl:doc>
            <![CDATA[The system returns a response that includes the XML representation of the artifact at the specified state.]]>
          </wadl:doc>
          <wadl:representation mediaType="application/xml" element="art:artifact" xmlns:art="http://genologics.com/ri/artifact"/>
        </wadl:response>
      </wadl:method>
      <wadl:method name="PUT">
        <wadl:doc>
          <![CDATA[Updates the characteristics of a specified artifact.

When submitting a PUT request, you can update the following artifact attributes:
<ul>
<li>name: The name attribute must be provided, but can be modified.</li>
<li>qc-flag: If the qc-flag attribute is not provided, it will be set to UNKNOWN.</li>
<li>field: The entire set of fields must be provided.  Fields can be added or removed.</li>
<li>reagent-label: Labels can be added or removed. Reagent Labels will not propagate to downstream artifacts of any processes that have already been run on this artifact.</li>
<li>artifact-group An Artifact can belong to one or more artifact-groups. artifact-group attributes can be added or removed.</li>

SearchResultFile, ResultFile, SpotList type artifacts can have the following attribute modified:
<li>file</li>

For Analyte type artifacts the following attributes can be modified:
<li>working-flag</li>
</ul>]]>
        </wadl:doc>
        <wadl:request>
          <wadl:doc>
            <![CDATA[The information about the artifact you would like to update.]]>
          </wadl:doc>
          <wadl:representation mediaType="*/*" element="art:artifact" xmlns:art="http://genologics.com/ri/artifact"/>
          <wadl:representation mediaType="application/xml" element="art:artifact" xmlns:art="http://genologics.com/ri/artifact"/>
        </wadl:request>
        <wadl:response>
          <wadl:doc>
            <![CDATA[When the artifact is successfully updated, the system returns an HTTP 200 (OK) code with a response body that includes the
updated attributes of the artifact.]]>
          </wadl:doc>
          <wadl:representation mediaType="application/xml" element="art:artifact" xmlns:art="http://genologics.com/ri/artifact"/>
        </wadl:response>
      </wadl:method>
      <wadl:method name="PUT">
        <wadl:doc>
          <![CDATA[This method has been deprecated. For information on how to add files to the system and associate them with artifacts,
please refer to the Files resource section of this reference guide.

Updates the file associated with a result file artifact existing in the system.]]>
        </wadl:doc>
        <wadl:request>
          <wadl:doc>
            <![CDATA[the file content]]>
          </wadl:doc>
          <wadl:representation mediaType="application/octet-stream"/>
          <wadl:param name="Content-Length" style="header">
            <wadl:doc>
              <![CDATA[the length of the file provided to replace any existing file associated with the artifact]]>
            </wadl:doc>
          </wadl:param>
          <wadl:param name="x-original-location" style="header">
            <wadl:doc>
              <![CDATA[the original location of the file]]>
            </wadl:doc>
          </wadl:param>
        </wadl:request>
        <wadl:response>
          <wadl:doc>
            <![CDATA[The updated representation of the result file artifact.]]>
          </wadl:doc>
          <wadl:representation mediaType="application/xml"/>
        </wadl:response>
      </wadl:method>
    </wadl:resource>
    <wadl:resource path="/v2/configuration/protocols">
      <wadl:method name="GET">
        <wadl:doc>
          <![CDATA[Displays a list of stored Protocols in the system.<br/><br/>

An example of returned &lt;protocols&gt; is as follows:<br/>
<code>
&lt;protcnf:protocols xmlns:protcnf="http://genologics.com/ri/protocolconfiguration"&gt;
&nbsp;&nbsp;&lt;protocol uri="http://localhost:8080/api/v2/configuration/protocols/1" name="RNA Initial QC"/&gt;
&nbsp;&nbsp;&lt;protocol uri="http://localhost:8080/api/v2/configuration/protocols/13" name="Preconfig Minimum Steps"/&gt;
&nbsp;&nbsp;&lt;protocol uri="http://localhost:8080/api/v2/configuration/protocols/7" name="TruSeq Amplicon Library Prep"/&gt;
&nbsp;&nbsp;&lt;protocol uri="http://localhost:8080/api/v2/configuration/protocols/4" name="Nextera DNA Library Prep"/&gt;
&nbsp;&nbsp;&lt;protocol uri="http://localhost:8080/api/v2/configuration/protocols/2" name="TruSeq RNA Library Prep"/&gt;
&nbsp;&nbsp;&lt;protocol uri="http://localhost:8080/api/v2/configuration/protocols/5" name="TruSeq DNA Library Prep"/&gt;
&lt;/protcnf:protocols&gt;
</code><br/>

When submitting a GET request, you can use the following query parameters to filter the results.
For more information about using query parameters, please refer to the Filtering list resources section under REST General Concepts.]]>
        </wadl:doc>
        <wadl:request>
          <wadl:param name="name" style="query">
            <wadl:doc>
              <![CDATA[the name of the protocol to get]]>
            </wadl:doc>
          </wadl:param>
        </wadl:request>
        <wadl:response>
          <wadl:doc>
            <![CDATA[The system returns a response that includes a list of protocol and URI links, starting from the start-index offset.]]>
          </wadl:doc>
          <wadl:representation mediaType="application/xml" element="protcnf:protocols" xmlns:protcnf="http://genologics.com/ri/protocolconfiguration"/>
        </wadl:response>
      </wadl:method>
    </wadl:resource>
    <wadl:resource path="/v2/configuration/udfs">
      <wadl:method name="GET">
        <wadl:doc>
          <![CDATA[Gets a paged list of user defined field links.  This list is ordered by attach-to-name, UDT, and then sequence number (mimics client display order).<br/><br/>

When submitting a GET request, you can use the following query parameters to filter the results.
For more information about using query parameters, please refer to the Filtering list resources section under REST General Concepts.]]>
        </wadl:doc>
        <wadl:request>
          <wadl:param name="start-index" style="query">
            <wadl:doc>
              <![CDATA[An offset parameter that enables paging of the results. If omitted, the system returns the first page of user defined field links.]]>
            </wadl:doc>
          </wadl:param>
          <wadl:param name="name" style="query">
            <wadl:doc>
              <![CDATA[Displays only links to user defined fields with names that match the specified value.]]>
            </wadl:doc>
          </wadl:param>
          <wadl:param name="attach-to-name" style="query">
            <wadl:doc>
              <![CDATA[Displays only links to user defined fields attached to the specified item in the system, such as Sample, Project, Container, or the name of a process. Refer to the 'field' type in the 'cnf' namespace for more information.]]>
            </wadl:doc>
          </wadl:param>
          <wadl:param name="attach-to-category" style="query">
            <wadl:doc>
              <![CDATA[If 'attach-to-name' is the name of a process, specify 'ProcessType'. Must not be provided otherwise.]]>
            </wadl:doc>
          </wadl:param>
        </wadl:request>
        <wadl:response>
          <wadl:doc>
            <![CDATA[the list of user defined field links starting from the paging offset 'start-index'.]]>
          </wadl:doc>
          <wadl:representation mediaType="application/xml" element="cnf:udfs" xmlns:cnf="http://genologics.com/ri/configuration"/>
        </wadl:response>
      </wadl:method>
    </wadl:resource>
    <wadl:resource path="/v2/configuration/udts">
      <wadl:method name="GET">
        <wadl:doc>
          <![CDATA[Gets a paged list of user defined type links.<br/><br/>

When submitting a GET request, you can use the following query parameters to filter the results.
For more information about using query parameters, please refer to the Filtering list resources section under REST General Concepts.]]>
        </wadl:doc>
        <wadl:request>
          <wadl:param name="start-index" style="query">
            <wadl:doc>
              <![CDATA[An offset parameter that enables paging of the results. If omitted, the system returns the first page of user defined field links.]]>
            </wadl:doc>
          </wadl:param>
          <wadl:param name="name" style="query">
            <wadl:doc>
              <![CDATA[Displays only udts with names that match the specified value. When filtering results, you can repeat this parameter.]]>
            </wadl:doc>
          </wadl:param>
          <wadl:param name="attach-to-name" style="query">
            <wadl:doc>
              <![CDATA[Displays only links to user defined types attached to the specified item in the system, such as Sample, Project, Container, or the name of a process. Refer to the 'type' type in the 'cnf' namespace for more information.]]>
            </wadl:doc>
          </wadl:param>
          <wadl:param name="attach-to-category" style="query">
            <wadl:doc>
              <![CDATA[If 'attach-to-name' is the name of a process, specify 'ProcessType'. Must not be provided otherwise.]]>
            </wadl:doc>
          </wadl:param>
        </wadl:request>
        <wadl:response>
          <wadl:doc>
            <![CDATA[the list of user defined field links starting from the paging offset 'start-index'.]]>
          </wadl:doc>
          <wadl:representation mediaType="application/xml" element="cnf:udts" xmlns:cnf="http://genologics.com/ri/configuration"/>
        </wadl:response>
      </wadl:method>
    </wadl:resource>
    <wadl:resource path="/v2/configuration/workflows">
      <wadl:method name="GET">
        <wadl:doc>
          <![CDATA[Displays a list of workflows stored in the system.<br/><br/>

An example of returned &lt;workflows&gt; is as follows:<br/>
<br/>
<code>
&lt;wkfcnf:workflows xmlns:wkfcnf="http://genologics.com/ri/workflowconfiguration"&gt;
&nbsp;&nbsp;&lt;workflow status="PENDING" uri="http://localhost:8080/api/v2/configuration/workflows/1" name="Nextera DNA for HiSeq"/&gt;
&nbsp;&nbsp;&lt;workflow status="ACTIVE" uri="http://localhost:8080/api/v2/configuration/workflows/2" name="Nextera DNA for MiSeq"/&gt;
&lt;/wkfcnf:workflows&gt;
</code>
<br/>
When submitting a GET request, you can use the following query parameters to filter the results.
For more information about using query parameters, please refer to the Filtering list resources section under REST General Concepts.]]>
        </wadl:doc>
        <wadl:request>
          <wadl:param name="name" style="query">
            <wadl:doc>
              <![CDATA[Displays workflows with a name that matches the specified value.]]>
            </wadl:doc>
          </wadl:param>
        </wadl:request>
        <wadl:response>
          <wadl:doc>
            <![CDATA[The system returns a response that includes a list of workflows and URI links.]]>
          </wadl:doc>
          <wadl:representation mediaType="application/xml" element="wkfcnf:workflows" xmlns:wkfcnf="http://genologics.com/ri/workflowconfiguration"/>
        </wadl:response>
      </wadl:method>
    </wadl:resource>
    <wadl:resource path="/v2/containers/{limsid}">
      <wadl:param name="limsid" style="path">
        <wadl:doc>
          <![CDATA[The LIMS ID of the container you would like to display.]]>
        </wadl:doc>
      </wadl:param>
      <wadl:method name="GET">
        <wadl:doc>
          <![CDATA[Displays the XML representation of a specified container.]]>
        </wadl:doc>
        <wadl:request/>
        <wadl:response>
          <wadl:doc>
            <![CDATA[The system returns a response that includes the XML representation of the container.]]>
          </wadl:doc>
          <wadl:representation mediaType="application/xml" element="con:container" xmlns:con="http://genologics.com/ri/container"/>
        </wadl:response>
      </wadl:method>
      <wadl:method name="PUT">
        <wadl:doc>
          <![CDATA[Updates the characteristics of a specified container.<br/><br/>

When submitting a PUT request, you can update the following container attributes:
<ul>
<li><b>name</b>: You can change the name of the container.  If unspecified, the name will be set to the container's LIMS ID.</li>
<li><b>state</b>: You can change the state of the container. You can set a container to DISCARDED or DEPLETED at any time. You can set
a container to EMPTY if there are no analytes within the container.</li>
<li><b>field</b>: You can change or remove the values associated with User-Defined Fields.  Each time you change a container's characteristics,
you must include every UDF that is currently associated with the container, whether they are being changed or not.
Otherwise, the UDF value will be deleted. If you would like to remove a UDF value, omit the UDF from the PUT request.
<li><b>type</b>: You can change the User-Defined Type associated with the container or the UDF values associated with the current UDT.
Each time you change a container's characteristics, you must include the UDT and all related UDFs that are currently associated
with the container, whether they are being changed or not.  Otherwise, the values will be deleted.
If you would like to remove a UDF value, omit the UDF from the PUT request.
</ul>

<p>
If you attempt to update attributes that cannot be modified, the system will ignore those elements of the PUT request.
</p>]]>
        </wadl:doc>
        <wadl:request>
          <wadl:doc>
            <![CDATA[The information about the container you would like to update.]]>
          </wadl:doc>
          <wadl:representation mediaType="*/*" element="con:container" xmlns:con="http://genologics.com/ri/container"/>
          <wadl:representation mediaType="application/xml" element="con:container" xmlns:con="http://genologics.com/ri/container"/>
        </wadl:request>
        <wadl:response>
          <wadl:doc>
            <![CDATA[When the container is successfully updated, the system returns an HTTP 200 (OK) code with a response body that includes the
updated attributes of the container.]]>
          </wadl:doc>
          <wadl:representation mediaType="application/xml" element="con:container" xmlns:con="http://genologics.com/ri/container"/>
        </wadl:response>
      </wadl:method>
      <wadl:method name="DELETE">
        <wadl:doc>
          <![CDATA[Removes a container from the system. You can only delete empty containers that have no samples placed in them.]]>
        </wadl:doc>
        <wadl:request/>
        <wadl:response>
          <wadl:doc>
            <![CDATA[When the container is successfully removed, the system returns an HTTP 204 (No Content) code with an empty
response body.]]>
          </wadl:doc>
          <wadl:representation mediaType="application/xml" element="con:container" xmlns:con="http://genologics.com/ri/container"/>
        </wadl:response>
      </wadl:method>
    </wadl:resource>
    <wadl:resource path="/v2/containertypes/{containertypeid}">
      <wadl:param name="containertypeid" style="path">
        <wadl:doc>
          <![CDATA[The ID of the container type you would like to display.]]>
        </wadl:doc>
      </wadl:param>
      <wadl:method name="GET">
        <wadl:doc>
          <![CDATA[Displays the XML representation of a specified container type.]]>
        </wadl:doc>
        <wadl:request/>
        <wadl:response>
          <wadl:doc>
            <![CDATA[The system returns a response that includes the XML representation of the container type.]]>
          </wadl:doc>
          <wadl:representation mediaType="application/xml" element="ctp:container-type" xmlns:ctp="http://genologics.com/ri/containertype"/>
        </wadl:response>
      </wadl:method>
    </wadl:resource>
    <wadl:resource path="/v2/controltypes/{controltypeid}">
      <wadl:param name="controltypeid" style="path">
        <wadl:doc>
          <![CDATA[The control type ID of the control type you would like to display.]]>
        </wadl:doc>
      </wadl:param>
      <wadl:method name="GET">
        <wadl:doc>
          <![CDATA[Displays the XML representation of a specified control type.]]>
        </wadl:doc>
        <wadl:request/>
        <wadl:response>
          <wadl:doc>
            <![CDATA[The system returns a response that includes the XML representation of the control type.]]>
          </wadl:doc>
          <wadl:representation mediaType="application/xml" element="ctrltp:control-type" xmlns:ctrltp="http://genologics.com/ri/controltype"/>
        </wadl:response>
      </wadl:method>
      <wadl:method name="PUT">
        <wadl:doc>
          <![CDATA[Updates the control type in the system.<br/><br/>

When updating a control type, you must specify the name of the control type you want to update.
Unless your XML specifies a particular archived state, the system will not update the archived state of the control type.<br/><br/>

An example of a submitted &lt;control-type&gt; is as follows:<br/>
<code>
&lt;ctrltp:control-type xmlns:ctrltp="http://genologics.com/ri/controltype" uri="http://localhost:8080/api/v2/controltypes/{controlTypeId}" name="E. coli genomic DNA"&gt;
&nbsp;&nbsp;&lt;supplier&gt;ATCC&lt;/supplier&gt;
&nbsp;&nbsp;&lt;catalogue-number&gt;11229D-5&lt;/catalogue-number&gt;
&nbsp;&nbsp;&lt;website&gt;http://www.atcc.org/Products/All/11229D-5.aspx&lt;/website&gt;
&nbsp;&nbsp;&lt;archived&gt;false&lt;/archived&gt;
&nbsp;&nbsp;&lt;single-step&gt;false&lt;/single-step&gt;
&lt;/ctrltp:control-type&gt;
</code>]]>
        </wadl:doc>
        <wadl:request>
          <wadl:doc>
            <![CDATA[The information about the control type you would like to update.]]>
          </wadl:doc>
          <wadl:representation mediaType="*/*" element="ctrltp:control-type" xmlns:ctrltp="http://genologics.com/ri/controltype"/>
          <wadl:representation mediaType="application/xml" element="ctrltp:control-type" xmlns:ctrltp="http://genologics.com/ri/controltype"/>
        </wadl:request>
        <wadl:response>
          <wadl:doc>
            <![CDATA[When the control type is successfully updated, the system returns an HTTP 200 (OK) code with a response body that includes the
updated attributes of the control type.]]>
          </wadl:doc>
          <wadl:representation mediaType="application/xml" element="ctrltp:control-type" xmlns:ctrltp="http://genologics.com/ri/controltype"/>
        </wadl:response>
      </wadl:method>
    </wadl:resource>
    <wadl:resource path="/v2/external/{externalid}">
      <wadl:param name="externalid" style="path">
        <wadl:doc>
          <![CDATA[The external identifier string for the entity. This value should be double URL encoded in order to allow identifiers that are URLs themselves.]]>
        </wadl:doc>
      </wadl:param>
      <wadl:method name="GET">
        <wadl:doc>
          <![CDATA[Get a single entity by its external identifier.]]>
        </wadl:doc>
        <wadl:request/>
        <wadl:response>
          <wadl:doc>
            <![CDATA[HTTP_NOT_FOUND if nothing exists with the supplied identifier
HTTP_NO_CONTENT if an unsupported entity is found
HTTP_OK Response containing the serialized entity for a valid entity]]>
          </wadl:doc>
          <wadl:representation mediaType="application/xml"/>
        </wadl:response>
      </wadl:method>
    </wadl:resource>
    <wadl:resource path="/v2/files/{limsid}">
      <wadl:param name="limsid" style="path">
        <wadl:doc>
          <![CDATA[The LIMS ID of the file you want to remove.]]>
        </wadl:doc>
      </wadl:param>
      <wadl:method name="DELETE">
        <wadl:doc>
          <![CDATA[Removes all references to a file.<br/><br/>

When using the DELETE operation, files remain on the server (which is referred to by the content-location
element). However, any links to the files are removed within the system, and the related resources referenced
by the files' attached-to elements will no longer contain a reference to the files, thereby severing
their relationship.]]>
        </wadl:doc>
        <wadl:request/>
        <wadl:response>
          <wadl:doc>
            <![CDATA[When the file is successfully removed, the system returns an HTTP 204 (No Content) code with an empty
response body.]]>
          </wadl:doc>
          <wadl:representation mediaType="application/xml" element="file:file" xmlns:file="http://genologics.com/ri/file"/>
        </wadl:response>
      </wadl:method>
      <wadl:method name="GET">
        <wadl:doc>
          <![CDATA[Gets the representation of the file.]]>
        </wadl:doc>
        <wadl:request/>
        <wadl:response>
          <wadl:doc>
            <![CDATA[The representation of the file.]]>
          </wadl:doc>
          <wadl:representation mediaType="application/xml" element="file:file" xmlns:file="http://genologics.com/ri/file"/>
        </wadl:response>
      </wadl:method>
      <wadl:method name="PUT">
        <wadl:doc>
          <![CDATA[Updates the modifiable values of a file.<br/><br/>

When issuing a PUT request, you can update the following file attributes:
<ul>
<li>attached-to: You can update the URI of the resource or artifact that the file is associated
with in the system.</li>
<li>is-published: You can update whether the file is displayed within LabLink. To publish a file to LabLink,
use 'true'. To remove a file from LabLink, leaving it viewable only within the client,
use 'false'.</li>
<br/>
If you attempt to update attributes that cannot be modified, the system will ignore those elements of the PUT request.<br/><br/>

When working with the attached-to element, the following resources or artifacts can be used:
<li>Projects</li>
<li>Processes</li>
<li>Samples</li>
<li>File-based artifacts, such as ResultFile, SearchResultFile, and Image.</li>
<br/>
You can only attach a single file to an artifact. However, you can attach multiple files to project,
process, and sample resources.
</ul>]]>
        </wadl:doc>
        <wadl:request>
          <wadl:doc>
            <![CDATA[The information about the file you would like to update.]]>
          </wadl:doc>
          <wadl:representation mediaType="*/*" element="file:file" xmlns:file="http://genologics.com/ri/file"/>
          <wadl:representation mediaType="application/xml" element="file:file" xmlns:file="http://genologics.com/ri/file"/>
        </wadl:request>
        <wadl:response>
          <wadl:doc>
            <![CDATA[When the file is successfully updated, the system returns an HTTP 200 (Ok) code with a response body that
includes the updated attributes of the file.]]>
          </wadl:doc>
          <wadl:representation mediaType="application/xml" element="file:file" xmlns:file="http://genologics.com/ri/file"/>
        </wadl:response>
      </wadl:method>
    </wadl:resource>
    <wadl:resource path="/v2/instruments/{instrumentid}">
      <wadl:param name="instrumentid" style="path">
        <wadl:doc>
          <![CDATA[The ID of the instrument you would like to retrieve.]]>
        </wadl:doc>
      </wadl:param>
      <wadl:method name="GET">
        <wadl:doc>
          <![CDATA[Retrieves the XML representation of the specified instrument.]]>
        </wadl:doc>
        <wadl:request/>
        <wadl:response>
          <wadl:doc>
            <![CDATA[The system returns a response that includes the XML representation of the instrument.]]>
          </wadl:doc>
          <wadl:representation mediaType="application/xml" element="inst:instrument" xmlns:inst="http://genologics.com/ri/instrument"/>
        </wadl:response>
      </wadl:method>
    </wadl:resource>
    <wadl:resource path="/v2/labs/{labid}">
      <wadl:param name="labid" style="path">
        <wadl:doc>
          <![CDATA[The ID of the lab you would like to retrieve.]]>
        </wadl:doc>
      </wadl:param>
      <wadl:method name="GET">
        <wadl:doc>
          <![CDATA[Retrieves the XML representation of the specified lab.<br/><br/>

NOTE: Labs are referred to as Accounts in Clarity LIMS UIs.]]>
        </wadl:doc>
        <wadl:request/>
        <wadl:response>
          <wadl:doc>
            <![CDATA[The system returns a response that includes the XML representation of the lab.]]>
          </wadl:doc>
          <wadl:representation mediaType="application/xml" element="lab:lab" xmlns:lab="http://genologics.com/ri/lab"/>
        </wadl:response>
      </wadl:method>
      <wadl:method name="PUT">
        <wadl:doc>
          <![CDATA[Updates the characteristics of a specified lab. When submitting a PUT request, you can update the following lab attributes:
<ul>
<li>name: You must include the name element when submitting a PUT request, even if you do not want to change the lab's name.</li>
<li>field: You must include all current UDFs recorded for the lab, even if you do not want to update the UDF values.
However, you can add new UDF values, and update or remove current UDF values.</li>
<li>type: You must include the current UDT recorded for the lab, even if you do not want to update the UDT values.
However, you can replace the current UDT with another UDT, or you can add or remove fields within the current UDT.</li>
<li>billing-address</li>
<li>shipping-address</li>
<li>website</li>
<li>externalid</li>
<br/>
If you attempt to update attributes that cannot be modified, the system will ignore those elements of the PUT request.<br/><br/>

NOTE: Labs are referred to as Accounts in Clarity LIMS UIs.
</ul>]]>
        </wadl:doc>
        <wadl:request>
          <wadl:doc>
            <![CDATA[The information about the lab you would like to update.]]>
          </wadl:doc>
          <wadl:representation mediaType="*/*" element="lab:lab" xmlns:lab="http://genologics.com/ri/lab"/>
          <wadl:representation mediaType="application/xml" element="lab:lab" xmlns:lab="http://genologics.com/ri/lab"/>
        </wadl:request>
        <wadl:response>
          <wadl:doc>
            <![CDATA[When the lab is successfully updated, the system returns an HTTP 200 (OK) code with a response body that
includes the updated attributes of the lab.]]>
          </wadl:doc>
          <wadl:representation mediaType="application/xml" element="lab:lab" xmlns:lab="http://genologics.com/ri/lab"/>
        </wadl:response>
      </wadl:method>
    </wadl:resource>
    <wadl:resource path="/v2/permissions/{permissionId}">
      <wadl:param name="permissionId" style="path">
        <wadl:doc>
          <![CDATA[The permission ID of the permission you would like to display.]]>
        </wadl:doc>
      </wadl:param>
      <wadl:method name="GET">
        <wadl:doc>
          <![CDATA[Displays the XML representation of a specified permission.]]>
        </wadl:doc>
        <wadl:request/>
        <wadl:response>
          <wadl:doc>
            <![CDATA[The system returns a response that includes the XML representation of the permission.]]>
          </wadl:doc>
          <wadl:representation mediaType="application/xml" element="perm:permission" xmlns:perm="http://genologics.com/ri/permission"/>
        </wadl:response>
      </wadl:method>
    </wadl:resource>
    <wadl:resource path="/v2/processes/{limsid}">
      <wadl:param name="limsid" style="path">
        <wadl:doc>
          <![CDATA[The LIMS ID of the process to retrieve.]]>
        </wadl:doc>
      </wadl:param>
      <wadl:method name="GET">
        <wadl:doc>
          <![CDATA[Gets the representation of the process.]]>
        </wadl:doc>
        <wadl:request/>
        <wadl:response>
          <wadl:doc>
            <![CDATA[The representation of the process.]]>
          </wadl:doc>
          <wadl:representation mediaType="application/xml" element="prc:process" xmlns:prc="http://genologics.com/ri/process"/>
        </wadl:response>
      </wadl:method>
      <wadl:method name="PUT">
        <wadl:doc>
          <![CDATA[Updates the mutable values for a process.<br/><br/>

Only a subset of the process' attributes can be modified.  Unmodifiable attributes
will be ignored.<br/><br/>

The following attributes of a process can be modified:
<ul>
<li>date-run: The date-run attribute is optional, but can be modified.</li>
<li>technician: The technician must be provided, but can be modified.</li>
<li>field: The entire set of fields must be provided.  Fields can be added or removed.</li>
<li>type: The type and all fields must be provided.  The type can be changed,
and fields can be added or removed from the type.</li>
<li>file</li>
</ul>]]>
        </wadl:doc>
        <wadl:request>
          <wadl:doc>
            <![CDATA[The new representation for the process]]>
          </wadl:doc>
          <wadl:representation mediaType="*/*" element="prc:process" xmlns:prc="http://genologics.com/ri/process"/>
          <wadl:representation mediaType="application/xml" element="prc:process" xmlns:prc="http://genologics.com/ri/process"/>
        </wadl:request>
        <wadl:response>
          <wadl:doc>
            <![CDATA[The current representation of the process, after modifiable attributes have been updated.]]>
          </wadl:doc>
          <wadl:representation mediaType="application/xml" element="prc:process" xmlns:prc="http://genologics.com/ri/process"/>
        </wadl:response>
      </wadl:method>
    </wadl:resource>
    <wadl:resource path="/v2/processtemplates/{limsid}">
      <wadl:param name="limsid" style="path">
        <wadl:doc>
          <![CDATA[The Process Template ID of the Process Template to retrieve]]>
        </wadl:doc>
      </wadl:param>
      <wadl:method name="GET">
        <wadl:doc>
          <![CDATA[Gets the representation of the Process Templates.]]>
        </wadl:doc>
        <wadl:request/>
        <wadl:response>
          <wadl:doc>
            <![CDATA[The representation of the Process Template]]>
          </wadl:doc>
          <wadl:representation mediaType="application/xml" element="ptm:process-template" xmlns:ptm="http://genologics.com/ri/processtemplate"/>
        </wadl:response>
      </wadl:method>
    </wadl:resource>
    <wadl:resource path="/v2/processtypes/{processtypeid}">
      <wadl:param name="processtypeid" style="path">
        <wadl:doc>
          <![CDATA[The ID of the process type to retrieve.]]>
        </wadl:doc>
      </wadl:param>
      <wadl:method name="GET">
        <wadl:doc>
          <![CDATA[Gets the representation of the process type.]]>
        </wadl:doc>
        <wadl:request/>
        <wadl:response>
          <wadl:doc>
            <![CDATA[The representation of the process type.]]>
          </wadl:doc>
          <wadl:representation mediaType="application/xml" element="ptp:process-type" xmlns:ptp="http://genologics.com/ri/processtype"/>
        </wadl:response>
      </wadl:method>
    </wadl:resource>
    <wadl:resource path="/v2/projects/{limsid}">
      <wadl:param name="limsid" style="path">
        <wadl:doc>
          <![CDATA[The LIMS ID of the project you would like to retrieve.]]>
        </wadl:doc>
      </wadl:param>
      <wadl:method name="GET">
        <wadl:doc>
          <![CDATA[Retrieves the XML representation of the specified project.]]>
        </wadl:doc>
        <wadl:request/>
        <wadl:response>
          <wadl:doc>
            <![CDATA[The system returns a response that includes the XML representation of the project.]]>
          </wadl:doc>
          <wadl:representation mediaType="application/xml" element="prj:project" xmlns:prj="http://genologics.com/ri/project"/>
        </wadl:response>
      </wadl:method>
      <wadl:method name="PUT">
        <wadl:doc>
          <![CDATA[Updates the mutable values for a project.<br/><br/>

Only a subset of the project's attributes can be modified.  Unmodifiable attributes
will be ignored.<br/><br/>

The following attributes of a project can be modified:
<ul>
<li>name: The name attribute must be provided, but can be modified.</li>
<li>researcher: The researcher must link to an existing researcher in the system.</li>
<li>open-date</li>
<li>close-date: close-date can only be specified if open-date is also provided.</li>
<li>invoice-date</li>
<li>field: The entire set of fields must be provided.  fields can be added or removed.</li>
<li>type: The type and all fields must be provided.  The type can be changed,
and fields can be added or removed from the type.</li>
<li>file</li>
</ul>]]>
        </wadl:doc>
        <wadl:request>
          <wadl:doc>
            <![CDATA[The new representation for the project.]]>
          </wadl:doc>
          <wadl:representation mediaType="*/*" element="prj:project" xmlns:prj="http://genologics.com/ri/project"/>
          <wadl:representation mediaType="application/xml" element="prj:project" xmlns:prj="http://genologics.com/ri/project"/>
        </wadl:request>
        <wadl:response>
          <wadl:doc>
            <![CDATA[The current representation of the project, after modifiable attributes have been updated.]]>
          </wadl:doc>
          <wadl:representation mediaType="application/xml" element="prj:project" xmlns:prj="http://genologics.com/ri/project"/>
        </wadl:response>
      </wadl:method>
    </wadl:resource>
    <wadl:resource path="/v2/queues/{protocolStepId}">
      <wadl:param name="protocolStepId" style="path">
        <wadl:doc>
          <![CDATA[The identifier for the queue. This is the same as the underlying protocol step.]]>
        </wadl:doc>
      </wadl:param>
      <wadl:method name="GET">
        <wadl:doc>
          <![CDATA[Obtains the XML representation of a queue, which consists of a list of all the artifacts ready to be run through
its underlying protocol step.]]>
        </wadl:doc>
        <wadl:request>
          <wadl:param name="workflowname" style="query">
            <wadl:doc>
              <![CDATA[Displays only queued artifacts with workflow names that match the specified value. When filtering results, you can repeat this parameter.]]>
            </wadl:doc>
          </wadl:param>
          <wadl:param name="workflowid" style="query">
            <wadl:doc>
              <![CDATA[Displays only queued artifacts with workflow IDs that match the specified value. When filtering results, you can repeat this parameter.]]>
            </wadl:doc>
          </wadl:param>
          <wadl:param name="projectname" style="query">
            <wadl:doc>
              <![CDATA[Displays only queued artifacts with project names that match the specified value. When filtering results, you can repeat this parameter.]]>
            </wadl:doc>
          </wadl:param>
          <wadl:param name="projectlimsid" style="query">
            <wadl:doc>
              <![CDATA[Displays only queued artifacts with project LIMS IDs that match the specified value. When filtering results, you can repeat this parameter.]]>
            </wadl:doc>
          </wadl:param>
          <wadl:param name="containername" style="query">
            <wadl:doc>
              <![CDATA[Displays only queued artifacts with container names that match the specified value. When filtering results, you can repeat this parameter.]]>
            </wadl:doc>
          </wadl:param>
          <wadl:param name="containerlimsid" style="query">
            <wadl:doc>
              <![CDATA[Displays only queued artifacts with container LIMS IDs that match the specified value. When filtering results, you can repeat this parameter.]]>
            </wadl:doc>
          </wadl:param>
          <wadl:param name="previousstepid" style="query">
            <wadl:doc>
              <![CDATA[Displays only queued artifacts with previous step IDs that match the specified value. When filtering results, you can repeat this parameter.]]>
            </wadl:doc>
          </wadl:param>
          <wadl:param name="submittedsamplelimsid" style="query">
            <wadl:doc>
              <![CDATA[Displays only queued artifacts with submitted sample LIMS IDs that match the specified value. When filtering results, you can repeat this parameter.]]>
            </wadl:doc>
          </wadl:param>
        </wadl:request>
        <wadl:response>
          <wadl:doc>
            <![CDATA[The complete response from the call to the endpoint]]>
          </wadl:doc>
          <wadl:representation mediaType="application/xml" element="que:queue" xmlns:que="http://genologics.com/ri/queue"/>
        </wadl:response>
      </wadl:method>
    </wadl:resource>
    <wadl:resource path="/v2/reagentkits/{reagentkitid}">
      <wadl:param name="reagentkitid" style="path">
        <wadl:doc>
          <![CDATA[The id of the reagent kit to display.]]>
        </wadl:doc>
      </wadl:param>
      <wadl:method name="GET">
        <wadl:doc>
          <![CDATA[Displays the XML representation of a specified reagent kit.]]>
        </wadl:doc>
        <wadl:request/>
        <wadl:response>
          <wadl:doc>
            <![CDATA[The system returns a response that includes the XML representation of the reagent kit.]]>
          </wadl:doc>
          <wadl:representation mediaType="application/xml" element="kit:reagent-kit" xmlns:kit="http://genologics.com/ri/reagentkit"/>
        </wadl:response>
      </wadl:method>
      <wadl:method name="PUT">
        <wadl:doc>
          <![CDATA[Updates the reagent kit in the system.<br/>

When updating a reagent kit, you must specify the name of the reagent kit you want to update.
Unless your XML specifies a particular archived state, the system will not update the archived state of the reagent kit.<br/><br/>

An example of a &lt;reagent-kit&gt; is as follows:<br/>
<code>
&lt;kit:reagent-kit&nbsp;xmlns:kit=&quot;http://genologics.com/ri/reagentkit&quot;&nbsp;uri=&quot;http://localhost:8080/api/v2/reagentkits/101&quot;&gt;
&nbsp;&nbsp;&lt;name&gt;Affy-3a&lt;/name&gt;
&nbsp;&nbsp;&lt;supplier&gt;Supplies&nbsp;Inc.&lt;/supplier&gt;
&nbsp;&nbsp;&lt;catalogue-number&gt;1-AF-A&lt;/catalogue-number&gt;
&nbsp;&nbsp;&lt;website&gt;www.suppliesinc.com&lt;/website&gt;
&nbsp;&nbsp;&lt;archived&gt;false&lt;/archived&gt;
&lt;/kit:reagent-kit&gt;
</code>]]>
        </wadl:doc>
        <wadl:request>
          <wadl:doc>
            <![CDATA[The information about the reagent kit you would like to update.]]>
          </wadl:doc>
          <wadl:representation mediaType="*/*" element="kit:reagent-kit" xmlns:kit="http://genologics.com/ri/reagentkit"/>
          <wadl:representation mediaType="application/xml" element="kit:reagent-kit" xmlns:kit="http://genologics.com/ri/reagentkit"/>
        </wadl:request>
        <wadl:response>
          <wadl:doc>
            <![CDATA[When the reagent kit is successfully updated, the system returns an HTTP 200 (OK) code with a response body that includes the
updated attributes of the reagent kit.]]>
          </wadl:doc>
          <wadl:representation mediaType="application/xml" element="kit:reagent-kit" xmlns:kit="http://genologics.com/ri/reagentkit"/>
        </wadl:response>
      </wadl:method>
    </wadl:resource>
    <wadl:resource path="/v2/reagentlots/{reagentlotid}">
      <wadl:param name="reagentlotid" style="path">
        <wadl:doc>
          <![CDATA[The id of the reagent lot to display.]]>
        </wadl:doc>
      </wadl:param>
      <wadl:method name="GET">
        <wadl:doc>
          <![CDATA[Displays the XML representation of a specified reagent lot.]]>
        </wadl:doc>
        <wadl:request/>
        <wadl:response>
          <wadl:doc>
            <![CDATA[The system returns a response that includes the XML representation of the reagent lot.]]>
          </wadl:doc>
          <wadl:representation mediaType="application/xml" element="lot:reagent-lot" xmlns:lot="http://genologics.com/ri/reagentlot"/>
        </wadl:response>
      </wadl:method>
      <wadl:method name="PUT">
        <wadl:doc>
          <![CDATA[Updates the specified reagent lot in the system.<br/><br/>

When updating a reagent lot you must specify both lot number and expiry date (unless the reagent lot status
is PENDING in which case those fields are not required).
Reagent lots must also be unique (the lot number, name, kit, and status cannot all be the same as another reagent lot).<br/><br/>

An example of a &lt;reagent-lot&gt; is as follows:<br/>
<code>
&lt;lot:reagent-lot&nbsp;xmlns:lot=&quot;http://genologics.com/ri/reagentlot&quot;&nbsp;limsid=&quot;124-103&quot;&nbsp;uri=&quot;http://localhost:8080/api/v2/reagentlots/124-103&quot;&gt;
&nbsp;&nbsp;&lt;reagent-kit&nbsp;uri=&quot;http://localhost:8080/api/v2/reagentkits/101&quot;&nbsp;name=&quot;Affy-3a&quot;/&gt;
&nbsp;&nbsp;&lt;name&gt;Affy-3a&nbsp;Batch&nbsp;#1&lt;/name&gt;
&nbsp;&nbsp;&lt;lot-number&gt;5613281&lt;/lot-number&gt;
&nbsp;&nbsp;&lt;expiry-date&gt;2014-05-01&lt;/expiry-date&gt;
&nbsp;&nbsp;&lt;storage-location&gt;Cooler&nbsp;in&nbsp;room&nbsp;204&lt;/storage-location&gt;
&nbsp;&nbsp;&lt;notes&gt;Shipment&nbsp;Contained&nbsp;2&nbsp;kits.&lt;/notes&gt;
&nbsp;&nbsp;&lt;status&gt;ACTIVE&lt;/status&gt;
&lt;/lot:reagent-lot&gt;
</code>]]>
        </wadl:doc>
        <wadl:request>
          <wadl:doc>
            <![CDATA[The new representation of the specified reagent lot]]>
          </wadl:doc>
          <wadl:representation mediaType="*/*" element="lot:reagent-lot" xmlns:lot="http://genologics.com/ri/reagentlot"/>
          <wadl:representation mediaType="application/xml" element="lot:reagent-lot" xmlns:lot="http://genologics.com/ri/reagentlot"/>
        </wadl:request>
        <wadl:response>
          <wadl:doc>
            <![CDATA[A response that includes the XML representation of the updated reagent lot]]>
          </wadl:doc>
          <wadl:representation mediaType="application/xml" element="lot:reagent-lot" xmlns:lot="http://genologics.com/ri/reagentlot"/>
        </wadl:response>
      </wadl:method>
    </wadl:resource>
    <wadl:resource path="/v2/reagenttypes/{reagenttypeid}">
      <wadl:param name="reagenttypeid" style="path">
        <wadl:doc>
          <![CDATA[The ID of the reagent type to retrieve.]]>
        </wadl:doc>
      </wadl:param>
      <wadl:method name="GET">
        <wadl:doc>
          <![CDATA[Gets the representation of the reagent type.]]>
        </wadl:doc>
        <wadl:request/>
        <wadl:response>
          <wadl:doc>
            <![CDATA[The representation of the reagent type.]]>
          </wadl:doc>
          <wadl:representation mediaType="application/xml" element="rtp:reagent-type" xmlns:rtp="http://genologics.com/ri/reagenttype"/>
        </wadl:response>
      </wadl:method>
    </wadl:resource>
    <wadl:resource path="/v2/researchers/{researcherid}">
      <wadl:param name="researcherid" style="path">
        <wadl:doc>
          <![CDATA[The ID of the researcher you would like to display.]]>
        </wadl:doc>
      </wadl:param>
      <wadl:method name="GET">
        <wadl:doc>
          <![CDATA[Displays the XML representation of a specified researcher.]]>
        </wadl:doc>
        <wadl:request/>
        <wadl:response>
          <wadl:doc>
            <![CDATA[The system returns a response that includes the XML representation of the researcher.]]>
          </wadl:doc>
          <wadl:representation mediaType="application/xml" element="res:researcher" xmlns:res="http://genologics.com/ri/researcher"/>
        </wadl:response>
      </wadl:method>
      <wadl:method name="PUT">
        <wadl:doc>
          <![CDATA[Updates the characteristics of a specified researcher.<br/><br/>

When submitting a PUT request, you can update the following researcher attributes:
<ul>
<li>first-name</li>
<li>last-name</li>
<li>initials: must be 3 alphanumeric characters when provided. Any researcher with credentials must have initials.
<li>email</li>
<li>phone</li>
<li>fax</li>
<li>field: You must include all current UDFs recorded for the researcher, even if you do not want to update the UDF values.
However, you can add new UDF values, and update or remove current UDF values.</li>
<li>type: You must include the current UDT recorded for the researcher, even if you do not want to update the UDT values.
However, you can replace the current UDT with another UDT, or you can add or remove fields within the current UDT.</li>
<li>credentials: If you change the username a new password must also be provided at that time.</li>
</ul>
<br/>
If you attempt to update attributes that cannot be modified, the system will ignore those elements of the PUT request.]]>
        </wadl:doc>
        <wadl:request>
          <wadl:doc>
            <![CDATA[The information about the researcher you would like to update.]]>
          </wadl:doc>
          <wadl:representation mediaType="*/*" element="res:researcher" xmlns:res="http://genologics.com/ri/researcher"/>
          <wadl:representation mediaType="application/xml" element="res:researcher" xmlns:res="http://genologics.com/ri/researcher"/>
        </wadl:request>
        <wadl:response>
          <wadl:doc>
            <![CDATA[When the researcher is successfully updated, the system returns an HTTP 200 (OK) code with a response body that includes the
updated attributes of the researcher.]]>
          </wadl:doc>
          <wadl:representation mediaType="application/xml" element="res:researcher" xmlns:res="http://genologics.com/ri/researcher"/>
        </wadl:response>
      </wadl:method>
      <wadl:method name="DELETE">
        <wadl:doc>
          <![CDATA[Removes a specified researcher from the system.]]>
        </wadl:doc>
        <wadl:request/>
        <wadl:response>
          <wadl:doc>
            <![CDATA[When the researcher is successfully removed, the system returns an HTTP 204
(No Content) code with an empty response body.]]>
          </wadl:doc>
          <wadl:representation mediaType="application/xml" element="res:researcher" xmlns:res="http://genologics.com/ri/researcher"/>
        </wadl:response>
      </wadl:method>
    </wadl:resource>
    <wadl:resource path="/v2/roles/{roleId}">
      <wadl:param name="roleId" style="path">
        <wadl:doc>
          <![CDATA[The role ID of the role you would like to display.]]>
        </wadl:doc>
      </wadl:param>
      <wadl:method name="GET">
        <wadl:doc>
          <![CDATA[Displays the XML representation of a specified role.]]>
        </wadl:doc>
        <wadl:request/>
        <wadl:response>
          <wadl:doc>
            <![CDATA[The system returns a response that includes the XML representation of the role.]]>
          </wadl:doc>
          <wadl:representation mediaType="application/xml" element="role:role" xmlns:role="http://genologics.com/ri/role"/>
        </wadl:response>
      </wadl:method>
      <wadl:method name="PUT">
        <wadl:doc>
          <![CDATA[Updates a security role in the system.<br/><br/>

When updating a role, you must specify the name of the role you want to update.  This value may stay the same, or
it may be modified.  Each role must have a unique name.<br/><br/>

You must also specify a list of <em>all</em> permissions that should be assigned to the role.  If any
currently assigned permissions are excluded, they will be removed from the role.  Likewise, any permissions in
the list that are not currently assigned to the role will be added.<br/><br/>

While the XML will allow you to submit a list of researchers, you may not actually assign a role to a user with
this end-point.  Any researchers provided in the XML will be ignored.<br/><br/>

An example of a &lt;role&gt; PUT is as follows:<br/>
<code>
&lt;role:role xmlns:role="http://genologics.com/ri/role"&gt;
&nbsp;&nbsp;&lt;name&gt;Existing Role Name&lt;/name&gt;
&nbsp;&nbsp;&lt;permissions&gt;
&nbsp;&nbsp;&nbsp;&nbsp;&lt;permission uri="http://localhost:8080/api/v2/permissions/10"/&gt;
&nbsp;&nbsp;&nbsp;&nbsp;&lt;permission uri="http://localhost:8080/api/v2/permissions/11"/&gt;
&nbsp;&nbsp;&lt;/permissions&gt;
&lt;/role:role&gt;
</code>]]>
        </wadl:doc>
        <wadl:request>
          <wadl:doc>
            <![CDATA[The information about the role you would like to update.]]>
          </wadl:doc>
          <wadl:representation mediaType="*/*" element="role:role" xmlns:role="http://genologics.com/ri/role"/>
          <wadl:representation mediaType="application/xml" element="role:role" xmlns:role="http://genologics.com/ri/role"/>
        </wadl:request>
        <wadl:response>
          <wadl:doc>
            <![CDATA[When the role is successfully updated, the system returns an HTTP 200 (OK) code with a response body that includes the
updated attributes of the role.]]>
          </wadl:doc>
          <wadl:representation mediaType="application/xml" element="role:role" xmlns:role="http://genologics.com/ri/role"/>
        </wadl:response>
      </wadl:method>
    </wadl:resource>
    <wadl:resource path="/v2/route/artifacts">
      <wadl:method name="POST">
        <wadl:doc>
          <![CDATA[Submits samples to be assigned to or removed from a workflow.  The process will handle unassigning samples from
workflows before assignment.<br/><br/>

An example of a submitted &lt;routing&gt; is as follows:<br/>
<code>
&lt;rt:routing xmlns:rt="http://genologics.com/ri/routing"&gt;
&nbsp;&nbsp;&lt;assign stage-uri="http://localhost:8090/api/v2/configuration/workflows/7/stages/4"&gt;
&nbsp;&nbsp;&nbsp;&nbsp;&lt;artifact uri="http://localhost:8090/api/v2/artifacts/5"/&gt;
&nbsp;&nbsp;&nbsp;&nbsp;&lt;artifact uri="http://localhost:8090/api/v2/artifacts/6""/&gt;
&nbsp;&nbsp;&lt;/assign&gt;
&nbsp;&nbsp;&lt;assign workflow-uri="http://localhost:8090/api/v2/configuration/workflows/7"&gt;
&nbsp;&nbsp;&nbsp;&nbsp;&lt;artifact uri="http://localhost:8090/api/v2/artifacts/8"/&gt;
&nbsp;&nbsp;&nbsp;&nbsp;&lt;artifact uri="http://localhost:8090/api/v2/artifacts/9""/&gt;
&nbsp;&nbsp;&lt;/assign&gt;
&nbsp;&nbsp;&lt;unassign workflow-uri="http://localhost:8090/api/v2/configuration/workflows/10"&gt;
&nbsp;&nbsp;&nbsp;&nbsp;&lt;artifact uri="http://localhost:8090/api/v2/artifacts/11"/&gt;
&nbsp;&nbsp;&nbsp;&nbsp;&lt;artifact uri="http://localhost:8090/api/v2/artifacts/12""/&gt;
&nbsp;&nbsp;&lt;/unassign&gt;
&lt;/rt:routing&gt;
</code>]]>
        </wadl:doc>
        <wadl:request>
          <wadl:doc>
            <![CDATA[the routing payload, containing the artifacts that should be assigned/unassigned to workflows]]>
          </wadl:doc>
          <wadl:representation mediaType="*/*" element="rt:routing" xmlns:rt="http://genologics.com/ri/routing"/>
          <wadl:representation mediaType="application/xml" element="rt:routing" xmlns:rt="http://genologics.com/ri/routing"/>
        </wadl:request>
        <wadl:response>
          <wadl:doc>
            <![CDATA[The system returns a response that includes the XML representation of actions that were carried out.
The response payload follows the same format as the input payload.]]>
          </wadl:doc>
          <wadl:representation mediaType="application/xml" element="rt:routing" xmlns:rt="http://genologics.com/ri/routing"/>
        </wadl:response>
      </wadl:method>
    </wadl:resource>
    <wadl:resource path="/v2/samples/{limsid}">
      <wadl:param name="limsid" style="path">
        <wadl:doc>
          <![CDATA[The LIMS ID of the sample to retrieve.]]>
        </wadl:doc>
      </wadl:param>
      <wadl:method name="GET">
        <wadl:doc>
          <![CDATA[Gets the representation of the sample.]]>
        </wadl:doc>
        <wadl:request/>
        <wadl:response>
          <wadl:doc>
            <![CDATA[The representation of the sample.]]>
          </wadl:doc>
          <wadl:representation mediaType="application/xml" element="smp:sample" xmlns:smp="http://genologics.com/ri/sample"/>
        </wadl:response>
      </wadl:method>
      <wadl:method name="PUT">
        <wadl:doc>
          <![CDATA[Updates the mutable values for a sample.<br/><br/>

Only a subset of the sample's attributes can be modified.  Unmodifiable attributes
will be ignored.<br/><br/>

The following attributes of a sample can be modified:
<ul>
<li>name: The name attribute must be provided, but can be modified</li>
<li>date-received</li>
<li>date-completed</li>
<li>field: The entire set of fields must be provided.  Fields can be added or removed.</li>
<li>type: The type and all fields must be provided.  The type can be changed,
and fields can be added or removed from the type.</li>
</ul>
<br/>

The following attributes of a sample can no longer be modified:
<ul>
<li>biosource: this field is deprecated and is not supported in Clarity</li>
<li>file: files can no longer be modified through the PUT operation and changes will be ignored, the "files" resource should be used instead.
Files attached to a Sample are still visible in the payload returned by a GET.</li>
</ul>]]>
        </wadl:doc>
        <wadl:request>
          <wadl:doc>
            <![CDATA[The new representation for the sample.]]>
          </wadl:doc>
          <wadl:representation mediaType="*/*" element="smp:sample" xmlns:smp="http://genologics.com/ri/sample"/>
          <wadl:representation mediaType="application/xml" element="smp:sample" xmlns:smp="http://genologics.com/ri/sample"/>
        </wadl:request>
        <wadl:response>
          <wadl:doc>
            <![CDATA[The current representation of the sample, after modifiable attributes have been updated.]]>
          </wadl:doc>
          <wadl:representation mediaType="application/xml" element="smp:sample" xmlns:smp="http://genologics.com/ri/sample"/>
        </wadl:response>
      </wadl:method>
    </wadl:resource>
    <wadl:resource path="/v2/steps/{limsid}">
      <wadl:param name="limsid" style="path">
        <wadl:doc>
          <![CDATA[The LIMS ID of the step]]>
        </wadl:doc>
      </wadl:param>
      <wadl:method name="GET">
        <wadl:doc>
          <![CDATA[Gets the representation of a step (process).]]>
        </wadl:doc>
        <wadl:request/>
        <wadl:response>
          <wadl:doc>
            <![CDATA[The representation of the step.]]>
          </wadl:doc>
          <wadl:representation mediaType="application/xml" element="stp:step" xmlns:stp="http://genologics.com/ri/step"/>
        </wadl:response>
      </wadl:method>
    </wadl:resource>
    <wadl:resource path="/v2/artifacts/batch/retrieve">
      <wadl:method name="POST">
        <wadl:doc>
          <![CDATA[Displays the XML representation of the specified artifacts.<br/><br/>

An example &lt;links&gt; is as follows:<br/>
<code>
&lt;ri:links xmlns:ri="http://genologics.com/ri"&gt;
&nbsp;&nbsp;&lt;link uri="http://localhost:8080/api/v2/artifacts/LUN3A1PA1" rel="artifacts"/&gt;
&nbsp;&nbsp;&lt;link uri="http://localhost:8080/api/v2/artifacts/LEU9A1PA1" rel="artifacts"/&gt;
&lt;/ri:links&gt;
</code>

Example response &lt;details&gt;:<br/>
<code>
&lt;?xml version="1.0" encoding="UTF-8" standalone="yes"?&gt;
&lt;art:details xmlns:ri="http://genologics.com/ri" xmlns:udf="http://genologics.com/ri/userdefined" xmlns:file="http://genologics.com/ri/file" xmlns:art="http://genologics.com/ri/artifact" xmlns:con="http://genologics.com/ri/container"&gt;
&nbsp;&nbsp;&lt;art:artifact uri="http://localhost:8080/api/v2/artifacts/LUN3A1PA1?state=1088" limsid="LUN3A1PA1"&gt;
&nbsp;&nbsp;&nbsp;&nbsp;&lt;name&gt;Cancer Sample-1&lt;/name&gt;
&nbsp;&nbsp;&nbsp;&nbsp;&lt;type&gt;Analyte&lt;/type&gt;
&nbsp;&nbsp;&nbsp;&nbsp;&lt;output-type&gt;Analyte&lt;/output-type&gt;
&nbsp;&nbsp;&nbsp;&nbsp;&lt;qc-flag&gt;UNKNOWN&lt;/qc-flag&gt;
&nbsp;&nbsp;&nbsp;&nbsp;&lt;location&gt;
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&lt;container uri="http://localhost:8080/api/v2/containers/65-1" limsid="65-1"/&gt;
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&lt;value&gt;A:1&lt;/value&gt;
&nbsp;&nbsp;&nbsp;&nbsp;&lt;/location&gt;
&nbsp;&nbsp;&nbsp;&nbsp;&lt;working-flag&gt;false&lt;/working-flag&gt;
&nbsp;&nbsp;&nbsp;&nbsp;&lt;sample uri="http://localhost:8080/api/v2/samples/LUN3A1" limsid="LUN3A1"/&gt;
&nbsp;&nbsp;&lt;/art:artifact&gt;
&nbsp;&nbsp;&lt;art:artifact uri="http://localhost:8080/api/v2/artifacts/LEU9A1PA1?state=1131" limsid="LEU9A1PA1"&gt;
&nbsp;&nbsp;&nbsp;&nbsp;...
&nbsp;&nbsp;&lt;/art:artifact&gt;
&lt;/art:details&gt;
</code>]]>
        </wadl:doc>
        <wadl:request>
          <wadl:doc>
            <![CDATA[A series of links, each containing the URI of an artifact you would like to retrieve. The artifact URIs must be unique and must correspond to valid artifact URIs in the system. Mixed resource links or duplicate artifacts will result in an HTTP 400 error. Similarly, the request will be rejected if any URI does not resolve to an artifact in the system.<br/>]]>
          </wadl:doc>
          <wadl:representation mediaType="application/xml" element="ri:links" xmlns:ri="http://genologics.com/ri"/>
        </wadl:request>
        <wadl:response>
          <wadl:doc>
            <![CDATA[The system returns a response that includes the XML representations of the requested artifacts, wrapped in a &lt;details&gt; parent.
Please refer to the GET documentation for artifacts(single) in the REST resources documentation for
more information about the artifact XML representation that will be returned in the details.<br/>]]>
          </wadl:doc>
          <wadl:representation mediaType="application/xml" element="art:details" xmlns:art="http://genologics.com/ri/artifact"/>
        </wadl:response>
      </wadl:method>
    </wadl:resource>
    <wadl:resource path="/v2/artifacts/batch/update">
      <wadl:method name="POST">
        <wadl:doc>
          <![CDATA[Updates the characteristics of the specified artifacts. Rules for updating individual artifacts apply.<br/><br/>

Example &lt;details&gt;:<br/>
<code>
&lt;art:details xmlns:ri="http://genologics.com/ri" xmlns:udf="http://genologics.com/ri/userdefined" xmlns:file="http://genologics.com/ri/file" xmlns:art="http://genologics.com/ri/artifact" xmlns:con="http://genologics.com/ri/container"&gt;
&nbsp;&nbsp;&lt;art:artifact uri="http://localhost:8080/api/v2/artifacts/LUN3A1PA1?state=1088" limsid="LUN3A1PA1"&gt;
&nbsp;&nbsp;&nbsp;&nbsp;&lt;name&gt;Cancer Sample-1&lt;/name&gt;
&nbsp;&nbsp;&nbsp;&nbsp;&lt;type&gt;Analyte&lt;/type&gt;
&nbsp;&nbsp;&nbsp;&nbsp;&lt;output-type&gt;Analyte&lt;/output-type&gt;
&nbsp;&nbsp;&nbsp;&nbsp;&lt;qc-flag&gt;UNKNOWN&lt;/qc-flag&gt;
&nbsp;&nbsp;&nbsp;&nbsp;&lt;location&gt;
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&lt;container uri="http://localhost:8080/api/v2/containers/65-1" limsid="65-1"/&gt;
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&lt;value&gt;A:1&lt;/value&gt;
&nbsp;&nbsp;&nbsp;&nbsp;&lt;/location&gt;
&nbsp;&nbsp;&nbsp;&nbsp;&lt;working-flag&gt;false&lt;/working-flag&gt;
&nbsp;&nbsp;&nbsp;&nbsp;&lt;sample uri="http://localhost:8080/api/v2/samples/LUN3A1" limsid="LUN3A1"/&gt;
&nbsp;&nbsp;&nbsp;&nbsp;&lt;/art:artifact&gt;
&nbsp;&nbsp;&nbsp;&nbsp;&lt;art:artifact uri="http://localhost:8080/api/v2/artifacts/LEU9A1PA1?state=1131" limsid="LEU9A1PA1"&gt;
&nbsp;&nbsp;&nbsp;&nbsp;...
&nbsp;&nbsp;&nbsp;&nbsp;&lt;/art:artifact&gt;
&lt;/art:details&gt;
</code>

Example &lt;links&gt; response:<br/>
<code>
&lt;ri:links xmlns:ri="http://genologics.com/ri"&gt;
&nbsp;&nbsp;&lt;link uri="http://localhost:8080/api/v2/artifacts/LUN3A1PA1" rel="artifacts"/&gt;
&nbsp;&nbsp;&lt;link uri="http://localhost:8080/api/v2/artifacts/LEU9A1PA1" rel="artifacts"/&gt;
&lt;/ri:links&gt;
</code>]]>
        </wadl:doc>
        <wadl:request>
          <wadl:doc>
            <![CDATA[The XML representations of all the artifacts you want to update, wrapped in a &lt;details&gt; parent. You can only update the most recent state of an artifact. Artifacts with different states provided in the details will be considered as duplicate requests and will result in an HTTP 400 error. Please refer to the PUT documentation for artifacts (single) in the REST resources documentation for the artifact XML representation and a description of what elements/attributes can be updated.<br/>]]>
          </wadl:doc>
          <wadl:representation mediaType="application/xml" element="art:details" xmlns:art="http://genologics.com/ri/artifact"/>
        </wadl:request>
        <wadl:response>
          <wadl:doc>
            <![CDATA[When artifacts have been successfully updated, the system returns an HTTP 200 (OK) code. The response body
includes a list of URI links to all updated artifacts.
The URIs do not explicitly include state; by default, this returns the most recent state of each artifact.<br/>]]>
          </wadl:doc>
          <wadl:representation mediaType="application/xml" element="art:details" xmlns:art="http://genologics.com/ri/artifact"/>
        </wadl:response>
      </wadl:method>
    </wadl:resource>
    <wadl:resource path="/v2/configuration/protocols/{protocolid}">
      <wadl:param name="protocolid" style="path">
        <wadl:doc>
          <![CDATA[the protocol ID of the protocol to get]]>
        </wadl:doc>
      </wadl:param>
      <wadl:method name="GET">
        <wadl:doc>
          <![CDATA[Displays full details of a specific Protocol in the system.<br/><br/>

An example of a returned &lt;protocol&gt; is as follows:<br/>
<code>
&lt;protcnf:protocol xmlns:protstepcnf="http://genologics.com/ri/stepconfiguration" xmlns:protcnf="http://genologics.com/ri/protocolconfiguration" uri="http://localhost:8080/api/v2/configuration/protocols/1" index="2" name="RNA Initial QC"&gt;
&nbsp;&nbsp;&lt;steps&gt;
&nbsp;&nbsp;&nbsp;&nbsp;&lt;step uri="http://localhost:8080/api/v2/configuration/protocols/1/steps/1" name="Bioanalyzer QC (RNA) 4.0" protocol-uri="http://localhost:8080/api/v2/configuration/protocols/1"&gt;
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&lt;protocol-step-index&gt;1&lt;/protocol-step-index&gt;
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&lt;process-type uri="http://localhost:8080/api/v2/processtypes/21"&gt;NanoDrop QC (DNA) 4.0&lt;/process-type&gt;
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&lt;permitted-containers&gt;
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&lt;container-type&gt;BioAnalyzer RNA Nano Chip&lt;/container-type&gt;
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&lt;container-type&gt;BioAnalyzer RNA Pico Chip&lt;/container-type&gt;
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&lt;/permitted-containers&gt;
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&lt;transitions/&gt;
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&lt;queue-fields&gt;
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&lt;queue-field detail="false" attach-to="Analyte" name="Sample Name"/&gt;
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&lt;queue-field detail="false" attach-to="Container" name="Container Name"/&gt;
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&lt;queue-field detail="true" attach-to="Project" name="Project Name"/&gt;
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&lt;queue-field detail="false" attach-to="Container" name="LIMS ID (Container)"/&gt;
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&lt;queue-field detail="true" attach-to="Analyte" name="Waiting"/&gt;
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&lt;/queue-fields&gt;
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&lt;step-fields&gt;
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&lt;step-field attach-to="ConfiguredProcess" name="Criteria 1 - Source Data Field"/&gt;
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&lt;step-field attach-to="ConfiguredProcess" name="Criteria 1 - Operator"/&gt;
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&lt;step-field attach-to="ConfiguredProcess" name="Criteria 1 - Threshold Value"/&gt;
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&lt;step-field attach-to="ConfiguredProcess" name="Criteria 2 - Source Data Field"/&gt;
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&lt;step-field attach-to="ConfiguredProcess" name="Criteria 2 - Operator"/&gt;
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&lt;step-field attach-to="ConfiguredProcess" name="Criteria 2 - Threshold Value"/&gt;
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&lt;/step-fields&gt;
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&lt;sample-fields&gt;
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&lt;sample-field attach-to="Analyte" name="Sample Name"/&gt;
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&lt;sample-field attach-to="Container" name="Well"/&gt;
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&lt;sample-field attach-to="ResultFile" name="Concentration"/&gt;
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&lt;sample-field attach-to="ResultFile" name="Conc. Units"/&gt;
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&lt;/sample-fields&gt;
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&lt;step-properties&gt;
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&lt;step-property value="true" name="qcProtocolStep"/&gt;
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&lt;step-property value="false" name="qcWithPlacement"/&gt;
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&lt;step-property value="false" name="measurementWithFile"/&gt;
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&lt;step-property value="true" name="enableExternalPrograms"/&gt;
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&lt;step-property value="1/{LIST:NanoDrop NDT Result File (required),NanoDrop NDT Parsing Log File (generated),QC Assignment Log File (generated),QC Assignment Report (generated)}|2/{LIST:NanoDrop NDT Result File (required),NanoDrop NDT Parsing Log File (generated),QC Assignment Log File (generated),QC Assignment Report (generated)}|3/{LIST:NanoDrop NDT Result File (required),NanoDrop NDT Parsing Log File (generated),QC Assignment Log File (generated),QC Assignment Report (generated)}" name="autoAttachFiles"/&gt;
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&lt;step-property value="" name="stepDetailsHeading"/&gt;
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&lt;step-property value="" name="sampleDetailsHeading"/&gt;
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&lt;step-property value="([type=Bioanalyzer QC (RNA) 4.0|attachTo=ResultFile|field=QC] != "1")" name="filter"/&gt;
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&lt;/step-properties&gt;
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&lt;step-setup&gt;
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&lt;files&gt;
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&lt;file shared-result-file-index="0"&gt;
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&lt;message&gt;message 1&lt;/message&gt;
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&lt;/file&gt;
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&lt;file shared-result-file-index="1"&gt;
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&lt;message&gt;message 2&lt;/message&gt;
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&lt;/file&gt;
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&lt;/files&gt;
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&lt;/step-setup&gt;
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&lt;epp-triggers&gt;
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&lt;epp-trigger status="RECORD_DETAILS" point="BEFORE" type="AUTOMATIC" name="Auto Parse NanoDrop NDT"/&gt;
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&lt;epp-trigger type="MANUAL" name="Parse NanoDrop NDT and Assign QC flags based upon criteria above"/&gt;
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&lt;epp-trigger type="UNUSED" name="Unused Parse NanoDrop NDT"/&gt;
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&lt;/epp-triggers&gt;
&nbsp;&nbsp;&nbsp;&nbsp;&lt;/step&gt;
&nbsp;&nbsp;&lt;/steps&gt;
&nbsp;&nbsp;&lt;protocol-properties&gt;
&nbsp;&nbsp;&nbsp;&nbsp;&lt;protocol-property value="false" name="hidden"/&gt;
&nbsp;&nbsp;&nbsp;&nbsp;&lt;protocol-property value="0" name="capacity"/&gt;
&nbsp;&nbsp;&nbsp;&nbsp;&lt;protocol-property value="qc" name="type"/&gt;
&nbsp;&nbsp;&lt;/protocol-properties&gt;
&lt;/protcnf:protocol&gt;
</code>]]>
        </wadl:doc>
        <wadl:request/>
        <wadl:response>
          <wadl:doc>
            <![CDATA[The system returns a response that includes a specific protocol and all relevant properties and steps]]>
          </wadl:doc>
          <wadl:representation mediaType="application/xml" element="protcnf:protocol" xmlns:protcnf="http://genologics.com/ri/protocolconfiguration"/>
        </wadl:response>
      </wadl:method>
    </wadl:resource>
    <wadl:resource path="/v2/configuration/udfs/{udfid}">
      <wadl:param name="udfid" style="path">
        <wadl:doc>
          <![CDATA[The ID of the user defined field.]]>
        </wadl:doc>
      </wadl:param>
      <wadl:method name="GET">
        <wadl:doc>
          <![CDATA[Gets the representation of a user defined field.]]>
        </wadl:doc>
        <wadl:request/>
        <wadl:response>
          <wadl:doc>
            <![CDATA[The representation of the user defined field.]]>
          </wadl:doc>
          <wadl:representation mediaType="application/xml" element="cnf:field" xmlns:cnf="http://genologics.com/ri/configuration"/>
        </wadl:response>
      </wadl:method>
      <wadl:method name="PUT">
        <wadl:doc>
          <![CDATA[Updates the mutable values for a user defined field.<br/><br/>

Only a subset of the user defined field's attributes can be modified.  Unmodifiable attributes
will be ignored.<br/><br/>

The following attributes of a user defined field can be modified:
<ul>
<li>name</li>
<li>display-precision</li>
<li>unit label</li>
<li>presets</li>
<li>show-in-lablink</li>
<li>allow-non-preset-values</li>
<li>first-preset-is-default-value</li>
<li>is-required</li>
<li>is-editable</li>
<li>min-value</li>
<li>max-value</li>
</ul>]]>
        </wadl:doc>
        <wadl:request>
          <wadl:doc>
            <![CDATA[The new representation of the user defined field.]]>
          </wadl:doc>
          <wadl:representation mediaType="*/*" element="cnf:field" xmlns:cnf="http://genologics.com/ri/configuration"/>
          <wadl:representation mediaType="application/xml" element="cnf:field" xmlns:cnf="http://genologics.com/ri/configuration"/>
        </wadl:request>
        <wadl:response>
          <wadl:doc>
            <![CDATA[The current representation of the user defined field, after modifiable attributes have been updated.]]>
          </wadl:doc>
          <wadl:representation mediaType="application/xml" element="cnf:field" xmlns:cnf="http://genologics.com/ri/configuration"/>
        </wadl:response>
      </wadl:method>
    </wadl:resource>
    <wadl:resource path="/v2/configuration/udts/{udtid}">
      <wadl:param name="udtid" style="path">
        <wadl:doc>
          <![CDATA[The ID of the user defined type.]]>
        </wadl:doc>
      </wadl:param>
      <wadl:method name="GET">
        <wadl:doc>
          <![CDATA[Gets the representation of a user defined type.]]>
        </wadl:doc>
        <wadl:request/>
        <wadl:response>
          <wadl:doc>
            <![CDATA[The representation of the user defined type.]]>
          </wadl:doc>
          <wadl:representation mediaType="application/xml" element="cnf:type" xmlns:cnf="http://genologics.com/ri/configuration"/>
        </wadl:response>
      </wadl:method>
    </wadl:resource>
    <wadl:resource path="/v2/configuration/workflows/{workflowid}">
      <wadl:param name="workflowid" style="path">
        <wadl:doc>
          <![CDATA[The workflow ID of the workflow you would like to display.]]>
        </wadl:doc>
      </wadl:param>
      <wadl:method name="GET">
        <wadl:doc>
          <![CDATA[Displays the XML representation of a specified workflow.<br/><br/>

An example of a returned &lt;workflow&gt; is as follows:<br/>
<br/>
<code>
&lt;wkfcnf:workflow xmlns:wkfcnf="http://genologics.com/ri/workflowconfiguration" status="PENDING" uri="http://localhost:8080/api/v2/configuration/workflows/1" name="Nextera DNA for HiSeq"&gt;
&nbsp;&nbsp;&lt;protocols&gt;
&nbsp;&nbsp;&nbsp;&nbsp;&lt;protocol uri="http://localhost:8080/api/v2/configuration/protocols/4" name="Nextera DNA Library Prep"/&gt;
&nbsp;&nbsp;&nbsp;&nbsp;&lt;protocol uri="http://localhost:8080/api/v2/configuration/protocols/5" name="Library Validation QC"/&gt;
&nbsp;&nbsp;&nbsp;&nbsp;&lt;protocol uri="http://localhost:8080/api/v2/configuration/protocols/6" name="Illumina SBS (HiSeq GAIIx)"/&gt;
&nbsp;&nbsp;&lt;/protocols&gt;
&lt;/wkfcnf:workflow&gt;
</code>]]>
        </wadl:doc>
        <wadl:request/>
        <wadl:response>
          <wadl:doc>
            <![CDATA[The system returns a response that includes the XML representation of the workflow.]]>
          </wadl:doc>
          <wadl:representation mediaType="application/xml" element="wkfcnf:workflow" xmlns:wkfcnf="http://genologics.com/ri/workflowconfiguration"/>
        </wadl:response>
      </wadl:method>
    </wadl:resource>
    <wadl:resource path="/v2/containers/batch/create">
      <wadl:method name="POST">
        <wadl:doc>
          <![CDATA[Creates a batch of containers, as specified in the request details. Rules for creating individual containers apply.<br/><br/>

An example of &lt;details&gt; to POST as follows:<br/>
<code>
&lt;con:details xmlns:ri="http://genologics.com/ri" xmlns:udf="http://genologics.com/ri/userdefined" xmlns:file="http://genologics.com/ri/file" xmlns:art="http://genologics.com/ri/artifact" xmlns:con="http://genologics.com/ri/container"&gt;
&nbsp;&nbsp;&lt;con:container uri="http://localhost:8080/api/v2/containers"&gt;
&nbsp;&nbsp;&lt;name&gt;test container 1&lt;/name&gt;
&nbsp;&nbsp;&lt;type uri="http://localhost:8080/api/v2/containertypes/1"/&gt;
&nbsp;&nbsp;&lt;/con:container&gt;
&nbsp;&nbsp;&lt;con:container uri="http://localhost:8080/api/v2/containers"&gt;
&nbsp;&nbsp; ...
&nbsp;&nbsp;&lt;/con:container&gt;
&lt;/con:details&gt;
</code>

Example response &lt;links&gt;:<br/>
<code>
&lt;ri:links xmlns:ri="http://genologics.com/ri"&gt;
&nbsp;&nbsp;&lt;link uri="http://localhost:8080/api/v2/containers/65-1" rel="containers"/&gt;
&nbsp;&nbsp;&lt;link uri="http://localhost:8080/api/v2/containers/65-2" rel="containers"/&gt;
&lt;/ri:links&gt;
</code>]]>
        </wadl:doc>
        <wadl:request>
          <wadl:doc>
            <![CDATA[The information about the containers you want to add to the system, wrapped in a &lt;details&gt; parent. All request details must be valid container XML representations. Mixed requests will result in an HTTP 400 error. Please refer to the POST documentation for containers (list) in the REST resources documentation for the container XML representation and a description of what elements/attributes are necessary at creation.<br/>]]>
          </wadl:doc>
          <wadl:representation mediaType="application/xml" element="con:details" xmlns:con="http://genologics.com/ri/container"/>
        </wadl:request>
        <wadl:response>
          <wadl:doc>
            <![CDATA[When the containers have been successfully created, the system returns an HTTP 200 (OK) code.
The response body includes a list of URI links to the new containers.<br/>]]>
          </wadl:doc>
          <wadl:representation mediaType="application/xml" element="ri:links" xmlns:ri="http://genologics.com/ri"/>
        </wadl:response>
      </wadl:method>
    </wadl:resource>
    <wadl:resource path="/v2/containers/batch/retrieve">
      <wadl:method name="POST">
        <wadl:doc>
          <![CDATA[Displays the XML representation of all specified containers.<br/><br/>

An example &lt;links&gt; is as follows:<br/>
<code>
&lt;ri:links xmlns:ri="http://genologics.com/ri"&gt;
&nbsp;&nbsp;&lt;link uri="http://localhost:8080/api/v2/containers/65-1" rel="containers"/&gt;
&nbsp;&nbsp;&lt;link uri="http://localhost:8080/api/v2/containers/65-2" rel="containers"/&gt;
&lt;/ri:links&gt;
</code>

An example of returned &lt;details&gt; is as follows:<br/>
<code>
&lt;con:details xmlns:ri="http://genologics.com/ri" xmlns:udf="http://genologics.com/ri/userdefined" xmlns:file="http://genologics.com/ri/file" xmlns:art="http://genologics.com/ri/artifact" xmlns:con="http://genologics.com/ri/container"&gt;
&nbsp;&nbsp;&lt;con:container uri="http://localhost:8080/api/v2/containers/65-1" limsid="65-1"&gt;
&nbsp;&nbsp;&nbsp;&nbsp;&lt;name&gt;test container 1&lt;/name&gt;
&nbsp;&nbsp;&nbsp;&nbsp;&lt;type uri="http://localhost:8080/api/v2/containertypes/1" name="96 well plate"/&gt;
&nbsp;&nbsp;&nbsp;&nbsp;&lt;occupied-wells&gt;2&lt;/occupied-wells&gt;
&nbsp;&nbsp;&nbsp;&nbsp;&lt;placement uri="http://localhost:8080/api/v2/artifacts/PAR13A1GS115" limsid="PAR13A1GS115"&gt;
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&lt;value&gt;A:2&lt;/value&gt;
&nbsp;&nbsp;&nbsp;&nbsp;&lt;/placement&gt;
&nbsp;&nbsp;&nbsp;&nbsp;&lt;placement uri="http://localhost:8080/api/v2/artifacts/PAR13A1GS114" limsid="PAR13A1GS114"&gt;
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&lt;value&gt;A:9&lt;/value&gt;
&nbsp;&nbsp;&nbsp;&nbsp;&lt;/placement&gt;
&nbsp;&nbsp;&nbsp;&nbsp;&lt;state&gt;Populated&lt;/state&gt;
&nbsp;&nbsp;&lt;/con:container&gt;
&nbsp;&nbsp;&lt;con:container uri="http://localhost:8080/api/v2/containers/65-2" limsid="65-2"&gt;
&nbsp;&nbsp;&nbsp;&nbsp;...
&nbsp;&nbsp;&lt;/con:container&gt;
&lt;/con:details&gt;
</code>]]>
        </wadl:doc>
        <wadl:request>
          <wadl:doc>
            <![CDATA[A series of links, each containing the URI of a container you would like to retrieve. The container URIs must be unique and must correspond to valid container URIs in the system. Mixed resource links or duplicate containers will result in an HTTP 400 error. Similarly, the request will be rejected if any URI does not resolve to a container in the system.<br/>]]>
          </wadl:doc>
          <wadl:representation mediaType="application/xml" element="ri:links" xmlns:ri="http://genologics.com/ri"/>
        </wadl:request>
        <wadl:response>
          <wadl:doc>
            <![CDATA[The system returns a response that includes the XML representations of the requested containers, wrapped in a &lt;details&gt; parent.
Please refer to the GET documentation for containers (single) in the REST resources documentation for
more information about the container XML representation that will be returned in the details.]]>
          </wadl:doc>
          <wadl:representation mediaType="application/xml" element="con:details" xmlns:con="http://genologics.com/ri/container"/>
        </wadl:response>
      </wadl:method>
    </wadl:resource>
    <wadl:resource path="/v2/containers/batch/update">
      <wadl:method name="POST">
        <wadl:doc>
          <![CDATA[Updates the characteristics of the specified containers. Rules for updating individual containers apply.<br/><br/>

An example of &lt;details&gt; to POST as follows:<br/>
<code>
&lt;con:details xmlns:ri="http://genologics.com/ri" xmlns:udf="http://genologics.com/ri/userdefined" xmlns:file="http://genologics.com/ri/file" xmlns:art="http://genologics.com/ri/artifact" xmlns:con="http://genologics.com/ri/container"&gt;
&nbsp;&nbsp;&lt;con:container uri="http://localhost:8080/api/v2/containers/65-1" limsid="65-1"&gt;
&nbsp;&nbsp;&nbsp;&nbsp;&lt;name&gt;test container 1&lt;/name&gt;
&nbsp;&nbsp;&nbsp;&nbsp;&lt;type uri="http://localhost:8080/api/v2/containertypes/1" name="96 well plate"/&gt;
&nbsp;&nbsp;&nbsp;&nbsp;&lt;state&gt;Populated&lt;/state&gt;
&nbsp;&nbsp;&lt;/con:container&gt;
&nbsp;&nbsp;&lt;con:container uri="http://localhost:8080/api/v2/containers/65-2" limsid="65-2"&gt;
&nbsp;&nbsp;&nbsp;&nbsp;...
&nbsp;&nbsp;&lt;/con:container&gt;
&lt;/con:details&gt;
</code>

Example response &lt;links&gt;:<br/>
<code>
&lt;ri:links xmlns:ri="http://genologics.com/ri"&gt;
&nbsp;&nbsp;&lt;link uri="http://localhost:8080/api/v2/containers/65-1" rel="containers"/&gt;
&nbsp;&nbsp;&lt;link uri="http://localhost:8080/api/v2/containers/65-2" rel="containers"/&gt;
&lt;/ri:links&gt;
</code>]]>
        </wadl:doc>
        <wadl:request>
          <wadl:doc>
            <![CDATA[The XML representations of all the containers you want to update, wrapped in a &lt;details&gt; parent. All details in the request body must correspond to unique containers. Mixed resources or duplicate containers will result in an HTTP 400 error. Please refer to the PUT documentation for containers (single) in the REST resources documentation for the container XML representation and a description of what elements/attributes can be updated.<br/>]]>
          </wadl:doc>
          <wadl:representation mediaType="application/xml" element="con:details" xmlns:con="http://genologics.com/ri/container"/>
        </wadl:request>
        <wadl:response>
          <wadl:doc>
            <![CDATA[When the containers have been successfully updated, the system returns an HTTP 200 (OK) code.
The response body includes a list of URI links to the updated containers.<br/>]]>
          </wadl:doc>
          <wadl:representation mediaType="application/xml" element="ri:links" xmlns:ri="http://genologics.com/ri"/>
        </wadl:response>
      </wadl:method>
    </wadl:resource>
    <wadl:resource path="/v2/files/batch/retrieve">
      <wadl:method name="POST">
        <wadl:doc>
          <![CDATA[Displays the XML representation of all specified files.<br/><br/>

An example &lt;links&gt; request is as follows:<br/>
<code>
&lt;ri:links xmlns:ri="http://genologics.com/ri"&gt;
&nbsp;&nbsp;&lt;link uri="http://localhost:8080/api/v2/files/ACC25A1-40-51" rel="files"/&gt;
&nbsp;&nbsp;&lt;link uri="http://localhost:8080/api/v2/files/ACC25A1-40-53" rel="files"/&gt;
&lt;/ri:links&gt;
</code>]]>
        </wadl:doc>
        <wadl:request>
          <wadl:doc>
            <![CDATA[A series of links, each containing the URI of a file you would like to retrieve. The file URIs must be unique and must correspond to valid file URIs in the system. Mixed resource links or duplicate files will result in an HTTP 400 error. Similarly, the request will be rejected if any URI does not resolve to a file in the system.<br/>]]>
          </wadl:doc>
          <wadl:representation mediaType="application/xml" element="ri:links" xmlns:ri="http://genologics.com/ri"/>
        </wadl:request>
        <wadl:response>
          <wadl:doc>
            <![CDATA[The system returns a response that includes the XML representations of the requested files, wrapped in a &lt;details&gt; parent.
Please refer to the GET documentation for files (single) in the REST resources documentation for
more information about the file XML representation that will be returned in the details.<br/>]]>
          </wadl:doc>
          <wadl:representation mediaType="application/xml" element="file:details" xmlns:file="http://genologics.com/ri/file"/>
        </wadl:response>
      </wadl:method>
    </wadl:resource>
    <wadl:resource path="/v2/files/batch/update">
      <wadl:method name="POST">
        <wadl:doc>
          <![CDATA[Updates the characteristics of the specified files. Rules for updating individual files apply.<br/><br/>

An example &lt;links&gt; response is as follows:<br/>
<code>
&lt;ri:links xmlns:ri="http://genologics.com/ri"&gt;
&nbsp;&nbsp;&lt;link uri="http://localhost:8080/api/v2/files/65-1" rel="files"/&gt;
&nbsp;&nbsp;&lt;link uri="http://localhost:8080/api/v2/files/65-2" rel="files"/&gt;
&lt;/ri:links&gt;
</code>]]>
        </wadl:doc>
        <wadl:request>
          <wadl:doc>
            <![CDATA[The XML representations of all the files you want to update, wrapped in a &lt;details&gt; parent. All details in the request body must correspond to unique files. Mixed resources or duplicate files will result in an HTTP 400 error. Please refer to the PUT documentation for files (single) in the REST resources documentation for the file XML representation and a description of what elements/attributes can be updated.<br/>]]>
          </wadl:doc>
          <wadl:representation mediaType="application/xml" element="file:details" xmlns:file="http://genologics.com/ri/file"/>
        </wadl:request>
        <wadl:response>
          <wadl:doc>
            <![CDATA[When the files have been successfully updated, the system returns an HTTP 200 (OK) code.
The response body includes a list of URI links to the updated files.<br/>]]>
          </wadl:doc>
          <wadl:representation mediaType="application/xml" element="ri:links" xmlns:ri="http://genologics.com/ri"/>
        </wadl:response>
      </wadl:method>
    </wadl:resource>
    <wadl:resource path="/v2/files/{limsid}/download">
      <wadl:param name="limsid" style="path">
        <wadl:doc>
          <![CDATA[The LIMS ID of the file whose content-location will be the download source.]]>
        </wadl:doc>
      </wadl:param>
      <wadl:method name="GET">
        <wadl:doc>
          <![CDATA[Downloads the file found in the content-location specified by the file single resource.
The Content-Type header will match the file's mime-type for common mime-types.
The Content-Type header defaults to application/octet-stream if the mime-type is not known.
The Content-Disposition header has the value: 'attachment; filename="fileName.txt"' where fileName.txt is the actual name of the file.
The Content-Length header indicates the size of the file contained in the response body (in bytes).]]>
        </wadl:doc>
        <wadl:request/>
        <wadl:response>
          <wadl:doc>
            <![CDATA[When the file is successfully downloaded, the system returns an HTTP 200 (OK) code with a response body that contains the file in binary form.]]>
          </wadl:doc>
          <wadl:representation mediaType="*/*"/>
          <wadl:representation mediaType="application/xml"/>
        </wadl:response>
      </wadl:method>
    </wadl:resource>
    <wadl:resource path="/v2/files/{limsid}/upload">
      <wadl:param name="limsid" style="path">
        <wadl:doc>
          <![CDATA[The LIMS ID of the file whose content-location will be the upload target.]]>
        </wadl:doc>
      </wadl:param>
      <wadl:method name="POST">
        <wadl:doc>
          <![CDATA[Uploads a file to the content-location specified by the file single resource.
The request must have a Content-Type of multipart/form-data.
The request payload must have a single form-data field named 'file' which contains the file to be uploaded.<br/><br/>

An example upload using the curl command:
<code>
curl+-F+file%3D%40fileName.txt+-u+username%3Apassword+http%3A%2F%2Flocalhost%3A8080%2Fapi%2Fv2%2Ffiles%2F40-123%2Fupload
</code>]]>
        </wadl:doc>
        <wadl:request/>
        <wadl:response>
          <wadl:doc>
            <![CDATA[When the file is successfully uploaded, the system returns an HTTP 200 (OK) code.]]>
          </wadl:doc>
          <wadl:representation mediaType="*/*"/>
          <wadl:representation mediaType="application/xml"/>
        </wadl:response>
      </wadl:method>
    </wadl:resource>
    <wadl:resource path="/v2/samples/batch/create">
      <wadl:method name="POST">
        <wadl:doc>
          <![CDATA[Creates a batch of samples, as specified in the request details. Rules for creating individual samples apply.]]>
        </wadl:doc>
        <wadl:request>
          <wadl:doc>
            <![CDATA[The information about the samples you want to add to the system, wrapped in a &lt;details&gt; parent. All request details must be valid sample XML representations. Mixed requests will result in an HTTP 400 error. Please refer to the POST documentation for samples (list) in the REST resources documentation for the sample XML representation and a description of what elements/attributes are necessary at creation.]]>
          </wadl:doc>
          <wadl:representation mediaType="application/xml" element="smp:details" xmlns:smp="http://genologics.com/ri/sample"/>
        </wadl:request>
        <wadl:response>
          <wadl:representation mediaType="application/xml" element="ri:links" xmlns:ri="http://genologics.com/ri"/>
        </wadl:response>
      </wadl:method>
    </wadl:resource>
    <wadl:resource path="/v2/samples/batch/retrieve">
      <wadl:method name="POST">
        <wadl:doc>
          <![CDATA[Displays the XML representation of all specified samples.]]>
        </wadl:doc>
        <wadl:request>
          <wadl:doc>
            <![CDATA[A series of links, each containing the URI of a sample you would like to retrieve. The sample URIs must be unique and must correspond to valid sample URIs in the system. Mixed resource links or duplicate samples will result in an HTTP 400 error. Similarly, the request will be rejected if any URI does not resolve to a sample in the system.]]>
          </wadl:doc>
          <wadl:representation mediaType="application/xml" element="ri:links" xmlns:ri="http://genologics.com/ri"/>
        </wadl:request>
        <wadl:response>
          <wadl:representation mediaType="application/xml" element="smp:details" xmlns:smp="http://genologics.com/ri/sample"/>
        </wadl:response>
      </wadl:method>
    </wadl:resource>
    <wadl:resource path="/v2/samples/batch/update">
      <wadl:method name="POST">
        <wadl:doc>
          <![CDATA[Updates the characteristics of the specified samples. Rules for updating individual samples apply.]]>
        </wadl:doc>
        <wadl:request>
          <wadl:doc>
            <![CDATA[The information about the samples you want to update in the system, wrapped in a &lt;details&gt; parent. All request details must be valid sample XML representations. Mixed requests will result in an HTTP 400 error. Please refer to the POST documentation for samples (list) in the REST resources documentation for the sample XML representation and a description of what elements/attributes are necessary for updates.]]>
          </wadl:doc>
          <wadl:representation mediaType="application/xml" element="smp:details" xmlns:smp="http://genologics.com/ri/sample"/>
        </wadl:request>
        <wadl:response>
          <wadl:representation mediaType="application/xml" element="ri:links" xmlns:ri="http://genologics.com/ri"/>
        </wadl:response>
      </wadl:method>
    </wadl:resource>
    <wadl:resource path="/v2/steps/{limsid}/actions">
      <wadl:param name="limsid" style="path">
        <wadl:doc>
          <![CDATA[The LIMS ID of the step run (process) you would like to display.]]>
        </wadl:doc>
      </wadl:param>
      <wadl:method name="GET">
        <wadl:doc>
          <![CDATA[Displays the XML representation of the step actions for the specified step.]]>
        </wadl:doc>
        <wadl:request/>
        <wadl:response>
          <wadl:doc>
            <![CDATA[The system returns a response that includes the XML representation of the step actions for the specified step.]]>
          </wadl:doc>
          <wadl:representation mediaType="application/xml" element="stp:actions" xmlns:stp="http://genologics.com/ri/step"/>
        </wadl:response>
      </wadl:method>
      <wadl:method name="PUT">
        <wadl:doc>
          <![CDATA[Updates the step actions of a specified step.<br/><br/>

When submitting a PUT request, you can update the next action of an active step sample.
A step action must contain the sample resource uri to identify the active step sample.
If the action attribute is not present, the step sample's next action will be set to unknown.
Step action update is available for steps that are in record details or assign next steps stages. All active step samples must be present.<br/><br/>

Additionally, step action update is available for steps in the under review stage when the property clarity.escalationBlocksAllSamplesInStep is set to true.
When updating actions while the step is under review, escalation request element updates are ignored and setting additional samples to the next-action of review is not allowed.<br/><br/>

Step actions samples are either inputs or the outputs of a step depending on the step configuration.
For a QC step, step inputs are the active step samples.
For a non-QC step, if the step produces sample outputs, the step outputs are the active step samples; otherwise the step
inputs are the active step samples.<br/><br/>

Update will fail if one of the follow error conditions is detected:

<ul>
<li>The next-action is a 'nextstep' action, and does not have a valid 'step-uri' attribute</li>
<li>The request does not include all active step samples.</li>
<li>The request contains samples that are not active step samples.</li>
<li>The request contains duplicated step samples.</li>
<li>The request step is already complete.</li>
<li>The request step is under review and the property clarity.escalationBlocksAllSamplesInStep is set to false.</li>
<li>The request step actions are not valid actions for the step.</li>
</ul>]]>
        </wadl:doc>
        <wadl:request>
          <wadl:representation mediaType="*/*" element="stp:actions" xmlns:stp="http://genologics.com/ri/step"/>
          <wadl:representation mediaType="application/xml" element="stp:actions" xmlns:stp="http://genologics.com/ri/step"/>
        </wadl:request>
        <wadl:response>
          <wadl:doc>
            <![CDATA[When the step actions are successfully updated, the system returns an HTTP 200 (OK) code with a response body that includes the
updated step actions of the step.]]>
          </wadl:doc>
          <wadl:representation mediaType="application/xml" element="stp:actions" xmlns:stp="http://genologics.com/ri/step"/>
        </wadl:response>
      </wadl:method>
    </wadl:resource>
    <wadl:resource path="/v2/steps/{limsid}/advance">
      <wadl:param name="limsid" style="path">
        <wadl:doc>
          <![CDATA[The LIMS ID of the step]]>
        </wadl:doc>
      </wadl:param>
      <wadl:method name="POST">
        <wadl:doc>
          <![CDATA[Requests the step to be advanced to the next status. Requires the current representation of the
step to be provided in the request.<br/><br/>

When advancing a step, the following rules apply:
<ul>
<li>the provided step status must match the current status of the step;
<li>if one or more External Programs are triggered during step advancement,
the step will remain in its current state until all External Programs triggered complete successfully
and any resulting outcomes are acknowledged;
<li>for the Pooling status, all inputs must be pooled beforehand;
<li>for the Placement status, all outputs must be placed beforehand;
<li>for the Add Reagents status, all outputs must have reagent labels applied;
<li>for the Record Details status, all required fields on the step, any outputs must have values and the step is signed if eSignature is required.;
<li>for the Assign Next Steps status, all samples must have a corresponding action assigned, except for non-aggregate QC steps in QC protocols;
</ul>]]>
        </wadl:doc>
        <wadl:request>
          <wadl:doc>
            <![CDATA[A step representation including at a minimum its current status]]>
          </wadl:doc>
          <wadl:representation mediaType="application/xml" element="stp:step" xmlns:stp="http://genologics.com/ri/step"/>
        </wadl:request>
        <wadl:response>
          <wadl:doc>
            <![CDATA[The representation of the step.]]>
          </wadl:doc>
          <wadl:representation mediaType="application/xml" element="stp:step" xmlns:stp="http://genologics.com/ri/step"/>
        </wadl:response>
      </wadl:method>
    </wadl:resource>
    <wadl:resource path="/v2/steps/{limsid}/details">
      <wadl:param name="limsid" style="path">
        <wadl:doc>
          <![CDATA[The LIMS ID of the step run (process) you would like to display]]>
        </wadl:doc>
      </wadl:param>
      <wadl:method name="GET">
        <wadl:doc>
          <![CDATA[Displays the XML representation of step details.]]>
        </wadl:doc>
        <wadl:request/>
        <wadl:response>
          <wadl:doc>
            <![CDATA[The system returns a response that includes the XML representation of the step details]]>
          </wadl:doc>
          <wadl:representation mediaType="application/xml" element="stp:details" xmlns:stp="http://genologics.com/ri/step"/>
        </wadl:response>
      </wadl:method>
      <wadl:method name="PUT">
        <wadl:doc>
          <![CDATA[Updates the step details for the specified step.<br/><br/>

The following rules apply:
<ul>
<li>if provided, the instrument must be of a type that is compatible with the step's process type
<li>if provided, the preset must be configured for the step's process type
<li>the preset chosen does not have any effect on instrument selection or UDF values; they are set independently.
If you want to honor a preset's instrument selection and default UDF values, you need to obtain the preset (process template)
representation and copy the instrument selection and default UDF values to the step details representation
before issuing the PUT request.
<li>if UDF values are provided, the corresponding UDFs must exist. Fields configured
for the process type but not associated for the step can be set,
but are not considered mandatory (even if configured as required under the process type).
</ul>]]>
        </wadl:doc>
        <wadl:request>
          <wadl:doc>
            <![CDATA[the new step details representation]]>
          </wadl:doc>
          <wadl:representation mediaType="application/xml" element="stp:details" xmlns:stp="http://genologics.com/ri/step"/>
        </wadl:request>
        <wadl:response>
          <wadl:doc>
            <![CDATA[The system returns a response that includes the XML representation of the step details]]>
          </wadl:doc>
          <wadl:representation mediaType="application/xml" element="stp:details" xmlns:stp="http://genologics.com/ri/step"/>
        </wadl:response>
      </wadl:method>
    </wadl:resource>
    <wadl:resource path="/v2/steps/{limsid}/placements">
      <wadl:param name="limsid" style="path">
        <wadl:doc>
          <![CDATA[The LIMS ID of the step run (process) you would like to display]]>
        </wadl:doc>
      </wadl:param>
      <wadl:method name="GET">
        <wadl:doc>
          <![CDATA[Displays the XML representation of placements for a step's output artifacts.]]>
        </wadl:doc>
        <wadl:request/>
        <wadl:response>
          <wadl:doc>
            <![CDATA[The system returns a response that includes the XML representation of the step's output artifact's placements]]>
          </wadl:doc>
          <wadl:representation mediaType="application/xml" element="stp:placements" xmlns:stp="http://genologics.com/ri/step"/>
        </wadl:response>
      </wadl:method>
      <wadl:method name="POST">
        <wadl:doc>
          <![CDATA[Sets the placements of the step's output artifacts.<br/><br/>

When submitting a POST request, you may set placements for all or a subset of the step's output artifacts.
<ul>
<li>If a placement is provided and one already exists for a specified artifact, it will be replaced with the new one.</li>
<li>When an artifact is provided without a placement, any existing placement will be removed.</li>
<li>Placements for omitted artifacts will remain unchanged.</li>
</ul><br/><br/>

<p>
Selected containers may also be provided in the POST request.  This may include an "on-the-fly" container, which
was created automatically when the step was started or created on the placement screen in the Clarity Web UI:
</p>
<ul>
<li>Any containers not provided in the selected containers section but included in placements will be selected.</li>
<li>When selected containers are not provided, any empty on-the-fly containers will be deleted. In the case where
no artifacts have placements and this action would result in the step having no containers, then the deletion
will not occur.</li>
<li>When selected containers are not submitted, any containers that were not created on-the-fly that were already
selected for the step will remain so.</li>
<li>Any containers that were previously selected for the step will be removed if not included in the selected
containers or on any placements in the POST.</li>
<li>If an on-the-fly container is included in the selected containers but does not have any placements, it will
remain part of the step.</li>
</ul><br/><br/>

<p>
POST will fail if any one of the follow error conditions is detected:
</p>

<ul>
<li>The request step does not support container placement.</li>
<li>The request step is already complete or is under review.</li>
<li>The request contains artifacts that are not step outputs.</li>
<li>The request contains artifacts that are not placeable.</li>
<li>The request contains duplicate step artifacts.</li>
<li>The request contains containers that do not exist.</li>
<li>The request contains container locations that are already in use by artifacts that are not outputs of the current step.</li>
<li>The request contains containers that are not of a type allowed by the step configuration.</li>
<li>The request contains container locations that are unavailable or calibrant only wells.</li>
<li>The request contains a location &lt;value&gt; that is not formatted correctly for the container type 'A:1' versus '1:A'.</li>
</ul>]]>
        </wadl:doc>
        <wadl:request>
          <wadl:representation mediaType="*/*" element="stp:placements" xmlns:stp="http://genologics.com/ri/step"/>
          <wadl:representation mediaType="application/xml" element="stp:placements" xmlns:stp="http://genologics.com/ri/step"/>
        </wadl:request>
        <wadl:response>
          <wadl:doc>
            <![CDATA[When the step placements are successfully created, the system returns an HTTP 201 (CREATED) code with a response body that includes the
selected containers and created step placements]]>
          </wadl:doc>
          <wadl:representation mediaType="application/xml" element="stp:placements" xmlns:stp="http://genologics.com/ri/step"/>
        </wadl:response>
      </wadl:method>
    </wadl:resource>
    <wadl:resource path="/v2/steps/{limsid}/pools">
      <wadl:param name="limsid" style="path">
        <wadl:doc>
          <![CDATA[The LIMS ID of the step run (process) you would like to display]]>
        </wadl:doc>
      </wadl:param>
      <wadl:method name="GET">
        <wadl:doc>
          <![CDATA[Displays the XML representation of a step's input artifact pools.]]>
        </wadl:doc>
        <wadl:request/>
        <wadl:response>
          <wadl:doc>
            <![CDATA[The system returns a response that includes the XML representation of the step's input artifact pools]]>
          </wadl:doc>
          <wadl:representation mediaType="application/xml" element="stp:pools" xmlns:stp="http://genologics.com/ri/step"/>
        </wadl:response>
      </wadl:method>
      <wadl:method name="PUT">
        <wadl:doc>
          <![CDATA[Updates the step's input artifact pools.<br/><br/>

When submitting a PUT request, you may provide pools for all or a subset of the step's available input artifacts.
Pools provided in the request will replace existing pool definitions. Unused input artifacts will be returned in
the available inputs list.<br/><br/>

Put will fail if one of the follow error conditions is detected:

<ul>
<li>The requested step does not exist.</li>
<li>The requested step does not support pooling.</li>
<li>The requested step is beyond the pooling status.</li>
<li>The requested step is already complete or is under review.</li>
<li>The request contains pools with non-unique input artifacts</li>
<li>The request contains artifacts that are not step inputs.</li>
<li>The request contains artifacts that are not of type Analyte.</li>
<li>The request contains pooling of artifacts with the same reagent label but the process attribute configuration does not allow it.</li>
</ul>]]>
        </wadl:doc>
        <wadl:request>
          <wadl:representation mediaType="*/*" element="stp:pools" xmlns:stp="http://genologics.com/ri/step"/>
          <wadl:representation mediaType="application/xml" element="stp:pools" xmlns:stp="http://genologics.com/ri/step"/>
        </wadl:request>
        <wadl:response>
          <wadl:doc>
            <![CDATA[When the step pools are successfully updated, the system returns an HTTP 200 (OK) code with a response body that includes the
updated step pools and any remaining available inputs]]>
          </wadl:doc>
          <wadl:representation mediaType="application/xml" element="stp:pools" xmlns:stp="http://genologics.com/ri/step"/>
        </wadl:response>
      </wadl:method>
    </wadl:resource>
    <wadl:resource path="/v2/steps/{limsid}/programstatus">
      <wadl:param name="limsid" style="path">
        <wadl:doc>
          <![CDATA[The LIMS ID of the step to retrieve the EPP status for]]>
        </wadl:doc>
      </wadl:param>
      <wadl:method name="GET">
        <wadl:doc>
          <![CDATA[Gets the representation of a step's external program status.
If no such step exists, or the step does not have a current external program status, a
404 HTTP status will be returned.]]>
        </wadl:doc>
        <wadl:request/>
        <wadl:response>
          <wadl:doc>
            <![CDATA[The representation of the step's external program status.]]>
          </wadl:doc>
          <wadl:representation mediaType="application/xml" element="stp:program-status" xmlns:stp="http://genologics.com/ri/step"/>
        </wadl:response>
      </wadl:method>
      <wadl:method name="PUT">
        <wadl:doc>
          <![CDATA[Updates the step's current external program status, essentially setting its outcome.
Only the status for EPP programs triggered automatically
can be updated using this endpoint.
A client cannot set an EPP program status for a step that has no current external program status; such a request will result in an error.
A client cannot set an EPP program status to RUNNING, as it is a temporary status; such a request will be ignored.
Possible status values are: OK, ERROR, WARNING, and RUNNING.]]>
        </wadl:doc>
        <wadl:request>
          <wadl:representation mediaType="*/*" element="stp:program-status" xmlns:stp="http://genologics.com/ri/step"/>
          <wadl:representation mediaType="application/xml" element="stp:program-status" xmlns:stp="http://genologics.com/ri/step"/>
        </wadl:request>
        <wadl:response>
          <wadl:doc>
            <![CDATA[The representation of the step's external program status.]]>
          </wadl:doc>
          <wadl:representation mediaType="application/xml" element="stp:program-status" xmlns:stp="http://genologics.com/ri/step"/>
        </wadl:response>
      </wadl:method>
    </wadl:resource>
    <wadl:resource path="/v2/steps/{limsid}/reagentlots">
      <wadl:param name="limsid" style="path">
        <wadl:doc>
          <![CDATA[The LIMS ID of the step run (process) you would like to display]]>
        </wadl:doc>
      </wadl:param>
      <wadl:method name="GET">
        <wadl:doc>
          <![CDATA[Displays the XML representation of reagents lots for a step.]]>
        </wadl:doc>
        <wadl:request/>
        <wadl:response>
          <wadl:doc>
            <![CDATA[The system returns a response that includes the XML representation of the step's reagent lots]]>
          </wadl:doc>
          <wadl:representation mediaType="application/xml" element="stp:lots" xmlns:stp="http://genologics.com/ri/step"/>
        </wadl:response>
      </wadl:method>
      <wadl:method name="PUT">
        <wadl:doc>
          <![CDATA[Sets the reagent lots for the step.<br/><br/>

When submitting a PUT request, you must set every reagent lot that is applicable to step.  If the step already
has associated lots, then the existing list will be replaced with the list in the request.  Any reagent lots
that are not included in the request will be removed from the step.<br/><br/>

PUT will fail if one of the follow error conditions is detected:

<ul>
<li>The request step does not support reagent lots.</li>
<li>The request step is already complete or is under review.</li>
<li>The request step does not contain valid reagent lots defined in the configuration.</li>
</ul>]]>
        </wadl:doc>
        <wadl:request>
          <wadl:doc>
            <![CDATA[The request step, representing the submitted XML]]>
          </wadl:doc>
          <wadl:representation mediaType="*/*" element="stp:lots" xmlns:stp="http://genologics.com/ri/step"/>
          <wadl:representation mediaType="application/xml" element="stp:lots" xmlns:stp="http://genologics.com/ri/step"/>
        </wadl:request>
        <wadl:response>
          <wadl:doc>
            <![CDATA[When the step reagent lots are successfully updated, the system returns an HTTP 200 (OK) code with a
response body that includes the updated step reagent lots]]>
          </wadl:doc>
          <wadl:representation mediaType="application/xml" element="stp:lots" xmlns:stp="http://genologics.com/ri/step"/>
        </wadl:response>
      </wadl:method>
    </wadl:resource>
    <wadl:resource path="/v2/steps/{limsid}/reagents">
      <wadl:param name="limsid" style="path">
        <wadl:doc>
          <![CDATA[The LIMS ID of the step run (process) you would like to display]]>
        </wadl:doc>
      </wadl:param>
      <wadl:method name="GET">
        <wadl:doc>
          <![CDATA[Displays the XML representation of reagents for a step's output artifacts.]]>
        </wadl:doc>
        <wadl:request/>
        <wadl:response>
          <wadl:doc>
            <![CDATA[The system returns a response that includes the XML representation of the step's output artifact's reagents]]>
          </wadl:doc>
          <wadl:representation mediaType="application/xml" element="stp:reagents" xmlns:stp="http://genologics.com/ri/step"/>
        </wadl:response>
      </wadl:method>
      <wadl:method name="POST">
        <wadl:doc>
          <![CDATA[Sets the reagent labels of the step's output artifacts.<br/><br/>

When submitting a POST request, you may set reagent labels for all or a subset of the step's output artifacts.
If a reagent label is provided and one already exists for a specified artifact, it will be replaced with the new one.
When an artifact is provided without a label, existing labels will be removed.
Reagent labels for omitted artifacts will remain unchanged.<br/><br/>

Post will fail if one of the follow error conditions is detected:

<ul>
<li>The request step does not support reagent addition.</li>
<li>The request step is already complete or is under review.</li>
<li>The request step does not contain valid reagent labels configured by the step's reagent category.</li>
<li>The request contains artifacts that are not step outputs.</li>
<li>The request contains artifacts that are not of type Analyte.</li>
<li>The request contains duplicate step artifacts.</li>
</ul>]]>
        </wadl:doc>
        <wadl:request>
          <wadl:representation mediaType="*/*" element="stp:reagents" xmlns:stp="http://genologics.com/ri/step"/>
          <wadl:representation mediaType="application/xml" element="stp:reagents" xmlns:stp="http://genologics.com/ri/step"/>
        </wadl:request>
        <wadl:response>
          <wadl:doc>
            <![CDATA[When the step reagents are successfully created, the system returns an HTTP 201 (CREATED) code with a response body that includes the
created step reagents]]>
          </wadl:doc>
          <wadl:representation mediaType="application/xml" element="stp:reagents" xmlns:stp="http://genologics.com/ri/step"/>
        </wadl:response>
      </wadl:method>
    </wadl:resource>
    <wadl:resource path="/v2/steps/{limsid}/setup">
      <wadl:param name="limsid" style="path">
        <wadl:doc>
          <![CDATA[The LIMS ID of the step run (process) you would like to display]]>
        </wadl:doc>
      </wadl:param>
      <wadl:method name="GET">
        <wadl:doc>
          <![CDATA[Displays the XML representation of step setup.]]>
        </wadl:doc>
        <wadl:request/>
        <wadl:response>
          <wadl:doc>
            <![CDATA[The system returns a response that includes the XML representation of the step setup]]>
          </wadl:doc>
          <wadl:representation mediaType="application/xml" element="stp:setup" xmlns:stp="http://genologics.com/ri/step"/>
        </wadl:response>
      </wadl:method>
    </wadl:resource>
    <wadl:resource path="/v2/steps/{limsid}/trigger/{programid}">
      <wadl:param name="limsid" style="path">
        <wadl:doc>
          <![CDATA[The LIMS ID of the step]]>
        </wadl:doc>
      </wadl:param>
      <wadl:param name="programid" style="path">
        <wadl:doc>
          <![CDATA[The id of the program to execute]]>
        </wadl:doc>
      </wadl:param>
      <wadl:method name="POST">
        <wadl:doc>
          <![CDATA[Requests an external program to be executed.<br/><br/>

When triggering the execution of an external program, the following rules apply:
<ul>
<li>there cannot be any external programs currently in execution or queued for the step
</ul>]]>
        </wadl:doc>
        <wadl:request/>
        <wadl:response>
          <wadl:doc>
            <![CDATA[The resulting program status.]]>
          </wadl:doc>
          <wadl:representation mediaType="application/xml" element="stp:program-status" xmlns:stp="http://genologics.com/ri/step"/>
        </wadl:response>
      </wadl:method>
    </wadl:resource>
    <wadl:resource path="/v2/configuration/protocols/{protocolId}/steps/{stepId}">
      <wadl:param name="stepId" style="path">
        <wadl:doc>
          <![CDATA[the step ID of the step we wish to access]]>
        </wadl:doc>
      </wadl:param>
      <wadl:param name="protocolId" style="path">
        <wadl:doc>
          <![CDATA[the protocol ID of the step]]>
        </wadl:doc>
      </wadl:param>
      <wadl:method name="GET">
        <wadl:doc>
          <![CDATA[GET accesses a single protocol step configuration, giving specific details on
the step.]]>
        </wadl:doc>
        <wadl:request/>
        <wadl:response>
          <wadl:doc>
            <![CDATA[returns xml representation of the protocol step]]>
          </wadl:doc>
          <wadl:representation mediaType="application/xml" element="protstepcnf:step" xmlns:protstepcnf="http://genologics.com/ri/stepconfiguration"/>
        </wadl:response>
      </wadl:method>
    </wadl:resource>
    <wadl:resource path="/v2/configuration/workflows/{workflowid}/stages/{stageid}">
      <wadl:param name="stageid" style="path">
        <wadl:doc>
          <![CDATA[the stage ID of the stage we wish to access]]>
        </wadl:doc>
      </wadl:param>
      <wadl:param name="workflowid" style="path">
        <wadl:doc>
          <![CDATA[the workflow ID of the stage]]>
        </wadl:doc>
      </wadl:param>
      <wadl:method name="GET">
        <wadl:doc>
          <![CDATA[GET accesses a single stage in a workflow, giving specific details for the stage.<br/><br/>

An example of a returned &lt;stage&gt; is as follows:<br/>
<code>
&lt;stg:stage xmlns:stg="http://genologics.com/ri/stage" index="10" name="Denature, Dilute and Load Sample (MiSeq) 4.0" uri="http://localhost:8090/api/v2/configuration/workflows/1/stages/11"&gt;
&nbsp;&nbsp;&lt;workflow uri="http://localhost:8090/api/v2/configuration/workflows/1"/&gt;
&nbsp;&nbsp;&lt;protocol uri="http://localhost:8090/api/v2/configuration/protocols/8"/&gt;
&nbsp;&nbsp;&lt;step uri="http://localhost:8090/api/v2/configuration/protocols/8/steps/42"/&gt;
&lt;/stg:stage&gt;
</code>]]>
        </wadl:doc>
        <wadl:request/>
        <wadl:response>
          <wadl:doc>
            <![CDATA[xml representation of the stage]]>
          </wadl:doc>
          <wadl:representation mediaType="application/xml" element="stg:stage" xmlns:stg="http://genologics.com/ri/stage"/>
        </wadl:response>
      </wadl:method>
    </wadl:resource>
  </wadl:resources>
</wadl:application>
