/**
 * This class is generated by jOOQ
 */
package gen.db.model;


import gen.db.model.tables.Accounts;
import gen.db.model.tables.Categories;
import gen.db.model.tables.CuratedPatients;
import gen.db.model.tables.IcdCodes;
import gen.db.model.tables.OrderTests;
import gen.db.model.tables.Orders;
import gen.db.model.tables.Patients;
import gen.db.model.tables.Providers;
import gen.db.model.tables.Specimens;
import gen.db.model.tables.StageGenoPatients;
import gen.db.model.tables.StageGenoSamples;
import gen.db.model.tables.StageImmunoOrders;
import gen.db.model.tables.StageSforceOrderitem;
import gen.db.model.tables.TestCategories;
import gen.db.model.tables.Tests;

import java.util.ArrayList;
import java.util.Arrays;
import java.util.List;

import javax.annotation.Generated;

import org.jooq.Sequence;
import org.jooq.Table;
import org.jooq.impl.SchemaImpl;


/**
 * This class is generated by jOOQ.
 */
@Generated(
	value = {
		"http://www.jooq.org",
		"jOOQ version:3.7.2"
	},
	comments = "This class is generated by jOOQ"
)
@SuppressWarnings({ "all", "unchecked", "rawtypes" })
public class Cora extends SchemaImpl {

	private static final long serialVersionUID = -1655196393;

	/**
	 * The reference instance of <code>cora</code>
	 */
	public static final Cora CORA = new Cora();

	/**
	 * No further instances allowed
	 */
	private Cora() {
		super("cora");
	}

	@Override
	public final List<Sequence<?>> getSequences() {
		List result = new ArrayList();
		result.addAll(getSequences0());
		return result;
	}

	private final List<Sequence<?>> getSequences0() {
		return Arrays.<Sequence<?>>asList(
			Sequences.CURATED_PATIENTS_PATIENT_CODE_SEQ,
			Sequences.PATIENTS_PATIENT_CODE_SEQ);
	}

	@Override
	public final List<Table<?>> getTables() {
		List result = new ArrayList();
		result.addAll(getTables0());
		return result;
	}

	private final List<Table<?>> getTables0() {
		return Arrays.<Table<?>>asList(
			Accounts.ACCOUNTS,
			Categories.CATEGORIES,
			CuratedPatients.CURATED_PATIENTS,
			IcdCodes.ICD_CODES,
			OrderTests.ORDER_TESTS,
			Orders.ORDERS,
			Patients.PATIENTS,
			Providers.PROVIDERS,
			Specimens.SPECIMENS,
			StageGenoPatients.STAGE_GENO_PATIENTS,
			StageGenoSamples.STAGE_GENO_SAMPLES,
			StageImmunoOrders.STAGE_IMMUNO_ORDERS,
			StageSforceOrderitem.STAGE_SFORCE_ORDERITEM,
			TestCategories.TEST_CATEGORIES,
			Tests.TESTS);
	}
}
