/**
 * This class is generated by jOOQ
 */
package gen.db.model.tables;


import gen.db.model.Cora;
import gen.db.model.Keys;
import gen.db.model.tables.records.TestCategoriesRecord;

import java.sql.Timestamp;
import java.util.Arrays;
import java.util.List;
import java.util.UUID;

import javax.annotation.Generated;

import org.jooq.Field;
import org.jooq.ForeignKey;
import org.jooq.Table;
import org.jooq.TableField;
import org.jooq.UniqueKey;
import org.jooq.impl.TableImpl;


/**
 * This class is generated by jOOQ.
 */
@Generated(
	value = {
		"http://www.jooq.org",
		"jOOQ version:3.7.2"
	},
	comments = "This class is generated by jOOQ"
)
@SuppressWarnings({ "all", "unchecked", "rawtypes" })
public class TestCategories extends TableImpl<TestCategoriesRecord> {

	private static final long serialVersionUID = -1811110340;

	/**
	 * The reference instance of <code>cora.test_categories</code>
	 */
	public static final TestCategories TEST_CATEGORIES = new TestCategories();

	/**
	 * The class holding records for this type
	 */
	@Override
	public Class<TestCategoriesRecord> getRecordType() {
		return TestCategoriesRecord.class;
	}

	/**
	 * The column <code>cora.test_categories.id</code>.
	 */
	public final TableField<TestCategoriesRecord, UUID> ID = createField("id", org.jooq.impl.SQLDataType.UUID.nullable(false), this, "");

	/**
	 * The column <code>cora.test_categories.test_id</code>.
	 */
	public final TableField<TestCategoriesRecord, UUID> TEST_ID = createField("test_id", org.jooq.impl.SQLDataType.UUID.nullable(false), this, "");

	/**
	 * The column <code>cora.test_categories.category_id</code>.
	 */
	public final TableField<TestCategoriesRecord, UUID> CATEGORY_ID = createField("category_id", org.jooq.impl.SQLDataType.UUID.nullable(false), this, "");

	/**
	 * The column <code>cora.test_categories.active</code>.
	 */
	public final TableField<TestCategoriesRecord, Boolean> ACTIVE = createField("active", org.jooq.impl.SQLDataType.BOOLEAN.nullable(false).defaulted(true), this, "");

	/**
	 * The column <code>cora.test_categories.version</code>.
	 */
	public final TableField<TestCategoriesRecord, Long> VERSION = createField("version", org.jooq.impl.SQLDataType.BIGINT, this, "");

	/**
	 * The column <code>cora.test_categories.created</code>.
	 */
	public final TableField<TestCategoriesRecord, Timestamp> CREATED = createField("created", org.jooq.impl.SQLDataType.TIMESTAMP.nullable(false).defaulted(true), this, "");

	/**
	 * The column <code>cora.test_categories.modified</code>.
	 */
	public final TableField<TestCategoriesRecord, Timestamp> MODIFIED = createField("modified", org.jooq.impl.SQLDataType.TIMESTAMP.nullable(false).defaulted(true), this, "");

	/**
	 * The column <code>cora.test_categories.created_by</code>.
	 */
	public final TableField<TestCategoriesRecord, String> CREATED_BY = createField("created_by", org.jooq.impl.SQLDataType.VARCHAR.length(256).nullable(false), this, "");

	/**
	 * The column <code>cora.test_categories.modified_by</code>.
	 */
	public final TableField<TestCategoriesRecord, String> MODIFIED_BY = createField("modified_by", org.jooq.impl.SQLDataType.VARCHAR.length(256).nullable(false), this, "");

	/**
	 * Create a <code>cora.test_categories</code> table reference
	 */
	public TestCategories() {
		this("test_categories", null);
	}

	/**
	 * Create an aliased <code>cora.test_categories</code> table reference
	 */
	public TestCategories(String alias) {
		this(alias, TEST_CATEGORIES);
	}

	private TestCategories(String alias, Table<TestCategoriesRecord> aliased) {
		this(alias, aliased, null);
	}

	private TestCategories(String alias, Table<TestCategoriesRecord> aliased, Field<?>[] parameters) {
		super(alias, Cora.CORA, aliased, parameters, "");
	}

	/**
	 * {@inheritDoc}
	 */
	@Override
	public UniqueKey<TestCategoriesRecord> getPrimaryKey() {
		return Keys.TEST_CATEGORIES_PKEY;
	}

	/**
	 * {@inheritDoc}
	 */
	@Override
	public List<UniqueKey<TestCategoriesRecord>> getKeys() {
		return Arrays.<UniqueKey<TestCategoriesRecord>>asList(Keys.TEST_CATEGORIES_PKEY);
	}

	/**
	 * {@inheritDoc}
	 */
	@Override
	public List<ForeignKey<TestCategoriesRecord, ?>> getReferences() {
		return Arrays.<ForeignKey<TestCategoriesRecord, ?>>asList(Keys.TEST_CATEGORIES__TEST_CATEGORIES_TEST_ID_FKEY, Keys.TEST_CATEGORIES__TEST_CATEGORIES_CATEGORY_ID_FKEY);
	}

	/**
	 * {@inheritDoc}
	 */
	@Override
	public TestCategories as(String alias) {
		return new TestCategories(alias, this);
	}

	/**
	 * Rename this table
	 */
	public TestCategories rename(String name) {
		return new TestCategories(name, null);
	}
}
