/**
 * This class is generated by jOOQ
 */
package gen.db.cora.tables;


import gen.db.cora.Cora;
import gen.db.cora.Keys;
import gen.db.cora.tables.records.AccountsRecord;

import java.sql.Timestamp;
import java.util.Arrays;
import java.util.List;
import java.util.UUID;

import javax.annotation.Generated;

import org.jooq.Field;
import org.jooq.ForeignKey;
import org.jooq.Table;
import org.jooq.TableField;
import org.jooq.UniqueKey;
import org.jooq.impl.TableImpl;


/**
 * This class is generated by jOOQ.
 */
@Generated(
	value = {
		"http://www.jooq.org",
		"jOOQ version:3.6.0"
	},
	comments = "This class is generated by jOOQ"
)
@SuppressWarnings({ "all", "unchecked", "rawtypes" })
public class Accounts extends TableImpl<AccountsRecord> {

	private static final long serialVersionUID = -1940100297;

	/**
	 * The reference instance of <code>cora.accounts</code>
	 */
	public static final Accounts ACCOUNTS = new Accounts();

	/**
	 * The class holding records for this type
	 */
	@Override
	public Class<AccountsRecord> getRecordType() {
		return AccountsRecord.class;
	}

	/**
	 * The column <code>cora.accounts.id</code>.
	 */
	public final TableField<AccountsRecord, UUID> ID = createField("id", org.jooq.impl.SQLDataType.UUID.nullable(false), this, "");

	/**
	 * The column <code>cora.accounts.parent_id</code>.
	 */
	public final TableField<AccountsRecord, UUID> PARENT_ID = createField("parent_id", org.jooq.impl.SQLDataType.UUID, this, "");

	/**
	 * The column <code>cora.accounts.name</code>.
	 */
	public final TableField<AccountsRecord, String> NAME = createField("name", org.jooq.impl.SQLDataType.VARCHAR.length(64), this, "");

	/**
	 * The column <code>cora.accounts.description</code>.
	 */
	public final TableField<AccountsRecord, String> DESCRIPTION = createField("description", org.jooq.impl.SQLDataType.VARCHAR.length(64), this, "");

	/**
	 * The column <code>cora.accounts.account_type</code>.
	 */
	public final TableField<AccountsRecord, String> ACCOUNT_TYPE = createField("account_type", org.jooq.impl.SQLDataType.VARCHAR.length(64), this, "");

	/**
	 * The column <code>cora.accounts.active</code>.
	 */
	public final TableField<AccountsRecord, Boolean> ACTIVE = createField("active", org.jooq.impl.SQLDataType.BOOLEAN.nullable(false).defaulted(true), this, "");

	/**
	 * The column <code>cora.accounts.version</code>.
	 */
	public final TableField<AccountsRecord, Long> VERSION = createField("version", org.jooq.impl.SQLDataType.BIGINT, this, "");

	/**
	 * The column <code>cora.accounts.created</code>.
	 */
	public final TableField<AccountsRecord, Timestamp> CREATED = createField("created", org.jooq.impl.SQLDataType.TIMESTAMP.nullable(false).defaulted(true), this, "");

	/**
	 * The column <code>cora.accounts.modified</code>.
	 */
	public final TableField<AccountsRecord, Timestamp> MODIFIED = createField("modified", org.jooq.impl.SQLDataType.TIMESTAMP.nullable(false).defaulted(true), this, "");

	/**
	 * The column <code>cora.accounts.created_by</code>.
	 */
	public final TableField<AccountsRecord, UUID> CREATED_BY = createField("created_by", org.jooq.impl.SQLDataType.UUID.nullable(false), this, "");

	/**
	 * The column <code>cora.accounts.modified_by</code>.
	 */
	public final TableField<AccountsRecord, UUID> MODIFIED_BY = createField("modified_by", org.jooq.impl.SQLDataType.UUID.nullable(false), this, "");

	/**
	 * Create a <code>cora.accounts</code> table reference
	 */
	public Accounts() {
		this("accounts", null);
	}

	/**
	 * Create an aliased <code>cora.accounts</code> table reference
	 */
	public Accounts(String alias) {
		this(alias, ACCOUNTS);
	}

	private Accounts(String alias, Table<AccountsRecord> aliased) {
		this(alias, aliased, null);
	}

	private Accounts(String alias, Table<AccountsRecord> aliased, Field<?>[] parameters) {
		super(alias, Cora.CORA, aliased, parameters, "");
	}

	/**
	 * {@inheritDoc}
	 */
	@Override
	public UniqueKey<AccountsRecord> getPrimaryKey() {
		return Keys.ACCOUNTS_PKEY;
	}

	/**
	 * {@inheritDoc}
	 */
	@Override
	public List<UniqueKey<AccountsRecord>> getKeys() {
		return Arrays.<UniqueKey<AccountsRecord>>asList(Keys.ACCOUNTS_PKEY, Keys.ACCOUNTS_NAME_KEY);
	}

	/**
	 * {@inheritDoc}
	 */
	@Override
	public List<ForeignKey<AccountsRecord, ?>> getReferences() {
		return Arrays.<ForeignKey<AccountsRecord, ?>>asList(Keys.ACCOUNTS__ACCOUNTS_PARENT_ID_FKEY);
	}

	/**
	 * {@inheritDoc}
	 */
	@Override
	public Accounts as(String alias) {
		return new Accounts(alias, this);
	}

	/**
	 * Rename this table
	 */
	public Accounts rename(String name) {
		return new Accounts(name, null);
	}
}
